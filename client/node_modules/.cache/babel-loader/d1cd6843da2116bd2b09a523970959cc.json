{"ast":null,"code":"const fs = require('fs');\n\nconst util = require('util');\n\nconst readdir = util.promisify(fs.readdir);\n\nconst {\n  resolve\n} = require('path');\n\nconst Arborist = require('@npmcli/arborist');\n\nconst npa = require('npm-package-arg');\n\nconst rpj = require('read-package-json-fast');\n\nconst semver = require('semver');\n\nconst reifyFinish = require('../utils/reify-finish.js');\n\nconst ArboristWorkspaceCmd = require('../arborist-cmd.js');\n\nclass Link extends ArboristWorkspaceCmd {\n  static description = 'Symlink a package folder';\n  static name = 'link';\n  static usage = ['[<package-spec>]'];\n  static params = ['save', 'save-exact', 'global', 'global-style', 'legacy-bundling', 'strict-peer-deps', 'package-lock', 'omit', 'ignore-scripts', 'audit', 'bin-links', 'fund', 'dry-run', ...super.params];\n\n  async completion(opts) {\n    const dir = this.npm.globalDir;\n    const files = await readdir(dir);\n    return files.filter(f => !/^[._-]/.test(f));\n  }\n\n  async exec(args) {\n    if (this.npm.global) {\n      throw Object.assign(new Error('link should never be --global.\\n' + 'Please re-run this command with --local'), {\n        code: 'ELINKGLOBAL'\n      });\n    } // link with no args: symlink the folder to the global location\n    // link with package arg: symlink the global to the local\n\n\n    args = args.filter(a => resolve(a) !== this.npm.prefix);\n    return args.length ? this.linkInstall(args) : this.linkPkg();\n  }\n\n  async linkInstall(args) {\n    // load current packages from the global space,\n    // and then add symlinks installs locally\n    const globalTop = resolve(this.npm.globalDir, '..');\n    const globalOpts = { ...this.npm.flatOptions,\n      path: globalTop,\n      global: true,\n      prune: false\n    };\n    const globalArb = new Arborist(globalOpts); // get only current top-level packages from the global space\n\n    const globals = await globalArb.loadActual({\n      filter: (node, kid) => !node.isRoot || args.some(a => npa(a).name === kid)\n    }); // any extra arg that is missing from the current\n    // global space should be reified there first\n\n    const missing = this.missingArgsFromTree(globals, args);\n\n    if (missing.length) {\n      await globalArb.reify({ ...globalOpts,\n        add: missing\n      });\n    } // get a list of module names that should be linked in the local prefix\n\n\n    const names = [];\n\n    for (const a of args) {\n      const arg = npa(a);\n      names.push(arg.type === 'directory' ? (await rpj(resolve(arg.fetchSpec, 'package.json'))).name : arg.name);\n    } // npm link should not save=true by default unless you're\n    // using any of --save-dev or other types\n\n\n    const save = Boolean(this.npm.config.find('save') !== 'default' || this.npm.config.get('save-optional') || this.npm.config.get('save-peer') || this.npm.config.get('save-dev') || this.npm.config.get('save-prod')); // create a new arborist instance for the local prefix and\n    // reify all the pending names as symlinks there\n\n    const localArb = new Arborist({ ...this.npm.flatOptions,\n      prune: false,\n      path: this.npm.prefix,\n      save\n    });\n    await localArb.reify({ ...this.npm.flatOptions,\n      prune: false,\n      path: this.npm.prefix,\n      add: names.map(l => `file:${resolve(globalTop, 'node_modules', l).replace(/#/g, '%23')}`),\n      save,\n      workspaces: this.workspaceNames\n    });\n    await reifyFinish(this.npm, localArb);\n  }\n\n  async linkPkg() {\n    const wsp = this.workspacePaths;\n    const paths = wsp && wsp.length ? wsp : [this.npm.prefix];\n    const add = paths.map(path => `file:${path.replace(/#/g, '%23')}`);\n    const globalTop = resolve(this.npm.globalDir, '..');\n    const arb = new Arborist({ ...this.npm.flatOptions,\n      path: globalTop,\n      global: true\n    });\n    await arb.reify({\n      add\n    });\n    await reifyFinish(this.npm, arb);\n  } // Returns a list of items that can't be fulfilled by\n  // things found in the current arborist inventory\n\n\n  missingArgsFromTree(tree, args) {\n    if (tree.isLink) {\n      return this.missingArgsFromTree(tree.target, args);\n    }\n\n    const foundNodes = [];\n    const missing = args.filter(a => {\n      const arg = npa(a);\n      const nodes = tree.children.values();\n      const argFound = [...nodes].every(node => {\n        // TODO: write tests for unmatching version specs, this is hard to test\n        // atm but should be simple once we have a mocked registry again\n        if (arg.name !== node.name\n        /* istanbul ignore next */\n        || arg.version &&\n        /* istanbul ignore next */\n        !semver.satisfies(node.version, arg.version)) {\n          foundNodes.push(node);\n          return true;\n        }\n      });\n      return argFound;\n    }); // remote nodes from the loaded tree in order\n    // to avoid dropping them later when reifying\n\n    for (const node of foundNodes) {\n      node.parent = null;\n    }\n\n    return missing;\n  }\n\n}\n\nmodule.exports = Link;","map":{"version":3,"names":["fs","require","util","readdir","promisify","resolve","Arborist","npa","rpj","semver","reifyFinish","ArboristWorkspaceCmd","Link","description","name","usage","params","completion","opts","dir","npm","globalDir","files","filter","f","test","exec","args","global","Object","assign","Error","code","a","prefix","length","linkInstall","linkPkg","globalTop","globalOpts","flatOptions","path","prune","globalArb","globals","loadActual","node","kid","isRoot","some","missing","missingArgsFromTree","reify","add","names","arg","push","type","fetchSpec","save","Boolean","config","find","get","localArb","map","l","replace","workspaces","workspaceNames","wsp","workspacePaths","paths","arb","tree","isLink","target","foundNodes","nodes","children","values","argFound","every","version","satisfies","parent","module","exports"],"sources":["/Users/chelsea/Documents/0_AllCoding/shoppingstories-v3/node_modules/npm/lib/commands/link.js"],"sourcesContent":["const fs = require('fs')\nconst util = require('util')\nconst readdir = util.promisify(fs.readdir)\nconst { resolve } = require('path')\n\nconst Arborist = require('@npmcli/arborist')\nconst npa = require('npm-package-arg')\nconst rpj = require('read-package-json-fast')\nconst semver = require('semver')\n\nconst reifyFinish = require('../utils/reify-finish.js')\n\nconst ArboristWorkspaceCmd = require('../arborist-cmd.js')\nclass Link extends ArboristWorkspaceCmd {\n  static description = 'Symlink a package folder'\n  static name = 'link'\n  static usage = [\n    '[<package-spec>]',\n  ]\n\n  static params = [\n    'save',\n    'save-exact',\n    'global',\n    'global-style',\n    'legacy-bundling',\n    'strict-peer-deps',\n    'package-lock',\n    'omit',\n    'ignore-scripts',\n    'audit',\n    'bin-links',\n    'fund',\n    'dry-run',\n    ...super.params,\n  ]\n\n  async completion (opts) {\n    const dir = this.npm.globalDir\n    const files = await readdir(dir)\n    return files.filter(f => !/^[._-]/.test(f))\n  }\n\n  async exec (args) {\n    if (this.npm.global) {\n      throw Object.assign(\n        new Error(\n          'link should never be --global.\\n' +\n          'Please re-run this command with --local'\n        ),\n        { code: 'ELINKGLOBAL' }\n      )\n    }\n\n    // link with no args: symlink the folder to the global location\n    // link with package arg: symlink the global to the local\n    args = args.filter(a => resolve(a) !== this.npm.prefix)\n    return args.length\n      ? this.linkInstall(args)\n      : this.linkPkg()\n  }\n\n  async linkInstall (args) {\n    // load current packages from the global space,\n    // and then add symlinks installs locally\n    const globalTop = resolve(this.npm.globalDir, '..')\n    const globalOpts = {\n      ...this.npm.flatOptions,\n      path: globalTop,\n      global: true,\n      prune: false,\n    }\n    const globalArb = new Arborist(globalOpts)\n\n    // get only current top-level packages from the global space\n    const globals = await globalArb.loadActual({\n      filter: (node, kid) =>\n        !node.isRoot || args.some(a => npa(a).name === kid),\n    })\n\n    // any extra arg that is missing from the current\n    // global space should be reified there first\n    const missing = this.missingArgsFromTree(globals, args)\n    if (missing.length) {\n      await globalArb.reify({\n        ...globalOpts,\n        add: missing,\n      })\n    }\n\n    // get a list of module names that should be linked in the local prefix\n    const names = []\n    for (const a of args) {\n      const arg = npa(a)\n      names.push(\n        arg.type === 'directory'\n          ? (await rpj(resolve(arg.fetchSpec, 'package.json'))).name\n          : arg.name\n      )\n    }\n\n    // npm link should not save=true by default unless you're\n    // using any of --save-dev or other types\n    const save =\n      Boolean(\n        this.npm.config.find('save') !== 'default' ||\n        this.npm.config.get('save-optional') ||\n        this.npm.config.get('save-peer') ||\n        this.npm.config.get('save-dev') ||\n        this.npm.config.get('save-prod')\n      )\n\n    // create a new arborist instance for the local prefix and\n    // reify all the pending names as symlinks there\n    const localArb = new Arborist({\n      ...this.npm.flatOptions,\n      prune: false,\n      path: this.npm.prefix,\n      save,\n    })\n    await localArb.reify({\n      ...this.npm.flatOptions,\n      prune: false,\n      path: this.npm.prefix,\n      add: names.map(l => `file:${resolve(globalTop, 'node_modules', l).replace(/#/g, '%23')}`),\n      save,\n      workspaces: this.workspaceNames,\n    })\n\n    await reifyFinish(this.npm, localArb)\n  }\n\n  async linkPkg () {\n    const wsp = this.workspacePaths\n    const paths = wsp && wsp.length ? wsp : [this.npm.prefix]\n    const add = paths.map(path => `file:${path.replace(/#/g, '%23')}`)\n    const globalTop = resolve(this.npm.globalDir, '..')\n    const arb = new Arborist({\n      ...this.npm.flatOptions,\n      path: globalTop,\n      global: true,\n    })\n    await arb.reify({\n      add,\n    })\n    await reifyFinish(this.npm, arb)\n  }\n\n  // Returns a list of items that can't be fulfilled by\n  // things found in the current arborist inventory\n  missingArgsFromTree (tree, args) {\n    if (tree.isLink) {\n      return this.missingArgsFromTree(tree.target, args)\n    }\n\n    const foundNodes = []\n    const missing = args.filter(a => {\n      const arg = npa(a)\n      const nodes = tree.children.values()\n      const argFound = [...nodes].every(node => {\n        // TODO: write tests for unmatching version specs, this is hard to test\n        // atm but should be simple once we have a mocked registry again\n        if (arg.name !== node.name /* istanbul ignore next */ || (\n          arg.version &&\n          /* istanbul ignore next */\n          !semver.satisfies(node.version, arg.version)\n        )) {\n          foundNodes.push(node)\n          return true\n        }\n      })\n      return argFound\n    })\n\n    // remote nodes from the loaded tree in order\n    // to avoid dropping them later when reifying\n    for (const node of foundNodes) {\n      node.parent = null\n    }\n\n    return missing\n  }\n}\nmodule.exports = Link\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}