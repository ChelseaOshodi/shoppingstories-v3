{"ast":null,"code":"const PackageJson = require('@npmcli/package-json');\n\nconst BaseCommand = require('../base-command.js');\n\nconst Queryable = require('../utils/queryable.js');\n\nclass Pkg extends BaseCommand {\n  static description = 'Manages your package.json';\n  static name = 'pkg';\n  static usage = ['set <key>=<value> [<key>=<value> ...]', 'get [<key> [<key> ...]]', 'delete <key> [<key> ...]', 'set [<array>[<index>].<key>=<value> ...]', 'set [<array>[].<key>=<value> ...]'];\n  static params = ['force', 'json', 'workspace', 'workspaces'];\n  static ignoreImplicitWorkspace = false;\n\n  async exec(args) {\n    let {\n      prefix\n    } = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n    if (!prefix) {\n      this.prefix = this.npm.localPrefix;\n    } else {\n      this.prefix = prefix;\n    }\n\n    if (this.npm.global) {\n      throw Object.assign(new Error(`There's no package.json file to manage on global mode`), {\n        code: 'EPKGGLOBAL'\n      });\n    }\n\n    const [cmd, ..._args] = args;\n\n    switch (cmd) {\n      case 'get':\n        return this.get(_args);\n\n      case 'set':\n        return this.set(_args);\n\n      case 'delete':\n        return this.delete(_args);\n\n      default:\n        throw this.usageError();\n    }\n  }\n\n  async execWorkspaces(args, filters) {\n    await this.setWorkspaces(filters);\n    const result = {};\n\n    for (const [workspaceName, workspacePath] of this.workspaces.entries()) {\n      this.prefix = workspacePath;\n      result[workspaceName] = await this.exec(args, {\n        prefix: workspacePath\n      });\n    } // when running in workspaces names, make sure to key by workspace\n    // name the results of each value retrieved in each ws\n\n\n    this.npm.output(JSON.stringify(result, null, 2));\n  }\n\n  async get(args) {\n    const pkgJson = await PackageJson.load(this.prefix);\n    const {\n      content\n    } = pkgJson;\n    let result = !args.length && content;\n\n    if (!result) {\n      const q = new Queryable(content);\n      result = q.query(args); // in case there's only a single result from the query\n      // just prints that one element to stdout\n\n      if (Object.keys(result).length === 1) {\n        result = result[args];\n      }\n    } // only outputs if not running with workspaces config,\n    // in case you're retrieving info for workspaces the pkgWorkspaces\n    // will handle the output to make sure it get keyed by ws name\n\n\n    if (!this.workspaces) {\n      this.npm.output(JSON.stringify(result, null, 2));\n    }\n\n    return result;\n  }\n\n  async set(args) {\n    const setError = () => this.usageError('npm pkg set expects a key=value pair of args.');\n\n    if (!args.length) {\n      throw setError();\n    }\n\n    const force = this.npm.config.get('force');\n    const json = this.npm.config.get('json');\n    const pkgJson = await PackageJson.load(this.prefix);\n    const q = new Queryable(pkgJson.content);\n\n    for (const arg of args) {\n      const [key, ...rest] = arg.split('=');\n      const value = rest.join('=');\n\n      if (!key || !value) {\n        throw setError();\n      }\n\n      q.set(key, json ? JSON.parse(value) : value, {\n        force\n      });\n    }\n\n    pkgJson.update(q.toJSON());\n    await pkgJson.save();\n  }\n\n  async delete(args) {\n    const setError = () => this.usageError('npm pkg delete expects key args.');\n\n    if (!args.length) {\n      throw setError();\n    }\n\n    const pkgJson = await PackageJson.load(this.prefix);\n    const q = new Queryable(pkgJson.content);\n\n    for (const key of args) {\n      if (!key) {\n        throw setError();\n      }\n\n      q.delete(key);\n    }\n\n    pkgJson.update(q.toJSON());\n    await pkgJson.save();\n  }\n\n}\n\nmodule.exports = Pkg;","map":{"version":3,"names":["PackageJson","require","BaseCommand","Queryable","Pkg","description","name","usage","params","ignoreImplicitWorkspace","exec","args","prefix","npm","localPrefix","global","Object","assign","Error","code","cmd","_args","get","set","delete","usageError","execWorkspaces","filters","setWorkspaces","result","workspaceName","workspacePath","workspaces","entries","output","JSON","stringify","pkgJson","load","content","length","q","query","keys","setError","force","config","json","arg","key","rest","split","value","join","parse","update","toJSON","save","module","exports"],"sources":["/Users/chelsea/Documents/0_AllCoding/shoppingstories-v3/node_modules/npm/lib/commands/pkg.js"],"sourcesContent":["const PackageJson = require('@npmcli/package-json')\nconst BaseCommand = require('../base-command.js')\nconst Queryable = require('../utils/queryable.js')\n\nclass Pkg extends BaseCommand {\n  static description = 'Manages your package.json'\n  static name = 'pkg'\n  static usage = [\n    'set <key>=<value> [<key>=<value> ...]',\n    'get [<key> [<key> ...]]',\n    'delete <key> [<key> ...]',\n    'set [<array>[<index>].<key>=<value> ...]',\n    'set [<array>[].<key>=<value> ...]',\n  ]\n\n  static params = [\n    'force',\n    'json',\n    'workspace',\n    'workspaces',\n  ]\n\n  static ignoreImplicitWorkspace = false\n\n  async exec (args, { prefix } = {}) {\n    if (!prefix) {\n      this.prefix = this.npm.localPrefix\n    } else {\n      this.prefix = prefix\n    }\n\n    if (this.npm.global) {\n      throw Object.assign(\n        new Error(`There's no package.json file to manage on global mode`),\n        { code: 'EPKGGLOBAL' }\n      )\n    }\n\n    const [cmd, ..._args] = args\n    switch (cmd) {\n      case 'get':\n        return this.get(_args)\n      case 'set':\n        return this.set(_args)\n      case 'delete':\n        return this.delete(_args)\n      default:\n        throw this.usageError()\n    }\n  }\n\n  async execWorkspaces (args, filters) {\n    await this.setWorkspaces(filters)\n    const result = {}\n    for (const [workspaceName, workspacePath] of this.workspaces.entries()) {\n      this.prefix = workspacePath\n      result[workspaceName] = await this.exec(args, { prefix: workspacePath })\n    }\n    // when running in workspaces names, make sure to key by workspace\n    // name the results of each value retrieved in each ws\n    this.npm.output(JSON.stringify(result, null, 2))\n  }\n\n  async get (args) {\n    const pkgJson = await PackageJson.load(this.prefix)\n\n    const { content } = pkgJson\n    let result = !args.length && content\n\n    if (!result) {\n      const q = new Queryable(content)\n      result = q.query(args)\n\n      // in case there's only a single result from the query\n      // just prints that one element to stdout\n      if (Object.keys(result).length === 1) {\n        result = result[args]\n      }\n    }\n\n    // only outputs if not running with workspaces config,\n    // in case you're retrieving info for workspaces the pkgWorkspaces\n    // will handle the output to make sure it get keyed by ws name\n    if (!this.workspaces) {\n      this.npm.output(JSON.stringify(result, null, 2))\n    }\n\n    return result\n  }\n\n  async set (args) {\n    const setError = () =>\n      this.usageError('npm pkg set expects a key=value pair of args.')\n\n    if (!args.length) {\n      throw setError()\n    }\n\n    const force = this.npm.config.get('force')\n    const json = this.npm.config.get('json')\n    const pkgJson = await PackageJson.load(this.prefix)\n    const q = new Queryable(pkgJson.content)\n    for (const arg of args) {\n      const [key, ...rest] = arg.split('=')\n      const value = rest.join('=')\n      if (!key || !value) {\n        throw setError()\n      }\n\n      q.set(key, json ? JSON.parse(value) : value, { force })\n    }\n\n    pkgJson.update(q.toJSON())\n    await pkgJson.save()\n  }\n\n  async delete (args) {\n    const setError = () =>\n      this.usageError('npm pkg delete expects key args.')\n\n    if (!args.length) {\n      throw setError()\n    }\n\n    const pkgJson = await PackageJson.load(this.prefix)\n    const q = new Queryable(pkgJson.content)\n    for (const key of args) {\n      if (!key) {\n        throw setError()\n      }\n\n      q.delete(key)\n    }\n\n    pkgJson.update(q.toJSON())\n    await pkgJson.save()\n  }\n}\n\nmodule.exports = Pkg\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}