{"ast":null,"code":"const npa = require('npm-package-arg'); // extracted from npm v6 lib/install/realize-shrinkwrap-specifier.js\n\n\nconst specFromLock = (name, lock, where) => {\n  try {\n    if (lock.version) {\n      const spec = npa.resolve(name, lock.version, where);\n\n      if (lock.integrity || spec.type === 'git') {\n        return spec;\n      }\n    }\n\n    if (lock.from) {\n      // legacy metadata includes \"from\", but not integrity\n      const spec = npa.resolve(name, lock.from, where);\n\n      if (spec.registry && lock.version) {\n        return npa.resolve(name, lock.version, where);\n      } else if (!lock.resolved) {\n        return spec;\n      }\n    }\n\n    if (lock.resolved) {\n      return npa.resolve(name, lock.resolved, where);\n    }\n  } catch (_) {}\n\n  try {\n    return npa.resolve(name, lock.version, where);\n  } catch (_) {\n    return {};\n  }\n};\n\nmodule.exports = specFromLock;","map":{"version":3,"names":["npa","require","specFromLock","name","lock","where","version","spec","resolve","integrity","type","from","registry","resolved","_","module","exports"],"sources":["/Users/chelsea/Documents/0_AllCoding/shoppingstories-v3/node_modules/npm/node_modules/@npmcli/arborist/lib/spec-from-lock.js"],"sourcesContent":["const npa = require('npm-package-arg')\n\n// extracted from npm v6 lib/install/realize-shrinkwrap-specifier.js\nconst specFromLock = (name, lock, where) => {\n  try {\n    if (lock.version) {\n      const spec = npa.resolve(name, lock.version, where)\n      if (lock.integrity || spec.type === 'git') {\n        return spec\n      }\n    }\n    if (lock.from) {\n      // legacy metadata includes \"from\", but not integrity\n      const spec = npa.resolve(name, lock.from, where)\n      if (spec.registry && lock.version) {\n        return npa.resolve(name, lock.version, where)\n      } else if (!lock.resolved) {\n        return spec\n      }\n    }\n    if (lock.resolved) {\n      return npa.resolve(name, lock.resolved, where)\n    }\n  } catch (_) { }\n  try {\n    return npa.resolve(name, lock.version, where)\n  } catch (_) {\n    return {}\n  }\n}\n\nmodule.exports = specFromLock\n"],"mappings":"AAAA,MAAMA,GAAG,GAAGC,OAAO,CAAC,iBAAD,CAAnB,C,CAEA;;;AACA,MAAMC,YAAY,GAAG,CAACC,IAAD,EAAOC,IAAP,EAAaC,KAAb,KAAuB;EAC1C,IAAI;IACF,IAAID,IAAI,CAACE,OAAT,EAAkB;MAChB,MAAMC,IAAI,GAAGP,GAAG,CAACQ,OAAJ,CAAYL,IAAZ,EAAkBC,IAAI,CAACE,OAAvB,EAAgCD,KAAhC,CAAb;;MACA,IAAID,IAAI,CAACK,SAAL,IAAkBF,IAAI,CAACG,IAAL,KAAc,KAApC,EAA2C;QACzC,OAAOH,IAAP;MACD;IACF;;IACD,IAAIH,IAAI,CAACO,IAAT,EAAe;MACb;MACA,MAAMJ,IAAI,GAAGP,GAAG,CAACQ,OAAJ,CAAYL,IAAZ,EAAkBC,IAAI,CAACO,IAAvB,EAA6BN,KAA7B,CAAb;;MACA,IAAIE,IAAI,CAACK,QAAL,IAAiBR,IAAI,CAACE,OAA1B,EAAmC;QACjC,OAAON,GAAG,CAACQ,OAAJ,CAAYL,IAAZ,EAAkBC,IAAI,CAACE,OAAvB,EAAgCD,KAAhC,CAAP;MACD,CAFD,MAEO,IAAI,CAACD,IAAI,CAACS,QAAV,EAAoB;QACzB,OAAON,IAAP;MACD;IACF;;IACD,IAAIH,IAAI,CAACS,QAAT,EAAmB;MACjB,OAAOb,GAAG,CAACQ,OAAJ,CAAYL,IAAZ,EAAkBC,IAAI,CAACS,QAAvB,EAAiCR,KAAjC,CAAP;IACD;EACF,CAnBD,CAmBE,OAAOS,CAAP,EAAU,CAAG;;EACf,IAAI;IACF,OAAOd,GAAG,CAACQ,OAAJ,CAAYL,IAAZ,EAAkBC,IAAI,CAACE,OAAvB,EAAgCD,KAAhC,CAAP;EACD,CAFD,CAEE,OAAOS,CAAP,EAAU;IACV,OAAO,EAAP;EACD;AACF,CA1BD;;AA4BAC,MAAM,CAACC,OAAP,GAAiBd,YAAjB"},"metadata":{},"sourceType":"script"}