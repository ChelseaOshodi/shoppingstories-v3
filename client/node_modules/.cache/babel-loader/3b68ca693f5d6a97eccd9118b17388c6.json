{"ast":null,"code":"const util = require('util');\n\nconst log = require('../utils/log-shim.js');\n\nconst semver = require('semver');\n\nconst pack = require('libnpmpack');\n\nconst libpub = require('libnpmpublish').publish;\n\nconst runScript = require('@npmcli/run-script');\n\nconst pacote = require('pacote');\n\nconst npa = require('npm-package-arg');\n\nconst npmFetch = require('npm-registry-fetch');\n\nconst replaceInfo = require('../utils/replace-info.js');\n\nconst otplease = require('../utils/otplease.js');\n\nconst {\n  getContents,\n  logTar\n} = require('../utils/tar.js'); // for historical reasons, publishConfig in package.json can contain ANY config\n// keys that npm supports in .npmrc files and elsewhere.  We *may* want to\n// revisit this at some point, and have a minimal set that's a SemVer-major\n// change that ought to get a RFC written on it.\n\n\nconst flatten = require('../utils/config/flatten.js'); // this is the only case in the CLI where we want to use the old full slow\n// 'read-package-json' module, because we want to pull in all the defaults and\n// metadata, like git sha's and default scripts and all that.\n\n\nconst readJson = util.promisify(require('read-package-json'));\n\nconst BaseCommand = require('../base-command.js');\n\nclass Publish extends BaseCommand {\n  static description = 'Publish a package';\n  static name = 'publish';\n  static params = ['tag', 'access', 'dry-run', 'otp', 'workspace', 'workspaces', 'include-workspace-root'];\n  static usage = ['<package-spec>'];\n  static ignoreImplicitWorkspace = false;\n\n  async exec(args) {\n    if (args.length === 0) {\n      args = ['.'];\n    }\n\n    if (args.length !== 1) {\n      throw this.usageError();\n    }\n\n    log.verbose('publish', replaceInfo(args));\n    const unicode = this.npm.config.get('unicode');\n    const dryRun = this.npm.config.get('dry-run');\n    const json = this.npm.config.get('json');\n    const defaultTag = this.npm.config.get('tag');\n    const ignoreScripts = this.npm.config.get('ignore-scripts');\n    const {\n      silent\n    } = this.npm;\n\n    if (semver.validRange(defaultTag)) {\n      throw new Error('Tag name must not be a valid SemVer range: ' + defaultTag.trim());\n    }\n\n    const opts = { ...this.npm.flatOptions,\n      progress: false\n    };\n    log.disableProgress(); // you can publish name@version, ./foo.tgz, etc.\n    // even though the default is the 'file:.' cwd.\n\n    const spec = npa(args[0]);\n    let manifest = await this.getManifest(spec, opts); // only run scripts for directory type publishes\n\n    if (spec.type === 'directory' && !ignoreScripts) {\n      await runScript({\n        event: 'prepublishOnly',\n        path: spec.fetchSpec,\n        stdio: 'inherit',\n        pkg: manifest,\n        banner: !silent\n      });\n    } // we pass dryRun: true to libnpmpack so it doesn't write the file to disk\n\n\n    const tarballData = await pack(spec, { ...opts,\n      dryRun: true,\n      prefix: this.npm.localPrefix,\n      workspaces: this.workspacePaths\n    });\n    const pkgContents = await getContents(manifest, tarballData); // The purpose of re-reading the manifest is in case it changed,\n    // so that we send the latest and greatest thing to the registry\n    // note that publishConfig might have changed as well!\n\n    manifest = await this.getManifest(spec, opts); // JSON already has the package contents\n\n    if (!json) {\n      logTar(pkgContents, {\n        unicode\n      });\n    }\n\n    const resolved = npa.resolve(manifest.name, manifest.version);\n    const registry = npmFetch.pickRegistry(resolved, opts);\n    const creds = this.npm.config.getCredentialsByURI(registry);\n    const noCreds = !(creds.token || creds.username || creds.certfile && creds.keyfile);\n    const outputRegistry = replaceInfo(registry);\n\n    if (noCreds) {\n      const msg = `This command requires you to be logged in to ${outputRegistry}`;\n\n      if (dryRun) {\n        log.warn('', `${msg} (dry-run)`);\n      } else {\n        throw Object.assign(new Error(msg), {\n          code: 'ENEEDAUTH'\n        });\n      }\n    }\n\n    log.notice('', `Publishing to ${outputRegistry}${dryRun ? ' (dry-run)' : ''}`);\n\n    if (!dryRun) {\n      await otplease(this.npm, opts, opts => libpub(manifest, tarballData, opts));\n    }\n\n    if (spec.type === 'directory' && !ignoreScripts) {\n      await runScript({\n        event: 'publish',\n        path: spec.fetchSpec,\n        stdio: 'inherit',\n        pkg: manifest,\n        banner: !silent\n      });\n      await runScript({\n        event: 'postpublish',\n        path: spec.fetchSpec,\n        stdio: 'inherit',\n        pkg: manifest,\n        banner: !silent\n      });\n    }\n\n    if (!this.suppressOutput) {\n      if (!silent && json) {\n        this.npm.output(JSON.stringify(pkgContents, null, 2));\n      } else if (!silent) {\n        this.npm.output(`+ ${pkgContents.id}`);\n      }\n    }\n\n    return pkgContents;\n  }\n\n  async execWorkspaces(args, filters) {\n    // Suppresses JSON output in publish() so we can handle it here\n    this.suppressOutput = true;\n    const results = {};\n    const json = this.npm.config.get('json');\n    const {\n      silent\n    } = this.npm;\n    await this.setWorkspaces(filters);\n\n    for (const [name, workspace] of this.workspaces.entries()) {\n      let pkgContents;\n\n      try {\n        pkgContents = await this.exec([workspace]);\n      } catch (err) {\n        if (err.code === 'EPRIVATE') {\n          log.warn('publish', `Skipping workspace ${this.npm.chalk.green(name)}, marked as ${this.npm.chalk.bold('private')}`);\n          continue;\n        }\n\n        throw err;\n      } // This needs to be in-line w/ the rest of the output that non-JSON\n      // publish generates\n\n\n      if (!silent && !json) {\n        this.npm.output(`+ ${pkgContents.id}`);\n      } else {\n        results[name] = pkgContents;\n      }\n    }\n\n    if (!silent && json) {\n      this.npm.output(JSON.stringify(results, null, 2));\n    }\n  } // if it's a directory, read it from the file system\n  // otherwise, get the full metadata from whatever it is\n  // XXX can't pacote read the manifest from a directory?\n\n\n  async getManifest(spec, opts) {\n    let manifest;\n\n    if (spec.type === 'directory') {\n      manifest = await readJson(`${spec.fetchSpec}/package.json`);\n    } else {\n      manifest = await pacote.manifest(spec, { ...opts,\n        fullmetadata: true,\n        fullReadJson: true\n      });\n    }\n\n    if (manifest.publishConfig) {\n      flatten(manifest.publishConfig, opts);\n    }\n\n    return manifest;\n  }\n\n}\n\nmodule.exports = Publish;","map":{"version":3,"names":["util","require","log","semver","pack","libpub","publish","runScript","pacote","npa","npmFetch","replaceInfo","otplease","getContents","logTar","flatten","readJson","promisify","BaseCommand","Publish","description","name","params","usage","ignoreImplicitWorkspace","exec","args","length","usageError","verbose","unicode","npm","config","get","dryRun","json","defaultTag","ignoreScripts","silent","validRange","Error","trim","opts","flatOptions","progress","disableProgress","spec","manifest","getManifest","type","event","path","fetchSpec","stdio","pkg","banner","tarballData","prefix","localPrefix","workspaces","workspacePaths","pkgContents","resolved","resolve","version","registry","pickRegistry","creds","getCredentialsByURI","noCreds","token","username","certfile","keyfile","outputRegistry","msg","warn","Object","assign","code","notice","suppressOutput","output","JSON","stringify","id","execWorkspaces","filters","results","setWorkspaces","workspace","entries","err","chalk","green","bold","fullmetadata","fullReadJson","publishConfig","module","exports"],"sources":["/Users/chelsea/Documents/0_AllCoding/shoppingstories-v3/node_modules/npm/lib/commands/publish.js"],"sourcesContent":["const util = require('util')\nconst log = require('../utils/log-shim.js')\nconst semver = require('semver')\nconst pack = require('libnpmpack')\nconst libpub = require('libnpmpublish').publish\nconst runScript = require('@npmcli/run-script')\nconst pacote = require('pacote')\nconst npa = require('npm-package-arg')\nconst npmFetch = require('npm-registry-fetch')\nconst replaceInfo = require('../utils/replace-info.js')\n\nconst otplease = require('../utils/otplease.js')\nconst { getContents, logTar } = require('../utils/tar.js')\n\n// for historical reasons, publishConfig in package.json can contain ANY config\n// keys that npm supports in .npmrc files and elsewhere.  We *may* want to\n// revisit this at some point, and have a minimal set that's a SemVer-major\n// change that ought to get a RFC written on it.\nconst flatten = require('../utils/config/flatten.js')\n\n// this is the only case in the CLI where we want to use the old full slow\n// 'read-package-json' module, because we want to pull in all the defaults and\n// metadata, like git sha's and default scripts and all that.\nconst readJson = util.promisify(require('read-package-json'))\n\nconst BaseCommand = require('../base-command.js')\nclass Publish extends BaseCommand {\n  static description = 'Publish a package'\n  static name = 'publish'\n  static params = [\n    'tag',\n    'access',\n    'dry-run',\n    'otp',\n    'workspace',\n    'workspaces',\n    'include-workspace-root',\n  ]\n\n  static usage = ['<package-spec>']\n  static ignoreImplicitWorkspace = false\n\n  async exec (args) {\n    if (args.length === 0) {\n      args = ['.']\n    }\n    if (args.length !== 1) {\n      throw this.usageError()\n    }\n\n    log.verbose('publish', replaceInfo(args))\n\n    const unicode = this.npm.config.get('unicode')\n    const dryRun = this.npm.config.get('dry-run')\n    const json = this.npm.config.get('json')\n    const defaultTag = this.npm.config.get('tag')\n    const ignoreScripts = this.npm.config.get('ignore-scripts')\n    const { silent } = this.npm\n\n    if (semver.validRange(defaultTag)) {\n      throw new Error('Tag name must not be a valid SemVer range: ' + defaultTag.trim())\n    }\n\n    const opts = { ...this.npm.flatOptions, progress: false }\n    log.disableProgress()\n\n    // you can publish name@version, ./foo.tgz, etc.\n    // even though the default is the 'file:.' cwd.\n    const spec = npa(args[0])\n    let manifest = await this.getManifest(spec, opts)\n\n    // only run scripts for directory type publishes\n    if (spec.type === 'directory' && !ignoreScripts) {\n      await runScript({\n        event: 'prepublishOnly',\n        path: spec.fetchSpec,\n        stdio: 'inherit',\n        pkg: manifest,\n        banner: !silent,\n      })\n    }\n\n    // we pass dryRun: true to libnpmpack so it doesn't write the file to disk\n    const tarballData = await pack(spec, {\n      ...opts,\n      dryRun: true,\n      prefix: this.npm.localPrefix,\n      workspaces: this.workspacePaths,\n    })\n    const pkgContents = await getContents(manifest, tarballData)\n\n    // The purpose of re-reading the manifest is in case it changed,\n    // so that we send the latest and greatest thing to the registry\n    // note that publishConfig might have changed as well!\n    manifest = await this.getManifest(spec, opts)\n\n    // JSON already has the package contents\n    if (!json) {\n      logTar(pkgContents, { unicode })\n    }\n\n    const resolved = npa.resolve(manifest.name, manifest.version)\n    const registry = npmFetch.pickRegistry(resolved, opts)\n    const creds = this.npm.config.getCredentialsByURI(registry)\n    const noCreds = !(creds.token || creds.username || creds.certfile && creds.keyfile)\n    const outputRegistry = replaceInfo(registry)\n\n    if (noCreds) {\n      const msg = `This command requires you to be logged in to ${outputRegistry}`\n      if (dryRun) {\n        log.warn('', `${msg} (dry-run)`)\n      } else {\n        throw Object.assign(new Error(msg), { code: 'ENEEDAUTH' })\n      }\n    }\n\n    log.notice('', `Publishing to ${outputRegistry}${dryRun ? ' (dry-run)' : ''}`)\n\n    if (!dryRun) {\n      await otplease(this.npm, opts, opts => libpub(manifest, tarballData, opts))\n    }\n\n    if (spec.type === 'directory' && !ignoreScripts) {\n      await runScript({\n        event: 'publish',\n        path: spec.fetchSpec,\n        stdio: 'inherit',\n        pkg: manifest,\n        banner: !silent,\n      })\n\n      await runScript({\n        event: 'postpublish',\n        path: spec.fetchSpec,\n        stdio: 'inherit',\n        pkg: manifest,\n        banner: !silent,\n      })\n    }\n\n    if (!this.suppressOutput) {\n      if (!silent && json) {\n        this.npm.output(JSON.stringify(pkgContents, null, 2))\n      } else if (!silent) {\n        this.npm.output(`+ ${pkgContents.id}`)\n      }\n    }\n\n    return pkgContents\n  }\n\n  async execWorkspaces (args, filters) {\n    // Suppresses JSON output in publish() so we can handle it here\n    this.suppressOutput = true\n\n    const results = {}\n    const json = this.npm.config.get('json')\n    const { silent } = this.npm\n    await this.setWorkspaces(filters)\n\n    for (const [name, workspace] of this.workspaces.entries()) {\n      let pkgContents\n      try {\n        pkgContents = await this.exec([workspace])\n      } catch (err) {\n        if (err.code === 'EPRIVATE') {\n          log.warn(\n            'publish',\n            `Skipping workspace ${\n              this.npm.chalk.green(name)\n            }, marked as ${\n              this.npm.chalk.bold('private')\n            }`\n          )\n          continue\n        }\n        throw err\n      }\n      // This needs to be in-line w/ the rest of the output that non-JSON\n      // publish generates\n      if (!silent && !json) {\n        this.npm.output(`+ ${pkgContents.id}`)\n      } else {\n        results[name] = pkgContents\n      }\n    }\n\n    if (!silent && json) {\n      this.npm.output(JSON.stringify(results, null, 2))\n    }\n  }\n\n  // if it's a directory, read it from the file system\n  // otherwise, get the full metadata from whatever it is\n  // XXX can't pacote read the manifest from a directory?\n  async getManifest (spec, opts) {\n    let manifest\n    if (spec.type === 'directory') {\n      manifest = await readJson(`${spec.fetchSpec}/package.json`)\n    } else {\n      manifest = await pacote.manifest(spec, {\n        ...opts,\n        fullmetadata: true,\n        fullReadJson: true,\n      })\n    }\n    if (manifest.publishConfig) {\n      flatten(manifest.publishConfig, opts)\n    }\n    return manifest\n  }\n}\nmodule.exports = Publish\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}