{"ast":null,"code":"const os = require('os');\n\nconst path = require('path');\n\nconst pacote = require('pacote');\n\nconst table = require('text-table');\n\nconst chalk = require('chalk');\n\nconst npa = require('npm-package-arg');\n\nconst pickManifest = require('npm-pick-manifest');\n\nconst localeCompare = require('@isaacs/string-locale-compare')('en');\n\nconst Arborist = require('@npmcli/arborist');\n\nconst ansiTrim = require('../utils/ansi-trim.js');\n\nconst ArboristWorkspaceCmd = require('../arborist-cmd.js');\n\nclass Outdated extends ArboristWorkspaceCmd {\n  static description = 'Check for outdated packages';\n  static name = 'outdated';\n  static usage = ['[<package-spec> ...]'];\n  static params = ['all', 'json', 'long', 'parseable', 'global', 'workspace'];\n\n  async exec(args) {\n    const global = path.resolve(this.npm.globalDir, '..');\n    const where = this.npm.global ? global : this.npm.prefix;\n    const arb = new Arborist({ ...this.npm.flatOptions,\n      path: where\n    });\n    this.edges = new Set();\n    this.list = [];\n    this.tree = await arb.loadActual();\n\n    if (this.workspaceNames && this.workspaceNames.length) {\n      this.filterSet = arb.workspaceDependencySet(this.tree, this.workspaceNames, this.npm.flatOptions.includeWorkspaceRoot);\n    } else if (!this.npm.flatOptions.workspacesEnabled) {\n      this.filterSet = arb.excludeWorkspacesDependencySet(this.tree);\n    }\n\n    if (args.length !== 0) {\n      // specific deps\n      for (let i = 0; i < args.length; i++) {\n        const nodes = this.tree.inventory.query('name', args[i]);\n        this.getEdges(nodes, 'edgesIn');\n      }\n    } else {\n      if (this.npm.config.get('all')) {\n        // all deps in tree\n        const nodes = this.tree.inventory.values();\n        this.getEdges(nodes, 'edgesOut');\n      } // top-level deps\n\n\n      this.getEdges();\n    }\n\n    await Promise.all(Array.from(this.edges).map(edge => {\n      return this.getOutdatedInfo(edge);\n    })); // sorts list alphabetically\n\n    const outdated = this.list.sort((a, b) => localeCompare(a.name, b.name));\n\n    if (outdated.length > 0) {\n      process.exitCode = 1;\n    } // return if no outdated packages\n\n\n    if (outdated.length === 0 && !this.npm.config.get('json')) {\n      return;\n    } // display results\n\n\n    if (this.npm.config.get('json')) {\n      this.npm.output(this.makeJSON(outdated));\n    } else if (this.npm.config.get('parseable')) {\n      this.npm.output(this.makeParseable(outdated));\n    } else {\n      const outList = outdated.map(x => this.makePretty(x));\n      const outHead = ['Package', 'Current', 'Wanted', 'Latest', 'Location', 'Depended by'];\n\n      if (this.npm.config.get('long')) {\n        outHead.push('Package Type', 'Homepage');\n      }\n\n      const outTable = [outHead].concat(outList);\n\n      if (this.npm.color) {\n        outTable[0] = outTable[0].map(heading => chalk.underline(heading));\n      }\n\n      const tableOpts = {\n        align: ['l', 'r', 'r', 'r', 'l'],\n        stringLength: s => ansiTrim(s).length\n      };\n      this.npm.output(table(outTable, tableOpts));\n    }\n  }\n\n  getEdges(nodes, type) {\n    // when no nodes are provided then it should only read direct deps\n    // from the root node and its workspaces direct dependencies\n    if (!nodes) {\n      this.getEdgesOut(this.tree);\n      this.getWorkspacesEdges();\n      return;\n    }\n\n    for (const node of nodes) {\n      type === 'edgesOut' ? this.getEdgesOut(node) : this.getEdgesIn(node);\n    }\n  }\n\n  getEdgesIn(node) {\n    for (const edge of node.edgesIn) {\n      this.trackEdge(edge);\n    }\n  }\n\n  getEdgesOut(node) {\n    // TODO: normalize usage of edges and avoid looping through nodes here\n    if (this.npm.global) {\n      for (const child of node.children.values()) {\n        this.trackEdge(child);\n      }\n    } else {\n      for (const edge of node.edgesOut.values()) {\n        this.trackEdge(edge);\n      }\n    }\n  }\n\n  trackEdge(edge) {\n    const filteredOut = edge.from && this.filterSet && this.filterSet.size > 0 && !this.filterSet.has(edge.from.target);\n\n    if (filteredOut) {\n      return;\n    }\n\n    this.edges.add(edge);\n  }\n\n  getWorkspacesEdges(node) {\n    if (this.npm.global) {\n      return;\n    }\n\n    for (const edge of this.tree.edgesOut.values()) {\n      const workspace = edge && edge.to && edge.to.target && edge.to.target.isWorkspace;\n\n      if (workspace) {\n        this.getEdgesOut(edge.to.target);\n      }\n    }\n  }\n\n  async getPackument(spec) {\n    const packument = await pacote.packument(spec, { ...this.npm.flatOptions,\n      fullMetadata: this.npm.config.get('long'),\n      preferOnline: true\n    });\n    return packument;\n  }\n\n  async getOutdatedInfo(edge) {\n    let alias = false;\n\n    try {\n      alias = npa(edge.spec).subSpec;\n    } catch (err) {}\n\n    const spec = npa(alias ? alias.name : edge.name);\n    const node = edge.to || edge;\n    const {\n      path,\n      location\n    } = node;\n    const {\n      version: current\n    } = node.package || {};\n    const type = edge.optional ? 'optionalDependencies' : edge.peer ? 'peerDependencies' : edge.dev ? 'devDependencies' : 'dependencies';\n\n    for (const omitType of this.npm.flatOptions.omit) {\n      if (node[omitType]) {\n        return;\n      }\n    } // deps different from prod not currently\n    // on disk are not included in the output\n\n\n    if (edge.error === 'MISSING' && type !== 'dependencies') {\n      return;\n    }\n\n    try {\n      const packument = await this.getPackument(spec);\n      const expected = alias ? alias.fetchSpec : edge.spec; // if it's not a range, version, or tag, skip it\n\n      try {\n        if (!npa(`${edge.name}@${edge.spec}`).registry) {\n          return null;\n        }\n      } catch (err) {\n        return null;\n      }\n\n      const wanted = pickManifest(packument, expected, this.npm.flatOptions);\n      const latest = pickManifest(packument, '*', this.npm.flatOptions);\n\n      if (!current || current !== wanted.version || wanted.version !== latest.version) {\n        const dependent = edge.from ? this.maybeWorkspaceName(edge.from) : 'global';\n        this.list.push({\n          name: alias ? edge.spec.replace('npm', edge.name) : edge.name,\n          path,\n          type,\n          current,\n          location,\n          wanted: wanted.version,\n          latest: latest.version,\n          dependent,\n          homepage: packument.homepage\n        });\n      }\n    } catch (err) {\n      // silently catch and ignore ETARGET, E403 &\n      // E404 errors, deps are just skipped\n      if (!(err.code === 'ETARGET' || err.code === 'E403' || err.code === 'E404')) {\n        throw err;\n      }\n    }\n  }\n\n  maybeWorkspaceName(node) {\n    if (!node.isWorkspace) {\n      return node.name;\n    }\n\n    const humanOutput = !this.npm.config.get('json') && !this.npm.config.get('parseable');\n    const workspaceName = humanOutput ? node.pkgid : node.name;\n    return this.npm.color && humanOutput ? chalk.green(workspaceName) : workspaceName;\n  } // formatting functions\n\n\n  makePretty(dep) {\n    const {\n      current = 'MISSING',\n      location = '-',\n      homepage = '',\n      name,\n      wanted,\n      latest,\n      type,\n      dependent\n    } = dep;\n    const columns = [name, current, wanted, latest, location, dependent];\n\n    if (this.npm.config.get('long')) {\n      columns[6] = type;\n      columns[7] = homepage;\n    }\n\n    if (this.npm.color) {\n      columns[0] = chalk[current === wanted ? 'yellow' : 'red'](columns[0]); // current\n\n      columns[2] = chalk.green(columns[2]); // wanted\n\n      columns[3] = chalk.magenta(columns[3]); // latest\n    }\n\n    return columns;\n  } // --parseable creates output like this:\n  // <fullpath>:<name@wanted>:<name@installed>:<name@latest>:<dependedby>\n\n\n  makeParseable(list) {\n    return list.map(dep => {\n      const {\n        name,\n        current,\n        wanted,\n        latest,\n        path,\n        dependent,\n        type,\n        homepage\n      } = dep;\n      const out = [path, name + '@' + wanted, current ? name + '@' + current : 'MISSING', name + '@' + latest, dependent];\n\n      if (this.npm.config.get('long')) {\n        out.push(type, homepage);\n      }\n\n      return out.join(':');\n    }).join(os.EOL);\n  }\n\n  makeJSON(list) {\n    const out = {};\n    list.forEach(dep => {\n      const {\n        name,\n        current,\n        wanted,\n        latest,\n        path,\n        type,\n        dependent,\n        homepage\n      } = dep;\n      out[name] = {\n        current,\n        wanted,\n        latest,\n        dependent,\n        location: path\n      };\n\n      if (this.npm.config.get('long')) {\n        out[name].type = type;\n        out[name].homepage = homepage;\n      }\n    });\n    return JSON.stringify(out, null, 2);\n  }\n\n}\n\nmodule.exports = Outdated;","map":{"version":3,"names":["os","require","path","pacote","table","chalk","npa","pickManifest","localeCompare","Arborist","ansiTrim","ArboristWorkspaceCmd","Outdated","description","name","usage","params","exec","args","global","resolve","npm","globalDir","where","prefix","arb","flatOptions","edges","Set","list","tree","loadActual","workspaceNames","length","filterSet","workspaceDependencySet","includeWorkspaceRoot","workspacesEnabled","excludeWorkspacesDependencySet","i","nodes","inventory","query","getEdges","config","get","values","Promise","all","Array","from","map","edge","getOutdatedInfo","outdated","sort","a","b","process","exitCode","output","makeJSON","makeParseable","outList","x","makePretty","outHead","push","outTable","concat","color","heading","underline","tableOpts","align","stringLength","s","type","getEdgesOut","getWorkspacesEdges","node","getEdgesIn","edgesIn","trackEdge","child","children","edgesOut","filteredOut","size","has","target","add","workspace","to","isWorkspace","getPackument","spec","packument","fullMetadata","preferOnline","alias","subSpec","err","location","version","current","package","optional","peer","dev","omitType","omit","error","expected","fetchSpec","registry","wanted","latest","dependent","maybeWorkspaceName","replace","homepage","code","humanOutput","workspaceName","pkgid","green","dep","columns","magenta","out","join","EOL","forEach","JSON","stringify","module","exports"],"sources":["/Users/chelsea/Documents/0_AllCoding/shoppingstories-v3/node_modules/npm/lib/commands/outdated.js"],"sourcesContent":["const os = require('os')\nconst path = require('path')\nconst pacote = require('pacote')\nconst table = require('text-table')\nconst chalk = require('chalk')\nconst npa = require('npm-package-arg')\nconst pickManifest = require('npm-pick-manifest')\nconst localeCompare = require('@isaacs/string-locale-compare')('en')\n\nconst Arborist = require('@npmcli/arborist')\n\nconst ansiTrim = require('../utils/ansi-trim.js')\nconst ArboristWorkspaceCmd = require('../arborist-cmd.js')\n\nclass Outdated extends ArboristWorkspaceCmd {\n  static description = 'Check for outdated packages'\n  static name = 'outdated'\n  static usage = ['[<package-spec> ...]']\n  static params = [\n    'all',\n    'json',\n    'long',\n    'parseable',\n    'global',\n    'workspace',\n  ]\n\n  async exec (args) {\n    const global = path.resolve(this.npm.globalDir, '..')\n    const where = this.npm.global\n      ? global\n      : this.npm.prefix\n\n    const arb = new Arborist({\n      ...this.npm.flatOptions,\n      path: where,\n    })\n\n    this.edges = new Set()\n    this.list = []\n    this.tree = await arb.loadActual()\n\n    if (this.workspaceNames && this.workspaceNames.length) {\n      this.filterSet =\n        arb.workspaceDependencySet(\n          this.tree,\n          this.workspaceNames,\n          this.npm.flatOptions.includeWorkspaceRoot\n        )\n    } else if (!this.npm.flatOptions.workspacesEnabled) {\n      this.filterSet =\n        arb.excludeWorkspacesDependencySet(this.tree)\n    }\n\n    if (args.length !== 0) {\n      // specific deps\n      for (let i = 0; i < args.length; i++) {\n        const nodes = this.tree.inventory.query('name', args[i])\n        this.getEdges(nodes, 'edgesIn')\n      }\n    } else {\n      if (this.npm.config.get('all')) {\n        // all deps in tree\n        const nodes = this.tree.inventory.values()\n        this.getEdges(nodes, 'edgesOut')\n      }\n      // top-level deps\n      this.getEdges()\n    }\n\n    await Promise.all(Array.from(this.edges).map((edge) => {\n      return this.getOutdatedInfo(edge)\n    }))\n\n    // sorts list alphabetically\n    const outdated = this.list.sort((a, b) => localeCompare(a.name, b.name))\n\n    if (outdated.length > 0) {\n      process.exitCode = 1\n    }\n\n    // return if no outdated packages\n    if (outdated.length === 0 && !this.npm.config.get('json')) {\n      return\n    }\n\n    // display results\n    if (this.npm.config.get('json')) {\n      this.npm.output(this.makeJSON(outdated))\n    } else if (this.npm.config.get('parseable')) {\n      this.npm.output(this.makeParseable(outdated))\n    } else {\n      const outList = outdated.map(x => this.makePretty(x))\n      const outHead = ['Package',\n        'Current',\n        'Wanted',\n        'Latest',\n        'Location',\n        'Depended by',\n      ]\n\n      if (this.npm.config.get('long')) {\n        outHead.push('Package Type', 'Homepage')\n      }\n      const outTable = [outHead].concat(outList)\n\n      if (this.npm.color) {\n        outTable[0] = outTable[0].map(heading => chalk.underline(heading))\n      }\n\n      const tableOpts = {\n        align: ['l', 'r', 'r', 'r', 'l'],\n        stringLength: s => ansiTrim(s).length,\n      }\n      this.npm.output(table(outTable, tableOpts))\n    }\n  }\n\n  getEdges (nodes, type) {\n    // when no nodes are provided then it should only read direct deps\n    // from the root node and its workspaces direct dependencies\n    if (!nodes) {\n      this.getEdgesOut(this.tree)\n      this.getWorkspacesEdges()\n      return\n    }\n\n    for (const node of nodes) {\n      type === 'edgesOut'\n        ? this.getEdgesOut(node)\n        : this.getEdgesIn(node)\n    }\n  }\n\n  getEdgesIn (node) {\n    for (const edge of node.edgesIn) {\n      this.trackEdge(edge)\n    }\n  }\n\n  getEdgesOut (node) {\n    // TODO: normalize usage of edges and avoid looping through nodes here\n    if (this.npm.global) {\n      for (const child of node.children.values()) {\n        this.trackEdge(child)\n      }\n    } else {\n      for (const edge of node.edgesOut.values()) {\n        this.trackEdge(edge)\n      }\n    }\n  }\n\n  trackEdge (edge) {\n    const filteredOut =\n      edge.from\n        && this.filterSet\n        && this.filterSet.size > 0\n        && !this.filterSet.has(edge.from.target)\n\n    if (filteredOut) {\n      return\n    }\n\n    this.edges.add(edge)\n  }\n\n  getWorkspacesEdges (node) {\n    if (this.npm.global) {\n      return\n    }\n\n    for (const edge of this.tree.edgesOut.values()) {\n      const workspace = edge\n        && edge.to\n        && edge.to.target\n        && edge.to.target.isWorkspace\n\n      if (workspace) {\n        this.getEdgesOut(edge.to.target)\n      }\n    }\n  }\n\n  async getPackument (spec) {\n    const packument = await pacote.packument(spec, {\n      ...this.npm.flatOptions,\n      fullMetadata: this.npm.config.get('long'),\n      preferOnline: true,\n    })\n    return packument\n  }\n\n  async getOutdatedInfo (edge) {\n    let alias = false\n    try {\n      alias = npa(edge.spec).subSpec\n    } catch (err) {\n    }\n    const spec = npa(alias ? alias.name : edge.name)\n    const node = edge.to || edge\n    const { path, location } = node\n    const { version: current } = node.package || {}\n\n    const type = edge.optional ? 'optionalDependencies'\n      : edge.peer ? 'peerDependencies'\n      : edge.dev ? 'devDependencies'\n      : 'dependencies'\n\n    for (const omitType of this.npm.flatOptions.omit) {\n      if (node[omitType]) {\n        return\n      }\n    }\n\n    // deps different from prod not currently\n    // on disk are not included in the output\n    if (edge.error === 'MISSING' && type !== 'dependencies') {\n      return\n    }\n\n    try {\n      const packument = await this.getPackument(spec)\n      const expected = alias ? alias.fetchSpec : edge.spec\n      // if it's not a range, version, or tag, skip it\n      try {\n        if (!npa(`${edge.name}@${edge.spec}`).registry) {\n          return null\n        }\n      } catch (err) {\n        return null\n      }\n      const wanted = pickManifest(packument, expected, this.npm.flatOptions)\n      const latest = pickManifest(packument, '*', this.npm.flatOptions)\n\n      if (\n        !current ||\n        current !== wanted.version ||\n        wanted.version !== latest.version\n      ) {\n        const dependent = edge.from ?\n          this.maybeWorkspaceName(edge.from)\n          : 'global'\n\n        this.list.push({\n          name: alias ? edge.spec.replace('npm', edge.name) : edge.name,\n          path,\n          type,\n          current,\n          location,\n          wanted: wanted.version,\n          latest: latest.version,\n          dependent,\n          homepage: packument.homepage,\n        })\n      }\n    } catch (err) {\n      // silently catch and ignore ETARGET, E403 &\n      // E404 errors, deps are just skipped\n      if (!(\n        err.code === 'ETARGET' ||\n        err.code === 'E403' ||\n        err.code === 'E404')\n      ) {\n        throw err\n      }\n    }\n  }\n\n  maybeWorkspaceName (node) {\n    if (!node.isWorkspace) {\n      return node.name\n    }\n\n    const humanOutput =\n      !this.npm.config.get('json') && !this.npm.config.get('parseable')\n\n    const workspaceName =\n      humanOutput\n        ? node.pkgid\n        : node.name\n\n    return this.npm.color && humanOutput\n      ? chalk.green(workspaceName)\n      : workspaceName\n  }\n\n  // formatting functions\n  makePretty (dep) {\n    const {\n      current = 'MISSING',\n      location = '-',\n      homepage = '',\n      name,\n      wanted,\n      latest,\n      type,\n      dependent,\n    } = dep\n\n    const columns = [name, current, wanted, latest, location, dependent]\n\n    if (this.npm.config.get('long')) {\n      columns[6] = type\n      columns[7] = homepage\n    }\n\n    if (this.npm.color) {\n      columns[0] = chalk[current === wanted ? 'yellow' : 'red'](columns[0]) // current\n      columns[2] = chalk.green(columns[2]) // wanted\n      columns[3] = chalk.magenta(columns[3]) // latest\n    }\n\n    return columns\n  }\n\n  // --parseable creates output like this:\n  // <fullpath>:<name@wanted>:<name@installed>:<name@latest>:<dependedby>\n  makeParseable (list) {\n    return list.map(dep => {\n      const {\n        name,\n        current,\n        wanted,\n        latest,\n        path,\n        dependent,\n        type,\n        homepage,\n      } = dep\n      const out = [\n        path,\n        name + '@' + wanted,\n        current ? (name + '@' + current) : 'MISSING',\n        name + '@' + latest,\n        dependent,\n      ]\n      if (this.npm.config.get('long')) {\n        out.push(type, homepage)\n      }\n\n      return out.join(':')\n    }).join(os.EOL)\n  }\n\n  makeJSON (list) {\n    const out = {}\n    list.forEach(dep => {\n      const {\n        name,\n        current,\n        wanted,\n        latest,\n        path,\n        type,\n        dependent,\n        homepage,\n      } = dep\n      out[name] = {\n        current,\n        wanted,\n        latest,\n        dependent,\n        location: path,\n      }\n      if (this.npm.config.get('long')) {\n        out[name].type = type\n        out[name].homepage = homepage\n      }\n    })\n    return JSON.stringify(out, null, 2)\n  }\n}\nmodule.exports = Outdated\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}