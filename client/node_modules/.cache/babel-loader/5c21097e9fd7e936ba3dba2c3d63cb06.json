{"ast":null,"code":"const {\n  explainNode\n} = require('../utils/explain-dep.js');\n\nconst completion = require('../utils/completion/installed-deep.js');\n\nconst Arborist = require('@npmcli/arborist');\n\nconst npa = require('npm-package-arg');\n\nconst semver = require('semver');\n\nconst {\n  relative,\n  resolve\n} = require('path');\n\nconst validName = require('validate-npm-package-name');\n\nconst ArboristWorkspaceCmd = require('../arborist-cmd.js');\n\nclass Explain extends ArboristWorkspaceCmd {\n  static description = 'Explain installed packages';\n  static name = 'explain';\n  static usage = ['<package-spec>'];\n  static params = ['json', 'workspace'];\n  static ignoreImplicitWorkspace = false; // TODO\n\n  /* istanbul ignore next */\n\n  async completion(opts) {\n    return completion(this.npm, opts);\n  }\n\n  async exec(args) {\n    if (!args.length) {\n      throw this.usageError();\n    }\n\n    const arb = new Arborist({\n      path: this.npm.prefix,\n      ...this.npm.flatOptions\n    });\n    const tree = await arb.loadActual();\n\n    if (this.npm.flatOptions.workspacesEnabled && this.workspaceNames && this.workspaceNames.length) {\n      this.filterSet = arb.workspaceDependencySet(tree, this.workspaceNames);\n    } else if (!this.npm.flatOptions.workspacesEnabled) {\n      this.filterSet = arb.excludeWorkspacesDependencySet(tree);\n    }\n\n    const nodes = new Set();\n\n    for (const arg of args) {\n      for (const node of this.getNodes(tree, arg)) {\n        const filteredOut = this.filterSet && this.filterSet.size > 0 && !this.filterSet.has(node);\n\n        if (!filteredOut) {\n          nodes.add(node);\n        }\n      }\n    }\n\n    if (nodes.size === 0) {\n      throw new Error(`No dependencies found matching ${args.join(', ')}`);\n    }\n\n    const expls = [];\n\n    for (const node of nodes) {\n      const {\n        extraneous,\n        dev,\n        optional,\n        devOptional,\n        peer,\n        inBundle\n      } = node;\n      const expl = node.explain();\n\n      if (extraneous) {\n        expl.extraneous = true;\n      } else {\n        expl.dev = dev;\n        expl.optional = optional;\n        expl.devOptional = devOptional;\n        expl.peer = peer;\n        expl.bundled = inBundle;\n      }\n\n      expls.push(expl);\n    }\n\n    if (this.npm.flatOptions.json) {\n      this.npm.output(JSON.stringify(expls, null, 2));\n    } else {\n      this.npm.output(expls.map(expl => {\n        return explainNode(expl, Infinity, this.npm.color);\n      }).join('\\n\\n'));\n    }\n  }\n\n  getNodes(tree, arg) {\n    // if it's just a name, return packages by that name\n    const {\n      validForOldPackages: valid\n    } = validName(arg);\n\n    if (valid) {\n      return tree.inventory.query('packageName', arg);\n    } // if it's a location, get that node\n\n\n    const maybeLoc = arg.replace(/\\\\/g, '/').replace(/\\/+$/, '');\n    const nodeByLoc = tree.inventory.get(maybeLoc);\n\n    if (nodeByLoc) {\n      return [nodeByLoc];\n    } // maybe a path to a node_modules folder\n\n\n    const maybePath = relative(this.npm.prefix, resolve(maybeLoc)).replace(/\\\\/g, '/').replace(/\\/+$/, '');\n    const nodeByPath = tree.inventory.get(maybePath);\n\n    if (nodeByPath) {\n      return [nodeByPath];\n    } // otherwise, try to select all matching nodes\n\n\n    try {\n      return this.getNodesByVersion(tree, arg);\n    } catch (er) {\n      return [];\n    }\n  }\n\n  getNodesByVersion(tree, arg) {\n    const spec = npa(arg, this.npm.prefix);\n\n    if (spec.type !== 'version' && spec.type !== 'range') {\n      return [];\n    }\n\n    return tree.inventory.filter(node => {\n      return node.package.name === spec.name && semver.satisfies(node.package.version, spec.rawSpec);\n    });\n  }\n\n}\n\nmodule.exports = Explain;","map":{"version":3,"names":["explainNode","require","completion","Arborist","npa","semver","relative","resolve","validName","ArboristWorkspaceCmd","Explain","description","name","usage","params","ignoreImplicitWorkspace","opts","npm","exec","args","length","usageError","arb","path","prefix","flatOptions","tree","loadActual","workspacesEnabled","workspaceNames","filterSet","workspaceDependencySet","excludeWorkspacesDependencySet","nodes","Set","arg","node","getNodes","filteredOut","size","has","add","Error","join","expls","extraneous","dev","optional","devOptional","peer","inBundle","expl","explain","bundled","push","json","output","JSON","stringify","map","Infinity","color","validForOldPackages","valid","inventory","query","maybeLoc","replace","nodeByLoc","get","maybePath","nodeByPath","getNodesByVersion","er","spec","type","filter","package","satisfies","version","rawSpec","module","exports"],"sources":["/Users/chelsea/Documents/0_AllCoding/shoppingstories-v3/node_modules/npm/lib/commands/explain.js"],"sourcesContent":["const { explainNode } = require('../utils/explain-dep.js')\nconst completion = require('../utils/completion/installed-deep.js')\nconst Arborist = require('@npmcli/arborist')\nconst npa = require('npm-package-arg')\nconst semver = require('semver')\nconst { relative, resolve } = require('path')\nconst validName = require('validate-npm-package-name')\nconst ArboristWorkspaceCmd = require('../arborist-cmd.js')\n\nclass Explain extends ArboristWorkspaceCmd {\n  static description = 'Explain installed packages'\n  static name = 'explain'\n  static usage = ['<package-spec>']\n  static params = [\n    'json',\n    'workspace',\n  ]\n\n  static ignoreImplicitWorkspace = false\n\n  // TODO\n  /* istanbul ignore next */\n  async completion (opts) {\n    return completion(this.npm, opts)\n  }\n\n  async exec (args) {\n    if (!args.length) {\n      throw this.usageError()\n    }\n\n    const arb = new Arborist({ path: this.npm.prefix, ...this.npm.flatOptions })\n    const tree = await arb.loadActual()\n\n    if (this.npm.flatOptions.workspacesEnabled\n      && this.workspaceNames\n      && this.workspaceNames.length\n    ) {\n      this.filterSet = arb.workspaceDependencySet(tree, this.workspaceNames)\n    } else if (!this.npm.flatOptions.workspacesEnabled) {\n      this.filterSet =\n        arb.excludeWorkspacesDependencySet(tree)\n    }\n\n    const nodes = new Set()\n    for (const arg of args) {\n      for (const node of this.getNodes(tree, arg)) {\n        const filteredOut = this.filterSet\n          && this.filterSet.size > 0\n          && !this.filterSet.has(node)\n        if (!filteredOut) {\n          nodes.add(node)\n        }\n      }\n    }\n    if (nodes.size === 0) {\n      throw new Error(`No dependencies found matching ${args.join(', ')}`)\n    }\n\n    const expls = []\n    for (const node of nodes) {\n      const { extraneous, dev, optional, devOptional, peer, inBundle } = node\n      const expl = node.explain()\n      if (extraneous) {\n        expl.extraneous = true\n      } else {\n        expl.dev = dev\n        expl.optional = optional\n        expl.devOptional = devOptional\n        expl.peer = peer\n        expl.bundled = inBundle\n      }\n      expls.push(expl)\n    }\n\n    if (this.npm.flatOptions.json) {\n      this.npm.output(JSON.stringify(expls, null, 2))\n    } else {\n      this.npm.output(expls.map(expl => {\n        return explainNode(expl, Infinity, this.npm.color)\n      }).join('\\n\\n'))\n    }\n  }\n\n  getNodes (tree, arg) {\n    // if it's just a name, return packages by that name\n    const { validForOldPackages: valid } = validName(arg)\n    if (valid) {\n      return tree.inventory.query('packageName', arg)\n    }\n\n    // if it's a location, get that node\n    const maybeLoc = arg.replace(/\\\\/g, '/').replace(/\\/+$/, '')\n    const nodeByLoc = tree.inventory.get(maybeLoc)\n    if (nodeByLoc) {\n      return [nodeByLoc]\n    }\n\n    // maybe a path to a node_modules folder\n    const maybePath = relative(this.npm.prefix, resolve(maybeLoc))\n      .replace(/\\\\/g, '/').replace(/\\/+$/, '')\n    const nodeByPath = tree.inventory.get(maybePath)\n    if (nodeByPath) {\n      return [nodeByPath]\n    }\n\n    // otherwise, try to select all matching nodes\n    try {\n      return this.getNodesByVersion(tree, arg)\n    } catch (er) {\n      return []\n    }\n  }\n\n  getNodesByVersion (tree, arg) {\n    const spec = npa(arg, this.npm.prefix)\n    if (spec.type !== 'version' && spec.type !== 'range') {\n      return []\n    }\n\n    return tree.inventory.filter(node => {\n      return node.package.name === spec.name &&\n        semver.satisfies(node.package.version, spec.rawSpec)\n    })\n  }\n}\nmodule.exports = Explain\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}