{"ast":null,"code":"const {\n  inspect\n} = require('util');\n\nconst npmlog = require('npmlog');\n\nconst log = require('./log-shim.js');\n\nconst {\n  explain\n} = require('./explain-eresolve.js');\n\nconst _logHandler = Symbol('logHandler');\n\nconst _eresolveWarn = Symbol('eresolveWarn');\n\nconst _log = Symbol('log');\n\nconst _npmlog = Symbol('npmlog');\n\nclass Display {\n  constructor() {\n    // pause by default until config is loaded\n    this.on();\n    log.pause();\n  }\n\n  on() {\n    process.on('log', this[_logHandler]);\n  }\n\n  off() {\n    process.off('log', this[_logHandler]); // Unbalanced calls to enable/disable progress\n    // will leave change listeners on the tracker\n    // This pretty much only happens in tests but\n    // this removes the event emitter listener warnings\n\n    log.tracker.removeAllListeners();\n  }\n\n  load(config) {\n    const {\n      color,\n      timing,\n      loglevel,\n      unicode,\n      progress,\n      silent,\n      heading = 'npm'\n    } = config; // XXX: decouple timing from loglevel\n\n    if (timing && loglevel === 'notice') {\n      log.level = 'timing';\n    } else {\n      log.level = loglevel;\n    }\n\n    log.heading = heading;\n\n    if (color) {\n      log.enableColor();\n    } else {\n      log.disableColor();\n    }\n\n    if (unicode) {\n      log.enableUnicode();\n    } else {\n      log.disableUnicode();\n    } // if it's silent, don't show progress\n\n\n    if (progress && !silent) {\n      log.enableProgress();\n    } else {\n      log.disableProgress();\n    } // Resume displaying logs now that we have config\n\n\n    log.resume();\n  }\n\n  log() {\n    this[_logHandler](...arguments);\n  }\n\n  [_logHandler] = (() => {\n    var _this = this;\n\n    return function (level) {\n      for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n        args[_key - 1] = arguments[_key];\n      }\n\n      try {\n        _this[_log](level, ...args);\n      } catch (ex) {\n        try {\n          // if it crashed once, it might again!\n          _this[_npmlog]('verbose', `attempt to log ${inspect(args)} crashed`, ex);\n        } catch (ex2) {\n          // eslint-disable-next-line no-console\n          console.error(`attempt to log ${inspect(args)} crashed`, ex, ex2);\n        }\n      }\n    };\n  })();\n\n  [_log]() {\n    return this[_eresolveWarn](...arguments) || this[_npmlog](...arguments);\n  } // Explicitly call these on npmlog and not log shim\n  // This is the final place we should call npmlog before removing it.\n\n\n  [_npmlog](level) {\n    for (var _len2 = arguments.length, args = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {\n      args[_key2 - 1] = arguments[_key2];\n    }\n\n    npmlog[level](...args);\n  } // Also (and this is a really inexcusable kludge), we patch the\n  // log.warn() method so that when we see a peerDep override\n  // explanation from Arborist, we can replace the object with a\n  // highly abbreviated explanation of what's being overridden.\n\n\n  [_eresolveWarn](level, heading, message, expl) {\n    if (level === 'warn' && heading === 'ERESOLVE' && expl && typeof expl === 'object') {\n      this[_npmlog](level, heading, message);\n\n      this[_npmlog](level, '', explain(expl, log.useColor(), 2)); // Return true to short circuit other log in chain\n\n\n      return true;\n    }\n  }\n\n}\n\nmodule.exports = Display;","map":{"version":3,"names":["inspect","require","npmlog","log","explain","_logHandler","Symbol","_eresolveWarn","_log","_npmlog","Display","constructor","on","pause","process","off","tracker","removeAllListeners","load","config","color","timing","loglevel","unicode","progress","silent","heading","level","enableColor","disableColor","enableUnicode","disableUnicode","enableProgress","disableProgress","resume","args","ex","ex2","console","error","message","expl","useColor","module","exports"],"sources":["/Users/chelsea/Documents/0_AllCoding/shoppingstories-v3/node_modules/npm/lib/utils/display.js"],"sourcesContent":["const { inspect } = require('util')\nconst npmlog = require('npmlog')\nconst log = require('./log-shim.js')\nconst { explain } = require('./explain-eresolve.js')\n\nconst _logHandler = Symbol('logHandler')\nconst _eresolveWarn = Symbol('eresolveWarn')\nconst _log = Symbol('log')\nconst _npmlog = Symbol('npmlog')\n\nclass Display {\n  constructor () {\n    // pause by default until config is loaded\n    this.on()\n    log.pause()\n  }\n\n  on () {\n    process.on('log', this[_logHandler])\n  }\n\n  off () {\n    process.off('log', this[_logHandler])\n    // Unbalanced calls to enable/disable progress\n    // will leave change listeners on the tracker\n    // This pretty much only happens in tests but\n    // this removes the event emitter listener warnings\n    log.tracker.removeAllListeners()\n  }\n\n  load (config) {\n    const {\n      color,\n      timing,\n      loglevel,\n      unicode,\n      progress,\n      silent,\n      heading = 'npm',\n    } = config\n\n    // XXX: decouple timing from loglevel\n    if (timing && loglevel === 'notice') {\n      log.level = 'timing'\n    } else {\n      log.level = loglevel\n    }\n\n    log.heading = heading\n\n    if (color) {\n      log.enableColor()\n    } else {\n      log.disableColor()\n    }\n\n    if (unicode) {\n      log.enableUnicode()\n    } else {\n      log.disableUnicode()\n    }\n\n    // if it's silent, don't show progress\n    if (progress && !silent) {\n      log.enableProgress()\n    } else {\n      log.disableProgress()\n    }\n\n    // Resume displaying logs now that we have config\n    log.resume()\n  }\n\n  log (...args) {\n    this[_logHandler](...args)\n  }\n\n  [_logHandler] = (level, ...args) => {\n    try {\n      this[_log](level, ...args)\n    } catch (ex) {\n      try {\n        // if it crashed once, it might again!\n        this[_npmlog]('verbose', `attempt to log ${inspect(args)} crashed`, ex)\n      } catch (ex2) {\n        // eslint-disable-next-line no-console\n        console.error(`attempt to log ${inspect(args)} crashed`, ex, ex2)\n      }\n    }\n  }\n\n  [_log] (...args) {\n    return this[_eresolveWarn](...args) || this[_npmlog](...args)\n  }\n\n  // Explicitly call these on npmlog and not log shim\n  // This is the final place we should call npmlog before removing it.\n  [_npmlog] (level, ...args) {\n    npmlog[level](...args)\n  }\n\n  // Also (and this is a really inexcusable kludge), we patch the\n  // log.warn() method so that when we see a peerDep override\n  // explanation from Arborist, we can replace the object with a\n  // highly abbreviated explanation of what's being overridden.\n  [_eresolveWarn] (level, heading, message, expl) {\n    if (level === 'warn' &&\n        heading === 'ERESOLVE' &&\n        expl && typeof expl === 'object'\n    ) {\n      this[_npmlog](level, heading, message)\n      this[_npmlog](level, '', explain(expl, log.useColor(), 2))\n      // Return true to short circuit other log in chain\n      return true\n    }\n  }\n}\n\nmodule.exports = Display\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}