{"ast":null,"code":"const {\n  resolve,\n  basename\n} = require('path');\n\nconst {\n  unlink\n} = require('fs').promises;\n\nconst Arborist = require('@npmcli/arborist');\n\nconst log = require('../utils/log-shim');\n\nconst BaseCommand = require('../base-command.js');\n\nclass Shrinkwrap extends BaseCommand {\n  static description = 'Lock down dependency versions for publication';\n  static name = 'shrinkwrap';\n  static ignoreImplicitWorkspace = false;\n\n  async exec() {\n    // if has a npm-shrinkwrap.json, nothing to do\n    // if has a package-lock.json, rename to npm-shrinkwrap.json\n    // if has neither, load the actual tree and save that as npm-shrinkwrap.json\n    //\n    // loadVirtual, fall back to loadActual\n    // rename shrinkwrap file type, and tree.meta.save()\n    if (this.npm.global) {\n      const er = new Error('`npm shrinkwrap` does not work for global packages');\n      er.code = 'ESHRINKWRAPGLOBAL';\n      throw er;\n    }\n\n    const path = this.npm.prefix;\n    const sw = resolve(path, 'npm-shrinkwrap.json');\n    const arb = new Arborist({ ...this.npm.flatOptions,\n      path\n    });\n    const tree = await arb.loadVirtual().catch(() => arb.loadActual());\n    const {\n      meta\n    } = tree;\n    const newFile = meta.hiddenLockfile || !meta.loadedFromDisk;\n    const oldFilename = meta.filename;\n    const notSW = !newFile && basename(oldFilename) !== 'npm-shrinkwrap.json'; // The computed lockfile version of a hidden lockfile is always 3\n    // even if the actual value of the property is a different.\n    // When shrinkwrap is run with only a hidden lockfile we want to\n    // set the shrinkwrap lockfile version as whatever was explicitly\n    // requested with a fallback to the actual value from the hidden\n    // lockfile.\n\n    if (meta.hiddenLockfile) {\n      meta.lockfileVersion = arb.options.lockfileVersion || meta.originalLockfileVersion;\n    }\n\n    meta.hiddenLockfile = false;\n    meta.filename = sw;\n    await meta.save();\n    const updatedVersion = meta.originalLockfileVersion !== meta.lockfileVersion ? meta.lockfileVersion : null;\n\n    if (newFile) {\n      let message = 'created a lockfile as npm-shrinkwrap.json';\n\n      if (updatedVersion) {\n        message += ` with version ${updatedVersion}`;\n      }\n\n      log.notice('', message);\n    } else if (notSW) {\n      await unlink(oldFilename);\n      let message = 'package-lock.json has been renamed to npm-shrinkwrap.json';\n\n      if (updatedVersion) {\n        message += ` and updated to version ${updatedVersion}`;\n      }\n\n      log.notice('', message);\n    } else if (updatedVersion) {\n      log.notice('', `npm-shrinkwrap.json updated to version ${updatedVersion}`);\n    } else {\n      log.notice('', 'npm-shrinkwrap.json up to date');\n    }\n  }\n\n}\n\nmodule.exports = Shrinkwrap;","map":{"version":3,"names":["resolve","basename","require","unlink","promises","Arborist","log","BaseCommand","Shrinkwrap","description","name","ignoreImplicitWorkspace","exec","npm","global","er","Error","code","path","prefix","sw","arb","flatOptions","tree","loadVirtual","catch","loadActual","meta","newFile","hiddenLockfile","loadedFromDisk","oldFilename","filename","notSW","lockfileVersion","options","originalLockfileVersion","save","updatedVersion","message","notice","module","exports"],"sources":["/Users/chelsea/Documents/0_AllCoding/shoppingstories-v3/node_modules/npm/lib/commands/shrinkwrap.js"],"sourcesContent":["const { resolve, basename } = require('path')\nconst { unlink } = require('fs').promises\nconst Arborist = require('@npmcli/arborist')\nconst log = require('../utils/log-shim')\nconst BaseCommand = require('../base-command.js')\nclass Shrinkwrap extends BaseCommand {\n  static description = 'Lock down dependency versions for publication'\n  static name = 'shrinkwrap'\n  static ignoreImplicitWorkspace = false\n\n  async exec () {\n    // if has a npm-shrinkwrap.json, nothing to do\n    // if has a package-lock.json, rename to npm-shrinkwrap.json\n    // if has neither, load the actual tree and save that as npm-shrinkwrap.json\n    //\n    // loadVirtual, fall back to loadActual\n    // rename shrinkwrap file type, and tree.meta.save()\n    if (this.npm.global) {\n      const er = new Error('`npm shrinkwrap` does not work for global packages')\n      er.code = 'ESHRINKWRAPGLOBAL'\n      throw er\n    }\n\n    const path = this.npm.prefix\n    const sw = resolve(path, 'npm-shrinkwrap.json')\n    const arb = new Arborist({ ...this.npm.flatOptions, path })\n    const tree = await arb.loadVirtual().catch(() => arb.loadActual())\n    const { meta } = tree\n    const newFile = meta.hiddenLockfile || !meta.loadedFromDisk\n    const oldFilename = meta.filename\n    const notSW = !newFile && basename(oldFilename) !== 'npm-shrinkwrap.json'\n\n    // The computed lockfile version of a hidden lockfile is always 3\n    // even if the actual value of the property is a different.\n    // When shrinkwrap is run with only a hidden lockfile we want to\n    // set the shrinkwrap lockfile version as whatever was explicitly\n    // requested with a fallback to the actual value from the hidden\n    // lockfile.\n    if (meta.hiddenLockfile) {\n      meta.lockfileVersion = arb.options.lockfileVersion ||\n        meta.originalLockfileVersion\n    }\n    meta.hiddenLockfile = false\n    meta.filename = sw\n    await meta.save()\n\n    const updatedVersion = meta.originalLockfileVersion !== meta.lockfileVersion\n      ? meta.lockfileVersion\n      : null\n\n    if (newFile) {\n      let message = 'created a lockfile as npm-shrinkwrap.json'\n      if (updatedVersion) {\n        message += ` with version ${updatedVersion}`\n      }\n      log.notice('', message)\n    } else if (notSW) {\n      await unlink(oldFilename)\n      let message = 'package-lock.json has been renamed to npm-shrinkwrap.json'\n      if (updatedVersion) {\n        message += ` and updated to version ${updatedVersion}`\n      }\n      log.notice('', message)\n    } else if (updatedVersion) {\n      log.notice('', `npm-shrinkwrap.json updated to version ${updatedVersion}`)\n    } else {\n      log.notice('', 'npm-shrinkwrap.json up to date')\n    }\n  }\n}\nmodule.exports = Shrinkwrap\n"],"mappings":"AAAA,MAAM;EAAEA,OAAF;EAAWC;AAAX,IAAwBC,OAAO,CAAC,MAAD,CAArC;;AACA,MAAM;EAAEC;AAAF,IAAaD,OAAO,CAAC,IAAD,CAAP,CAAcE,QAAjC;;AACA,MAAMC,QAAQ,GAAGH,OAAO,CAAC,kBAAD,CAAxB;;AACA,MAAMI,GAAG,GAAGJ,OAAO,CAAC,mBAAD,CAAnB;;AACA,MAAMK,WAAW,GAAGL,OAAO,CAAC,oBAAD,CAA3B;;AACA,MAAMM,UAAN,SAAyBD,WAAzB,CAAqC;EACjB,OAAXE,WAAW,GAAG,+CAAH;EACP,OAAJC,IAAI,GAAG,YAAH;EACmB,OAAvBC,uBAAuB,GAAG,KAAH;;EAEpB,MAAJC,IAAI,GAAI;IACZ;IACA;IACA;IACA;IACA;IACA;IACA,IAAI,KAAKC,GAAL,CAASC,MAAb,EAAqB;MACnB,MAAMC,EAAE,GAAG,IAAIC,KAAJ,CAAU,oDAAV,CAAX;MACAD,EAAE,CAACE,IAAH,GAAU,mBAAV;MACA,MAAMF,EAAN;IACD;;IAED,MAAMG,IAAI,GAAG,KAAKL,GAAL,CAASM,MAAtB;IACA,MAAMC,EAAE,GAAGpB,OAAO,CAACkB,IAAD,EAAO,qBAAP,CAAlB;IACA,MAAMG,GAAG,GAAG,IAAIhB,QAAJ,CAAa,EAAE,GAAG,KAAKQ,GAAL,CAASS,WAAd;MAA2BJ;IAA3B,CAAb,CAAZ;IACA,MAAMK,IAAI,GAAG,MAAMF,GAAG,CAACG,WAAJ,GAAkBC,KAAlB,CAAwB,MAAMJ,GAAG,CAACK,UAAJ,EAA9B,CAAnB;IACA,MAAM;MAAEC;IAAF,IAAWJ,IAAjB;IACA,MAAMK,OAAO,GAAGD,IAAI,CAACE,cAAL,IAAuB,CAACF,IAAI,CAACG,cAA7C;IACA,MAAMC,WAAW,GAAGJ,IAAI,CAACK,QAAzB;IACA,MAAMC,KAAK,GAAG,CAACL,OAAD,IAAY3B,QAAQ,CAAC8B,WAAD,CAAR,KAA0B,qBAApD,CApBY,CAsBZ;IACA;IACA;IACA;IACA;IACA;;IACA,IAAIJ,IAAI,CAACE,cAAT,EAAyB;MACvBF,IAAI,CAACO,eAAL,GAAuBb,GAAG,CAACc,OAAJ,CAAYD,eAAZ,IACrBP,IAAI,CAACS,uBADP;IAED;;IACDT,IAAI,CAACE,cAAL,GAAsB,KAAtB;IACAF,IAAI,CAACK,QAAL,GAAgBZ,EAAhB;IACA,MAAMO,IAAI,CAACU,IAAL,EAAN;IAEA,MAAMC,cAAc,GAAGX,IAAI,CAACS,uBAAL,KAAiCT,IAAI,CAACO,eAAtC,GACnBP,IAAI,CAACO,eADc,GAEnB,IAFJ;;IAIA,IAAIN,OAAJ,EAAa;MACX,IAAIW,OAAO,GAAG,2CAAd;;MACA,IAAID,cAAJ,EAAoB;QAClBC,OAAO,IAAK,iBAAgBD,cAAe,EAA3C;MACD;;MACDhC,GAAG,CAACkC,MAAJ,CAAW,EAAX,EAAeD,OAAf;IACD,CAND,MAMO,IAAIN,KAAJ,EAAW;MAChB,MAAM9B,MAAM,CAAC4B,WAAD,CAAZ;MACA,IAAIQ,OAAO,GAAG,2DAAd;;MACA,IAAID,cAAJ,EAAoB;QAClBC,OAAO,IAAK,2BAA0BD,cAAe,EAArD;MACD;;MACDhC,GAAG,CAACkC,MAAJ,CAAW,EAAX,EAAeD,OAAf;IACD,CAPM,MAOA,IAAID,cAAJ,EAAoB;MACzBhC,GAAG,CAACkC,MAAJ,CAAW,EAAX,EAAgB,0CAAyCF,cAAe,EAAxE;IACD,CAFM,MAEA;MACLhC,GAAG,CAACkC,MAAJ,CAAW,EAAX,EAAe,gCAAf;IACD;EACF;;AA/DkC;;AAiErCC,MAAM,CAACC,OAAP,GAAiBlC,UAAjB"},"metadata":{},"sourceType":"script"}