{"ast":null,"code":"// Perform a depth-first walk of a tree.\n//\n// `visit(node)` is called when the node is first encountered.\n// `leave(node, children)` is called when all of the node's children\n// have been left or (in the case of cyclic graphs) visited.\n//\n// Only one of visit or leave is required.  (Technically both are optional,\n// but if you don't provide at least one, the tree is just walked without\n// doing anything, which is a bit pointless.)  If visit is provided, and\n// leave is not, then this is a root->leaf traversal.  If leave is provided,\n// and visit is not, then it's leaf->root.  Both can be provided for a\n// map-reduce operation.\n//\n// If either visit or leave return a Promise for any node, then the\n// walk returns a Promise.\nconst depthDescent = require('./depth-descent.js');\n\nconst depth = _ref => {\n  let {\n    visit,\n    leave,\n    filter = () => true,\n    seen = new Map(),\n    getChildren,\n    tree\n  } = _ref;\n\n  if (!leave) {\n    return depthDescent({\n      visit,\n      filter,\n      getChildren,\n      tree\n    });\n  }\n\n  if (seen.has(tree)) {\n    return seen.get(tree);\n  }\n\n  seen.set(tree, null);\n\n  const visitNode = () => {\n    const res = visit ? visit(tree) : tree;\n\n    if (isPromise(res)) {\n      const fullResult = res.then(resThen => {\n        seen.set(tree, resThen);\n        return kidNodes();\n      });\n      seen.set(tree, fullResult);\n      return fullResult;\n    } else {\n      seen.set(tree, res);\n      return kidNodes();\n    }\n  };\n\n  const kidNodes = () => {\n    const kids = getChildren(tree, seen.get(tree));\n    return isPromise(kids) ? kids.then(processKids) : processKids(kids);\n  };\n\n  const processKids = nodes => {\n    const kids = (nodes || []).filter(filter).map(kid => depth({\n      visit,\n      leave,\n      filter,\n      seen,\n      getChildren,\n      tree: kid\n    }));\n    return kids.some(isPromise) ? Promise.all(kids).then(leaveNode) : leaveNode(kids);\n  };\n\n  const leaveNode = kids => {\n    const res = leave(seen.get(tree), kids);\n    seen.set(tree, res); // if it's a promise at this point, the caller deals with it\n\n    return res;\n  };\n\n  return visitNode();\n};\n\nconst isPromise = p => p && typeof p.then === 'function';\n\nmodule.exports = depth;","map":{"version":3,"names":["depthDescent","require","depth","visit","leave","filter","seen","Map","getChildren","tree","has","get","set","visitNode","res","isPromise","fullResult","then","resThen","kidNodes","kids","processKids","nodes","map","kid","some","Promise","all","leaveNode","p","module","exports"],"sources":["/Users/chelsea/Documents/0_AllCoding/shoppingstories-v3/node_modules/npm/node_modules/treeverse/lib/depth.js"],"sourcesContent":["// Perform a depth-first walk of a tree.\n//\n// `visit(node)` is called when the node is first encountered.\n// `leave(node, children)` is called when all of the node's children\n// have been left or (in the case of cyclic graphs) visited.\n//\n// Only one of visit or leave is required.  (Technically both are optional,\n// but if you don't provide at least one, the tree is just walked without\n// doing anything, which is a bit pointless.)  If visit is provided, and\n// leave is not, then this is a root->leaf traversal.  If leave is provided,\n// and visit is not, then it's leaf->root.  Both can be provided for a\n// map-reduce operation.\n//\n// If either visit or leave return a Promise for any node, then the\n// walk returns a Promise.\n\nconst depthDescent = require('./depth-descent.js')\nconst depth = ({\n  visit,\n  leave,\n  filter = () => true,\n  seen = new Map(),\n  getChildren,\n  tree,\n}) => {\n  if (!leave) {\n    return depthDescent({ visit, filter, getChildren, tree })\n  }\n\n  if (seen.has(tree)) {\n    return seen.get(tree)\n  }\n\n  seen.set(tree, null)\n\n  const visitNode = () => {\n    const res = visit ? visit(tree) : tree\n    if (isPromise(res)) {\n      const fullResult = res.then(resThen => {\n        seen.set(tree, resThen)\n        return kidNodes()\n      })\n      seen.set(tree, fullResult)\n      return fullResult\n    } else {\n      seen.set(tree, res)\n      return kidNodes()\n    }\n  }\n\n  const kidNodes = () => {\n    const kids = getChildren(tree, seen.get(tree))\n    return isPromise(kids) ? kids.then(processKids) : processKids(kids)\n  }\n\n  const processKids = nodes => {\n    const kids = (nodes || []).filter(filter).map(kid =>\n      depth({ visit, leave, filter, seen, getChildren, tree: kid }))\n    return kids.some(isPromise)\n      ? Promise.all(kids).then(leaveNode)\n      : leaveNode(kids)\n  }\n\n  const leaveNode = kids => {\n    const res = leave(seen.get(tree), kids)\n    seen.set(tree, res)\n    // if it's a promise at this point, the caller deals with it\n    return res\n  }\n\n  return visitNode()\n}\n\nconst isPromise = p => p && typeof p.then === 'function'\n\nmodule.exports = depth\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA,MAAMA,YAAY,GAAGC,OAAO,CAAC,oBAAD,CAA5B;;AACA,MAAMC,KAAK,GAAG,QAOR;EAAA,IAPS;IACbC,KADa;IAEbC,KAFa;IAGbC,MAAM,GAAG,MAAM,IAHF;IAIbC,IAAI,GAAG,IAAIC,GAAJ,EAJM;IAKbC,WALa;IAMbC;EANa,CAOT;;EACJ,IAAI,CAACL,KAAL,EAAY;IACV,OAAOJ,YAAY,CAAC;MAAEG,KAAF;MAASE,MAAT;MAAiBG,WAAjB;MAA8BC;IAA9B,CAAD,CAAnB;EACD;;EAED,IAAIH,IAAI,CAACI,GAAL,CAASD,IAAT,CAAJ,EAAoB;IAClB,OAAOH,IAAI,CAACK,GAAL,CAASF,IAAT,CAAP;EACD;;EAEDH,IAAI,CAACM,GAAL,CAASH,IAAT,EAAe,IAAf;;EAEA,MAAMI,SAAS,GAAG,MAAM;IACtB,MAAMC,GAAG,GAAGX,KAAK,GAAGA,KAAK,CAACM,IAAD,CAAR,GAAiBA,IAAlC;;IACA,IAAIM,SAAS,CAACD,GAAD,CAAb,EAAoB;MAClB,MAAME,UAAU,GAAGF,GAAG,CAACG,IAAJ,CAASC,OAAO,IAAI;QACrCZ,IAAI,CAACM,GAAL,CAASH,IAAT,EAAeS,OAAf;QACA,OAAOC,QAAQ,EAAf;MACD,CAHkB,CAAnB;MAIAb,IAAI,CAACM,GAAL,CAASH,IAAT,EAAeO,UAAf;MACA,OAAOA,UAAP;IACD,CAPD,MAOO;MACLV,IAAI,CAACM,GAAL,CAASH,IAAT,EAAeK,GAAf;MACA,OAAOK,QAAQ,EAAf;IACD;EACF,CAbD;;EAeA,MAAMA,QAAQ,GAAG,MAAM;IACrB,MAAMC,IAAI,GAAGZ,WAAW,CAACC,IAAD,EAAOH,IAAI,CAACK,GAAL,CAASF,IAAT,CAAP,CAAxB;IACA,OAAOM,SAAS,CAACK,IAAD,CAAT,GAAkBA,IAAI,CAACH,IAAL,CAAUI,WAAV,CAAlB,GAA2CA,WAAW,CAACD,IAAD,CAA7D;EACD,CAHD;;EAKA,MAAMC,WAAW,GAAGC,KAAK,IAAI;IAC3B,MAAMF,IAAI,GAAG,CAACE,KAAK,IAAI,EAAV,EAAcjB,MAAd,CAAqBA,MAArB,EAA6BkB,GAA7B,CAAiCC,GAAG,IAC/CtB,KAAK,CAAC;MAAEC,KAAF;MAASC,KAAT;MAAgBC,MAAhB;MAAwBC,IAAxB;MAA8BE,WAA9B;MAA2CC,IAAI,EAAEe;IAAjD,CAAD,CADM,CAAb;IAEA,OAAOJ,IAAI,CAACK,IAAL,CAAUV,SAAV,IACHW,OAAO,CAACC,GAAR,CAAYP,IAAZ,EAAkBH,IAAlB,CAAuBW,SAAvB,CADG,GAEHA,SAAS,CAACR,IAAD,CAFb;EAGD,CAND;;EAQA,MAAMQ,SAAS,GAAGR,IAAI,IAAI;IACxB,MAAMN,GAAG,GAAGV,KAAK,CAACE,IAAI,CAACK,GAAL,CAASF,IAAT,CAAD,EAAiBW,IAAjB,CAAjB;IACAd,IAAI,CAACM,GAAL,CAASH,IAAT,EAAeK,GAAf,EAFwB,CAGxB;;IACA,OAAOA,GAAP;EACD,CALD;;EAOA,OAAOD,SAAS,EAAhB;AACD,CAtDD;;AAwDA,MAAME,SAAS,GAAGc,CAAC,IAAIA,CAAC,IAAI,OAAOA,CAAC,CAACZ,IAAT,KAAkB,UAA9C;;AAEAa,MAAM,CAACC,OAAP,GAAiB7B,KAAjB"},"metadata":{},"sourceType":"script"}