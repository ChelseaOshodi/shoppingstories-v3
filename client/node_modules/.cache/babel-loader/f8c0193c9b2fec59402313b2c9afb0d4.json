{"ast":null,"code":"// Base class for npm commands\nconst {\n  relative\n} = require('path');\n\nconst ConfigDefinitions = require('./utils/config/definitions.js');\n\nconst getWorkspaces = require('./workspaces/get-workspaces.js');\n\nconst cmdAliases = require('./utils/cmd-list').aliases;\n\nclass BaseCommand {\n  constructor(npm) {\n    this.wrapWidth = 80;\n    this.npm = npm;\n  }\n\n  get name() {\n    return this.constructor.name;\n  }\n\n  get description() {\n    return this.constructor.description;\n  }\n\n  get ignoreImplicitWorkspace() {\n    return this.constructor.ignoreImplicitWorkspace;\n  }\n\n  get usage() {\n    const usage = [`${this.constructor.description}`, '', 'Usage:'];\n\n    if (!this.constructor.usage) {\n      usage.push(`npm ${this.constructor.name}`);\n    } else {\n      usage.push(...this.constructor.usage.map(u => `npm ${this.constructor.name} ${u}`));\n    }\n\n    if (this.constructor.params) {\n      usage.push('');\n      usage.push('Options:');\n      usage.push(this.wrappedParams);\n    }\n\n    const aliases = Object.keys(cmdAliases).reduce((p, c) => {\n      if (cmdAliases[c] === this.constructor.name) {\n        p.push(c);\n      }\n\n      return p;\n    }, []);\n\n    if (aliases.length === 1) {\n      usage.push('');\n      usage.push(`alias: ${aliases.join(', ')}`);\n    } else if (aliases.length > 1) {\n      usage.push('');\n      usage.push(`aliases: ${aliases.join(', ')}`);\n    }\n\n    usage.push('');\n    usage.push(`Run \"npm help ${this.constructor.name}\" for more info`);\n    return usage.join('\\n');\n  }\n\n  get wrappedParams() {\n    let results = '';\n    let line = '';\n\n    for (const param of this.constructor.params) {\n      const usage = `[${ConfigDefinitions[param].usage}]`;\n\n      if (line.length && line.length + usage.length > this.wrapWidth) {\n        results = [results, line].filter(Boolean).join('\\n');\n        line = '';\n      }\n\n      line = [line, usage].filter(Boolean).join(' ');\n    }\n\n    results = [results, line].filter(Boolean).join('\\n');\n    return results;\n  }\n\n  usageError() {\n    let prefix = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';\n\n    if (prefix) {\n      prefix += '\\n\\n';\n    }\n\n    return Object.assign(new Error(`\\n${prefix}${this.usage}`), {\n      code: 'EUSAGE'\n    });\n  }\n\n  async execWorkspaces(args, filters) {\n    throw Object.assign(new Error('This command does not support workspaces.'), {\n      code: 'ENOWORKSPACES'\n    });\n  }\n\n  async setWorkspaces(filters) {\n    if (this.isArboristCmd) {\n      this.includeWorkspaceRoot = false;\n    }\n\n    const relativeFrom = relative(this.npm.localPrefix, process.cwd()).startsWith('..') ? this.npm.localPrefix : process.cwd();\n    const ws = await getWorkspaces(filters, {\n      path: this.npm.localPrefix,\n      includeWorkspaceRoot: this.includeWorkspaceRoot,\n      relativeFrom\n    });\n    this.workspaces = ws;\n    this.workspaceNames = [...ws.keys()];\n    this.workspacePaths = [...ws.values()];\n  }\n\n}\n\nmodule.exports = BaseCommand;","map":{"version":3,"names":["relative","require","ConfigDefinitions","getWorkspaces","cmdAliases","aliases","BaseCommand","constructor","npm","wrapWidth","name","description","ignoreImplicitWorkspace","usage","push","map","u","params","wrappedParams","Object","keys","reduce","p","c","length","join","results","line","param","filter","Boolean","usageError","prefix","assign","Error","code","execWorkspaces","args","filters","setWorkspaces","isArboristCmd","includeWorkspaceRoot","relativeFrom","localPrefix","process","cwd","startsWith","ws","path","workspaces","workspaceNames","workspacePaths","values","module","exports"],"sources":["/Users/chelsea/Documents/0_AllCoding/shoppingstories-v3/node_modules/npm/lib/base-command.js"],"sourcesContent":["// Base class for npm commands\n\nconst { relative } = require('path')\n\nconst ConfigDefinitions = require('./utils/config/definitions.js')\nconst getWorkspaces = require('./workspaces/get-workspaces.js')\n\nconst cmdAliases = require('./utils/cmd-list').aliases\n\nclass BaseCommand {\n  constructor (npm) {\n    this.wrapWidth = 80\n    this.npm = npm\n  }\n\n  get name () {\n    return this.constructor.name\n  }\n\n  get description () {\n    return this.constructor.description\n  }\n\n  get ignoreImplicitWorkspace () {\n    return this.constructor.ignoreImplicitWorkspace\n  }\n\n  get usage () {\n    const usage = [\n      `${this.constructor.description}`,\n      '',\n      'Usage:',\n    ]\n\n    if (!this.constructor.usage) {\n      usage.push(`npm ${this.constructor.name}`)\n    } else {\n      usage.push(...this.constructor.usage.map(u => `npm ${this.constructor.name} ${u}`))\n    }\n\n    if (this.constructor.params) {\n      usage.push('')\n      usage.push('Options:')\n      usage.push(this.wrappedParams)\n    }\n\n    const aliases = Object.keys(cmdAliases).reduce((p, c) => {\n      if (cmdAliases[c] === this.constructor.name) {\n        p.push(c)\n      }\n      return p\n    }, [])\n\n    if (aliases.length === 1) {\n      usage.push('')\n      usage.push(`alias: ${aliases.join(', ')}`)\n    } else if (aliases.length > 1) {\n      usage.push('')\n      usage.push(`aliases: ${aliases.join(', ')}`)\n    }\n\n    usage.push('')\n    usage.push(`Run \"npm help ${this.constructor.name}\" for more info`)\n\n    return usage.join('\\n')\n  }\n\n  get wrappedParams () {\n    let results = ''\n    let line = ''\n\n    for (const param of this.constructor.params) {\n      const usage = `[${ConfigDefinitions[param].usage}]`\n      if (line.length && line.length + usage.length > this.wrapWidth) {\n        results = [results, line].filter(Boolean).join('\\n')\n        line = ''\n      }\n      line = [line, usage].filter(Boolean).join(' ')\n    }\n    results = [results, line].filter(Boolean).join('\\n')\n    return results\n  }\n\n  usageError (prefix = '') {\n    if (prefix) {\n      prefix += '\\n\\n'\n    }\n    return Object.assign(new Error(`\\n${prefix}${this.usage}`), {\n      code: 'EUSAGE',\n    })\n  }\n\n  async execWorkspaces (args, filters) {\n    throw Object.assign(new Error('This command does not support workspaces.'), {\n      code: 'ENOWORKSPACES',\n    })\n  }\n\n  async setWorkspaces (filters) {\n    if (this.isArboristCmd) {\n      this.includeWorkspaceRoot = false\n    }\n\n    const relativeFrom = relative(this.npm.localPrefix, process.cwd()).startsWith('..')\n      ? this.npm.localPrefix\n      : process.cwd()\n\n    const ws = await getWorkspaces(filters, {\n      path: this.npm.localPrefix,\n      includeWorkspaceRoot: this.includeWorkspaceRoot,\n      relativeFrom,\n    })\n    this.workspaces = ws\n    this.workspaceNames = [...ws.keys()]\n    this.workspacePaths = [...ws.values()]\n  }\n}\nmodule.exports = BaseCommand\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}