{"ast":null,"code":"const {\n  resolve\n} = require('path');\n\nconst rpj = require('read-package-json-fast');\n\nconst PackageJson = require('@npmcli/package-json');\n\nconst log = require('../utils/log-shim');\n\nconst BaseCommand = require('../base-command.js');\n\nclass SetScript extends BaseCommand {\n  static description = 'Set tasks in the scripts section of package.json, deprecated';\n  static params = ['workspace', 'workspaces', 'include-workspace-root'];\n  static name = 'set-script';\n  static usage = ['[<script>] [<command>]'];\n  static ignoreImplicitWorkspace = false;\n\n  async completion(opts) {\n    const argv = opts.conf.argv.remain;\n\n    if (argv.length === 2) {\n      // find the script name\n      const json = resolve(this.npm.localPrefix, 'package.json');\n      const {\n        scripts = {}\n      } = await rpj(json).catch(er => ({}));\n      return Object.keys(scripts);\n    }\n  }\n\n  validate(args) {\n    if (process.env.npm_lifecycle_event === 'postinstall') {\n      throw new Error('Scripts can’t set from the postinstall script');\n    } // Parse arguments\n\n\n    if (args.length !== 2) {\n      throw new Error(`Expected 2 arguments: got ${args.length}`);\n    }\n  }\n\n  async exec(args) {\n    this.validate(args);\n    log.warn('set-script', 'set-script is deprecated, use `npm pkg set scripts.scriptname=\"cmd\" instead.');\n    const warn = await this.doSetScript(this.npm.localPrefix, args[0], args[1]);\n\n    if (warn) {\n      log.warn('set-script', `Script \"${args[0]}\" was overwritten`);\n    }\n  }\n\n  async execWorkspaces(args, filters) {\n    this.validate(args);\n    await this.setWorkspaces(filters);\n\n    for (const [name, path] of this.workspaces) {\n      try {\n        const warn = await this.doSetScript(path, args[0], args[1]);\n\n        if (warn) {\n          log.warn('set-script', `Script \"${args[0]}\" was overwritten`);\n          log.warn(`  in workspace: ${name}`);\n          log.warn(`  at location: ${path}`);\n        }\n      } catch (err) {\n        log.error('set-script', err.message);\n        log.error(`  in workspace: ${name}`);\n        log.error(`  at location: ${path}`);\n        process.exitCode = 1;\n      }\n    }\n  } // returns a Boolean that will be true if\n  // the requested script was overwritten\n  // and false if it was set as a new script\n\n\n  async doSetScript(path, name, value) {\n    let warn = false;\n    const pkgJson = await PackageJson.load(path);\n    const {\n      scripts\n    } = pkgJson.content;\n    const overwriting = scripts && scripts[name] && scripts[name] !== value;\n\n    if (overwriting) {\n      warn = true;\n    }\n\n    pkgJson.update({\n      scripts: { ...scripts,\n        [name]: value\n      }\n    });\n    await pkgJson.save();\n    return warn;\n  }\n\n}\n\nmodule.exports = SetScript;","map":{"version":3,"names":["resolve","require","rpj","PackageJson","log","BaseCommand","SetScript","description","params","name","usage","ignoreImplicitWorkspace","completion","opts","argv","conf","remain","length","json","npm","localPrefix","scripts","catch","er","Object","keys","validate","args","process","env","npm_lifecycle_event","Error","exec","warn","doSetScript","execWorkspaces","filters","setWorkspaces","path","workspaces","err","error","message","exitCode","value","pkgJson","load","content","overwriting","update","save","module","exports"],"sources":["/Users/chelsea/Documents/0_AllCoding/shoppingstories-v3/node_modules/npm/lib/commands/set-script.js"],"sourcesContent":["const { resolve } = require('path')\nconst rpj = require('read-package-json-fast')\nconst PackageJson = require('@npmcli/package-json')\nconst log = require('../utils/log-shim')\n\nconst BaseCommand = require('../base-command.js')\nclass SetScript extends BaseCommand {\n  static description = 'Set tasks in the scripts section of package.json, deprecated'\n  static params = ['workspace', 'workspaces', 'include-workspace-root']\n  static name = 'set-script'\n  static usage = ['[<script>] [<command>]']\n  static ignoreImplicitWorkspace = false\n\n  async completion (opts) {\n    const argv = opts.conf.argv.remain\n    if (argv.length === 2) {\n      // find the script name\n      const json = resolve(this.npm.localPrefix, 'package.json')\n      const { scripts = {} } = await rpj(json).catch(er => ({}))\n      return Object.keys(scripts)\n    }\n  }\n\n  validate (args) {\n    if (process.env.npm_lifecycle_event === 'postinstall') {\n      throw new Error('Scripts can’t set from the postinstall script')\n    }\n\n    // Parse arguments\n    if (args.length !== 2) {\n      throw new Error(`Expected 2 arguments: got ${args.length}`)\n    }\n  }\n\n  async exec (args) {\n    this.validate(args)\n    log.warn('set-script',\n      'set-script is deprecated, use `npm pkg set scripts.scriptname=\"cmd\" instead.')\n    const warn = await this.doSetScript(this.npm.localPrefix, args[0], args[1])\n    if (warn) {\n      log.warn('set-script', `Script \"${args[0]}\" was overwritten`)\n    }\n  }\n\n  async execWorkspaces (args, filters) {\n    this.validate(args)\n    await this.setWorkspaces(filters)\n\n    for (const [name, path] of this.workspaces) {\n      try {\n        const warn = await this.doSetScript(path, args[0], args[1])\n        if (warn) {\n          log.warn('set-script', `Script \"${args[0]}\" was overwritten`)\n          log.warn(`  in workspace: ${name}`)\n          log.warn(`  at location: ${path}`)\n        }\n      } catch (err) {\n        log.error('set-script', err.message)\n        log.error(`  in workspace: ${name}`)\n        log.error(`  at location: ${path}`)\n        process.exitCode = 1\n      }\n    }\n  }\n\n  // returns a Boolean that will be true if\n  // the requested script was overwritten\n  // and false if it was set as a new script\n  async doSetScript (path, name, value) {\n    let warn = false\n\n    const pkgJson = await PackageJson.load(path)\n    const { scripts } = pkgJson.content\n\n    const overwriting =\n      scripts\n        && scripts[name]\n        && scripts[name] !== value\n\n    if (overwriting) {\n      warn = true\n    }\n\n    pkgJson.update({\n      scripts: {\n        ...scripts,\n        [name]: value,\n      },\n    })\n\n    await pkgJson.save()\n\n    return warn\n  }\n}\nmodule.exports = SetScript\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}