{"ast":null,"code":"// check to see if a bin is allowed to be overwritten\n// either rejects or resolves to nothing.  return value not relevant.\nconst isWindows = require('./is-windows.js');\n\nconst binTarget = require('./bin-target.js');\n\nconst {\n  resolve,\n  dirname\n} = require('path');\n\nconst readCmdShim = require('read-cmd-shim');\n\nconst fs = require('fs');\n\nconst {\n  promisify\n} = require('util');\n\nconst readlink = promisify(fs.readlink);\n\nconst checkBin = async _ref => {\n  let {\n    bin,\n    path,\n    top,\n    global,\n    force\n  } = _ref;\n\n  // always ok to clobber when forced\n  // always ok to clobber local bins, or when forced\n  if (force || !global || !top) {\n    return;\n  } // ok, need to make sure, then\n\n\n  const target = resolve(binTarget({\n    path,\n    top\n  }), bin);\n  path = resolve(path);\n  return isWindows ? checkShim({\n    target,\n    path\n  }) : checkLink({\n    target,\n    path\n  });\n}; // only enoent is allowed.  anything else is a problem.\n\n\nconst handleReadLinkError = async _ref2 => {\n  let {\n    er,\n    target\n  } = _ref2;\n  return er.code === 'ENOENT' ? null : failEEXIST({\n    target\n  });\n};\n\nconst checkLink = async _ref3 => {\n  let {\n    target,\n    path\n  } = _ref3;\n  const current = await readlink(target).catch(er => handleReadLinkError({\n    er,\n    target\n  }));\n\n  if (!current) {\n    return;\n  }\n\n  const resolved = resolve(dirname(target), current);\n\n  if (resolved.toLowerCase().indexOf(path.toLowerCase()) !== 0) {\n    return failEEXIST({\n      target\n    });\n  }\n};\n\nconst handleReadCmdShimError = _ref4 => {\n  let {\n    er,\n    target\n  } = _ref4;\n  return er.code === 'ENOENT' ? null : failEEXIST({\n    target\n  });\n};\n\nconst failEEXIST = _ref5 => {\n  let {\n    target\n  } = _ref5;\n  return Promise.reject(Object.assign(new Error('EEXIST: file already exists'), {\n    path: target,\n    code: 'EEXIST'\n  }));\n};\n\nconst checkShim = async _ref6 => {\n  let {\n    target,\n    path\n  } = _ref6;\n  const shims = [target, target + '.cmd', target + '.ps1'];\n  await Promise.all(shims.map(async shim => {\n    const current = await readCmdShim(shim).catch(er => handleReadCmdShimError({\n      er,\n      target: shim\n    }));\n\n    if (!current) {\n      return;\n    }\n\n    const resolved = resolve(dirname(shim), current.replace(/\\\\/g, '/'));\n\n    if (resolved.toLowerCase().indexOf(path.toLowerCase()) !== 0) {\n      return failEEXIST({\n        target: shim\n      });\n    }\n  }));\n};\n\nmodule.exports = checkBin;","map":{"version":3,"names":["isWindows","require","binTarget","resolve","dirname","readCmdShim","fs","promisify","readlink","checkBin","bin","path","top","global","force","target","checkShim","checkLink","handleReadLinkError","er","code","failEEXIST","current","catch","resolved","toLowerCase","indexOf","handleReadCmdShimError","Promise","reject","Object","assign","Error","shims","all","map","shim","replace","module","exports"],"sources":["/Users/chelsea/Documents/0_AllCoding/shoppingstories-v3/node_modules/npm/node_modules/bin-links/lib/check-bin.js"],"sourcesContent":["// check to see if a bin is allowed to be overwritten\n// either rejects or resolves to nothing.  return value not relevant.\nconst isWindows = require('./is-windows.js')\nconst binTarget = require('./bin-target.js')\nconst { resolve, dirname } = require('path')\nconst readCmdShim = require('read-cmd-shim')\nconst fs = require('fs')\nconst { promisify } = require('util')\nconst readlink = promisify(fs.readlink)\n\nconst checkBin = async ({ bin, path, top, global, force }) => {\n  // always ok to clobber when forced\n  // always ok to clobber local bins, or when forced\n  if (force || !global || !top) {\n    return\n  }\n\n  // ok, need to make sure, then\n  const target = resolve(binTarget({ path, top }), bin)\n  path = resolve(path)\n  return isWindows ? checkShim({ target, path }) : checkLink({ target, path })\n}\n\n// only enoent is allowed.  anything else is a problem.\nconst handleReadLinkError = async ({ er, target }) =>\n  er.code === 'ENOENT' ? null\n  : failEEXIST({ target })\n\nconst checkLink = async ({ target, path }) => {\n  const current = await readlink(target)\n    .catch(er => handleReadLinkError({ er, target }))\n\n  if (!current) {\n    return\n  }\n\n  const resolved = resolve(dirname(target), current)\n\n  if (resolved.toLowerCase().indexOf(path.toLowerCase()) !== 0) {\n    return failEEXIST({ target })\n  }\n}\n\nconst handleReadCmdShimError = ({ er, target }) =>\n  er.code === 'ENOENT' ? null\n  : failEEXIST({ target })\n\nconst failEEXIST = ({ target }) =>\n  Promise.reject(Object.assign(new Error('EEXIST: file already exists'), {\n    path: target,\n    code: 'EEXIST',\n  }))\n\nconst checkShim = async ({ target, path }) => {\n  const shims = [\n    target,\n    target + '.cmd',\n    target + '.ps1',\n  ]\n  await Promise.all(shims.map(async shim => {\n    const current = await readCmdShim(shim)\n      .catch(er => handleReadCmdShimError({ er, target: shim }))\n\n    if (!current) {\n      return\n    }\n\n    const resolved = resolve(dirname(shim), current.replace(/\\\\/g, '/'))\n\n    if (resolved.toLowerCase().indexOf(path.toLowerCase()) !== 0) {\n      return failEEXIST({ target: shim })\n    }\n  }))\n}\n\nmodule.exports = checkBin\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}