{"ast":null,"code":"// a class to manage an inventory and set of indexes of\n// a set of objects based on specific fields.\n// primary is the primary index key.\n// keys is the set of fields to be able to query.\nconst _primaryKey = Symbol('_primaryKey');\n\nconst _index = Symbol('_index');\n\nconst defaultKeys = ['name', 'license', 'funding', 'realpath', 'packageName'];\nconst {\n  hasOwnProperty\n} = Object.prototype;\n\nconst debug = require('./debug.js'); // handling for the outdated \"licenses\" array, just pick the first one\n// also support the alternative spelling \"licence\"\n\n\nconst getLicense = pkg => {\n  if (pkg) {\n    const lic = pkg.license || pkg.licence;\n\n    if (lic) {\n      return lic;\n    }\n\n    const lics = pkg.licenses || pkg.licences;\n\n    if (Array.isArray(lics)) {\n      return lics[0];\n    }\n  }\n};\n\nclass Inventory extends Map {\n  constructor() {\n    let opt = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    const {\n      primary,\n      keys\n    } = opt;\n    super();\n    this[_primaryKey] = primary || 'location';\n    this[_index] = (keys || defaultKeys).reduce((index, i) => {\n      index.set(i, new Map());\n      return index;\n    }, new Map());\n  }\n\n  get primaryKey() {\n    return this[_primaryKey];\n  }\n\n  get indexes() {\n    return [...this[_index].keys()];\n  }\n\n  *filter(fn) {\n    for (const node of this.values()) {\n      if (fn(node)) {\n        yield node;\n      }\n    }\n  }\n\n  add(node) {\n    const root = super.get('');\n\n    if (root && node.root !== root && node.root !== root.root) {\n      debug(() => {\n        throw Object.assign(new Error('adding external node to inventory'), {\n          root: root.path,\n          node: node.path,\n          nodeRoot: node.root.path\n        });\n      });\n      return;\n    }\n\n    const current = super.get(node[this.primaryKey]);\n\n    if (current) {\n      if (current === node) {\n        return;\n      }\n\n      this.delete(current);\n    }\n\n    super.set(node[this.primaryKey], node);\n\n    for (const [key, map] of this[_index].entries()) {\n      // if the node has the value, but it's false, then use that\n      const val_ = hasOwnProperty.call(node, key) ? node[key] : key === 'license' ? getLicense(node.package) : node[key] ? node[key] : node.package && node.package[key];\n      const val = typeof val_ === 'string' ? val_ : !val_ || typeof val_ !== 'object' ? val_ : key === 'license' ? val_.type : key === 'funding' ? val_.url :\n      /* istanbul ignore next - not used */\n      val_;\n      const set = map.get(val) || new Set();\n      set.add(node);\n      map.set(val, set);\n    }\n  }\n\n  delete(node) {\n    if (!this.has(node)) {\n      return;\n    }\n\n    super.delete(node[this.primaryKey]);\n\n    for (const [key, map] of this[_index].entries()) {\n      const val = node[key] !== undefined ? node[key] : node[key] || node.package && node.package[key];\n      const set = map.get(val);\n\n      if (set) {\n        set.delete(node);\n\n        if (set.size === 0) {\n          map.delete(node[key]);\n        }\n      }\n    }\n  }\n\n  query(key, val) {\n    const map = this[_index].get(key);\n\n    return map && (arguments.length === 2 ? map.get(val) : map.keys()) || new Set();\n  }\n\n  has(node) {\n    return super.get(node[this.primaryKey]) === node;\n  }\n\n  set(k, v) {\n    throw new Error('direct set() not supported, use inventory.add(node)');\n  }\n\n}\n\nmodule.exports = Inventory;","map":{"version":3,"names":["_primaryKey","Symbol","_index","defaultKeys","hasOwnProperty","Object","prototype","debug","require","getLicense","pkg","lic","license","licence","lics","licenses","licences","Array","isArray","Inventory","Map","constructor","opt","primary","keys","reduce","index","i","set","primaryKey","indexes","filter","fn","node","values","add","root","get","assign","Error","path","nodeRoot","current","delete","key","map","entries","val_","call","package","val","type","url","Set","has","undefined","size","query","arguments","length","k","v","module","exports"],"sources":["/Users/chelsea/Documents/0_AllCoding/shoppingstories-v3/node_modules/npm/node_modules/@npmcli/arborist/lib/inventory.js"],"sourcesContent":["// a class to manage an inventory and set of indexes of\n// a set of objects based on specific fields.\n// primary is the primary index key.\n// keys is the set of fields to be able to query.\nconst _primaryKey = Symbol('_primaryKey')\nconst _index = Symbol('_index')\nconst defaultKeys = ['name', 'license', 'funding', 'realpath', 'packageName']\nconst { hasOwnProperty } = Object.prototype\nconst debug = require('./debug.js')\n\n// handling for the outdated \"licenses\" array, just pick the first one\n// also support the alternative spelling \"licence\"\nconst getLicense = pkg => {\n  if (pkg) {\n    const lic = pkg.license || pkg.licence\n    if (lic) {\n      return lic\n    }\n    const lics = pkg.licenses || pkg.licences\n    if (Array.isArray(lics)) {\n      return lics[0]\n    }\n  }\n}\n\nclass Inventory extends Map {\n  constructor (opt = {}) {\n    const { primary, keys } = opt\n    super()\n    this[_primaryKey] = primary || 'location'\n    this[_index] = (keys || defaultKeys).reduce((index, i) => {\n      index.set(i, new Map())\n      return index\n    }, new Map())\n  }\n\n  get primaryKey () {\n    return this[_primaryKey]\n  }\n\n  get indexes () {\n    return [...this[_index].keys()]\n  }\n\n  * filter (fn) {\n    for (const node of this.values()) {\n      if (fn(node)) {\n        yield node\n      }\n    }\n  }\n\n  add (node) {\n    const root = super.get('')\n    if (root && node.root !== root && node.root !== root.root) {\n      debug(() => {\n        throw Object.assign(new Error('adding external node to inventory'), {\n          root: root.path,\n          node: node.path,\n          nodeRoot: node.root.path,\n        })\n      })\n      return\n    }\n\n    const current = super.get(node[this.primaryKey])\n    if (current) {\n      if (current === node) {\n        return\n      }\n      this.delete(current)\n    }\n    super.set(node[this.primaryKey], node)\n    for (const [key, map] of this[_index].entries()) {\n      // if the node has the value, but it's false, then use that\n      const val_ = hasOwnProperty.call(node, key) ? node[key]\n        : key === 'license' ? getLicense(node.package)\n        : node[key] ? node[key]\n        : node.package && node.package[key]\n      const val = typeof val_ === 'string' ? val_\n        : !val_ || typeof val_ !== 'object' ? val_\n        : key === 'license' ? val_.type\n        : key === 'funding' ? val_.url\n        : /* istanbul ignore next - not used */ val_\n      const set = map.get(val) || new Set()\n      set.add(node)\n      map.set(val, set)\n    }\n  }\n\n  delete (node) {\n    if (!this.has(node)) {\n      return\n    }\n\n    super.delete(node[this.primaryKey])\n    for (const [key, map] of this[_index].entries()) {\n      const val = node[key] !== undefined ? node[key]\n        : (node[key] || (node.package && node.package[key]))\n      const set = map.get(val)\n      if (set) {\n        set.delete(node)\n        if (set.size === 0) {\n          map.delete(node[key])\n        }\n      }\n    }\n  }\n\n  query (key, val) {\n    const map = this[_index].get(key)\n    return map && (arguments.length === 2 ? map.get(val) : map.keys()) ||\n      new Set()\n  }\n\n  has (node) {\n    return super.get(node[this.primaryKey]) === node\n  }\n\n  set (k, v) {\n    throw new Error('direct set() not supported, use inventory.add(node)')\n  }\n}\n\nmodule.exports = Inventory\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}