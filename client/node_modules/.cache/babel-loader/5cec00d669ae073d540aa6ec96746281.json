{"ast":null,"code":"const colors = require('../colors.js');\n\nconst calculate = (data, _ref) => {\n  let {\n    color\n  } = _ref;\n  const c = colors(color);\n  const output = [];\n  const {\n    metadata: {\n      vulnerabilities\n    }\n  } = data;\n  const vulnCount = vulnerabilities.total;\n  let someFixable = false;\n  let someForceFixable = false;\n  let forceFixSemVerMajor = false;\n  let someUnfixable = false;\n\n  if (vulnCount === 0) {\n    output.push(`found ${c.green('0')} vulnerabilities`);\n  } else {\n    for (const [, vuln] of Object.entries(data.vulnerabilities)) {\n      const {\n        fixAvailable\n      } = vuln;\n      someFixable = someFixable || fixAvailable === true;\n      someUnfixable = someUnfixable || fixAvailable === false;\n\n      if (typeof fixAvailable === 'object') {\n        someForceFixable = true;\n        forceFixSemVerMajor = forceFixSemVerMajor || fixAvailable.isSemVerMajor;\n      }\n    }\n\n    const total = vulnerabilities.total;\n    const sevs = Object.entries(vulnerabilities).filter(_ref2 => {\n      let [s, count] = _ref2;\n      return (s === 'low' || s === 'moderate' || s === 'high' || s === 'critical') && count > 0;\n    });\n\n    if (sevs.length > 1) {\n      const severities = sevs.map(_ref3 => {\n        let [s, count] = _ref3;\n        return `${count} ${c.severity(s)}`;\n      }).join(', ');\n      output.push(`${c.red(total)} vulnerabilities (${severities})`);\n    } else {\n      const [sev, count] = sevs[0];\n      output.push(`${count} ${c.severity(sev)} severity vulnerabilit${count === 1 ? 'y' : 'ies'}`);\n    } // XXX use a different footer line if some aren't fixable easily.\n    // just 'run `npm audit` for details' maybe?\n\n\n    if (someFixable) {\n      output.push('', 'To address ' + (someForceFixable || someUnfixable ? 'issues that do not require attention' : 'all issues') + ', run:\\n  npm audit fix');\n    }\n\n    if (someForceFixable) {\n      output.push('', 'To address all issues' + (someUnfixable ? ' possible' : '') + (forceFixSemVerMajor ? ' (including breaking changes)' : '') + ', run:\\n  npm audit fix --force');\n    }\n\n    if (someUnfixable) {\n      output.push('', 'Some issues need review, and may require choosing', 'a different dependency.');\n    }\n  }\n\n  const summary = output.join('\\n');\n  return {\n    summary,\n    report: vulnCount > 0 ? `${summary}\\n\\nRun \\`npm audit\\` for details.` : summary\n  };\n};\n\nmodule.exports = Object.assign((data, opt) => calculate(data, opt).report, {\n  summary: (data, opt) => calculate(data, opt).summary\n});","map":{"version":3,"names":["colors","require","calculate","data","color","c","output","metadata","vulnerabilities","vulnCount","total","someFixable","someForceFixable","forceFixSemVerMajor","someUnfixable","push","green","vuln","Object","entries","fixAvailable","isSemVerMajor","sevs","filter","s","count","length","severities","map","severity","join","red","sev","summary","report","module","exports","assign","opt"],"sources":["/Users/chelsea/Documents/0_AllCoding/shoppingstories-v3/node_modules/npm/node_modules/npm-audit-report/lib/reporters/install.js"],"sourcesContent":["const colors = require('../colors.js')\n\nconst calculate = (data, { color }) => {\n  const c = colors(color)\n  const output = []\n  const { metadata: { vulnerabilities } } = data\n  const vulnCount = vulnerabilities.total\n\n  let someFixable = false\n  let someForceFixable = false\n  let forceFixSemVerMajor = false\n  let someUnfixable = false\n\n  if (vulnCount === 0) {\n    output.push(`found ${c.green('0')} vulnerabilities`)\n  } else {\n    for (const [, vuln] of Object.entries(data.vulnerabilities)) {\n      const { fixAvailable } = vuln\n      someFixable = someFixable || fixAvailable === true\n      someUnfixable = someUnfixable || fixAvailable === false\n      if (typeof fixAvailable === 'object') {\n        someForceFixable = true\n        forceFixSemVerMajor = forceFixSemVerMajor || fixAvailable.isSemVerMajor\n      }\n    }\n    const total = vulnerabilities.total\n    const sevs = Object.entries(vulnerabilities).filter(([s, count]) => {\n      return (s === 'low' || s === 'moderate' || s === 'high' || s === 'critical') &&\n        count > 0\n    })\n\n    if (sevs.length > 1) {\n      const severities = sevs.map(([s, count]) => {\n        return `${count} ${c.severity(s)}`\n      }).join(', ')\n      output.push(`${c.red(total)} vulnerabilities (${severities})`)\n    } else {\n      const [sev, count] = sevs[0]\n      output.push(`${count} ${c.severity(sev)} severity vulnerabilit${count === 1 ? 'y' : 'ies'}`)\n    }\n\n    // XXX use a different footer line if some aren't fixable easily.\n    // just 'run `npm audit` for details' maybe?\n\n    if (someFixable) {\n      output.push('', 'To address ' +\n        (someForceFixable || someUnfixable ? 'issues that do not require attention'\n        : 'all issues') + ', run:\\n  npm audit fix')\n    }\n\n    if (someForceFixable) {\n      output.push('', 'To address all issues' +\n        (someUnfixable ? ' possible' : '') +\n        (forceFixSemVerMajor ? ' (including breaking changes)' : '') +\n        ', run:\\n  npm audit fix --force')\n    }\n\n    if (someUnfixable) {\n      output.push('',\n        'Some issues need review, and may require choosing',\n        'a different dependency.')\n    }\n  }\n\n  const summary = output.join('\\n')\n  return {\n    summary,\n    report: vulnCount > 0 ? `${summary}\\n\\nRun \\`npm audit\\` for details.`\n    : summary,\n  }\n}\n\nmodule.exports = Object.assign((data, opt) => calculate(data, opt).report, {\n  summary: (data, opt) => calculate(data, opt).summary,\n})\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}