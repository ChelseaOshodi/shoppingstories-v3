{"ast":null,"code":"const pacote = require('pacote');\n\nconst libpack = require('libnpmpack');\n\nconst npa = require('npm-package-arg');\n\nconst log = require('../utils/log-shim');\n\nconst {\n  getContents,\n  logTar\n} = require('../utils/tar.js');\n\nconst BaseCommand = require('../base-command.js');\n\nclass Pack extends BaseCommand {\n  static description = 'Create a tarball from a package';\n  static name = 'pack';\n  static params = ['dry-run', 'json', 'pack-destination', 'workspace', 'workspaces', 'include-workspace-root'];\n  static usage = ['<package-spec>'];\n  static ignoreImplicitWorkspace = false;\n\n  async exec(args) {\n    if (args.length === 0) {\n      args = ['.'];\n    }\n\n    const unicode = this.npm.config.get('unicode');\n    const json = this.npm.config.get('json'); // Get the manifests and filenames first so we can bail early on manifest\n    // errors before making any tarballs\n\n    const manifests = [];\n\n    for (const arg of args) {\n      const spec = npa(arg);\n      const manifest = await pacote.manifest(spec, this.npm.flatOptions);\n\n      if (!manifest._id) {\n        throw new Error('Invalid package, must have name and version');\n      }\n\n      manifests.push({\n        arg,\n        manifest\n      });\n    } // Load tarball names up for printing afterward to isolate from the\n    // noise generated during packing\n\n\n    const tarballs = [];\n\n    for (const {\n      arg,\n      manifest\n    } of manifests) {\n      const tarballData = await libpack(arg, { ...this.npm.flatOptions,\n        prefix: this.npm.localPrefix,\n        workspaces: this.workspacePaths\n      });\n      const pkgContents = await getContents(manifest, tarballData);\n      tarballs.push(pkgContents);\n    }\n\n    if (json) {\n      this.npm.output(JSON.stringify(tarballs, null, 2));\n      return;\n    }\n\n    for (const tar of tarballs) {\n      logTar(tar, {\n        unicode\n      });\n      this.npm.output(tar.filename.replace(/^@/, '').replace(/\\//, '-'));\n    }\n  }\n\n  async execWorkspaces(args, filters) {\n    // If they either ask for nothing, or explicitly include '.' in the args,\n    // we effectively translate that into each workspace requested\n    const useWorkspaces = args.length === 0 || args.includes('.');\n\n    if (!useWorkspaces) {\n      log.warn('Ignoring workspaces for specified package(s)');\n      return this.exec(args);\n    }\n\n    await this.setWorkspaces(filters);\n    return this.exec([...this.workspacePaths, ...args.filter(a => a !== '.')]);\n  }\n\n}\n\nmodule.exports = Pack;","map":{"version":3,"names":["pacote","require","libpack","npa","log","getContents","logTar","BaseCommand","Pack","description","name","params","usage","ignoreImplicitWorkspace","exec","args","length","unicode","npm","config","get","json","manifests","arg","spec","manifest","flatOptions","_id","Error","push","tarballs","tarballData","prefix","localPrefix","workspaces","workspacePaths","pkgContents","output","JSON","stringify","tar","filename","replace","execWorkspaces","filters","useWorkspaces","includes","warn","setWorkspaces","filter","a","module","exports"],"sources":["/Users/chelsea/Documents/0_AllCoding/shoppingstories-v3/node_modules/npm/lib/commands/pack.js"],"sourcesContent":["const pacote = require('pacote')\nconst libpack = require('libnpmpack')\nconst npa = require('npm-package-arg')\nconst log = require('../utils/log-shim')\nconst { getContents, logTar } = require('../utils/tar.js')\nconst BaseCommand = require('../base-command.js')\n\nclass Pack extends BaseCommand {\n  static description = 'Create a tarball from a package'\n  static name = 'pack'\n  static params = [\n    'dry-run',\n    'json',\n    'pack-destination',\n    'workspace',\n    'workspaces',\n    'include-workspace-root',\n  ]\n\n  static usage = ['<package-spec>']\n  static ignoreImplicitWorkspace = false\n\n  async exec (args) {\n    if (args.length === 0) {\n      args = ['.']\n    }\n\n    const unicode = this.npm.config.get('unicode')\n    const json = this.npm.config.get('json')\n\n    // Get the manifests and filenames first so we can bail early on manifest\n    // errors before making any tarballs\n    const manifests = []\n    for (const arg of args) {\n      const spec = npa(arg)\n      const manifest = await pacote.manifest(spec, this.npm.flatOptions)\n      if (!manifest._id) {\n        throw new Error('Invalid package, must have name and version')\n      }\n      manifests.push({ arg, manifest })\n    }\n\n    // Load tarball names up for printing afterward to isolate from the\n    // noise generated during packing\n    const tarballs = []\n    for (const { arg, manifest } of manifests) {\n      const tarballData = await libpack(arg, {\n        ...this.npm.flatOptions,\n        prefix: this.npm.localPrefix,\n        workspaces: this.workspacePaths,\n      })\n      const pkgContents = await getContents(manifest, tarballData)\n      tarballs.push(pkgContents)\n    }\n\n    if (json) {\n      this.npm.output(JSON.stringify(tarballs, null, 2))\n      return\n    }\n\n    for (const tar of tarballs) {\n      logTar(tar, { unicode })\n      this.npm.output(tar.filename.replace(/^@/, '').replace(/\\//, '-'))\n    }\n  }\n\n  async execWorkspaces (args, filters) {\n    // If they either ask for nothing, or explicitly include '.' in the args,\n    // we effectively translate that into each workspace requested\n\n    const useWorkspaces = args.length === 0 || args.includes('.')\n\n    if (!useWorkspaces) {\n      log.warn('Ignoring workspaces for specified package(s)')\n      return this.exec(args)\n    }\n\n    await this.setWorkspaces(filters)\n    return this.exec([...this.workspacePaths, ...args.filter(a => a !== '.')])\n  }\n}\nmodule.exports = Pack\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}