{"ast":null,"code":"const {\n  resolve\n} = require('path');\n\nconst Arborist = require('@npmcli/arborist');\n\nconst npa = require('npm-package-arg');\n\nconst semver = require('semver');\n\nconst completion = require('../utils/completion/installed-deep.js');\n\nconst ArboristWorkspaceCmd = require('../arborist-cmd.js');\n\nclass Rebuild extends ArboristWorkspaceCmd {\n  static description = 'Rebuild a package';\n  static name = 'rebuild';\n  static params = ['global', 'bin-links', 'foreground-scripts', 'ignore-scripts', ...super.params];\n  static usage = ['[<package-spec>] ...]']; // TODO\n\n  /* istanbul ignore next */\n\n  async completion(opts) {\n    return completion(this.npm, opts);\n  }\n\n  async exec(args) {\n    const globalTop = resolve(this.npm.globalDir, '..');\n    const where = this.npm.global ? globalTop : this.npm.prefix;\n    const arb = new Arborist({ ...this.npm.flatOptions,\n      path: where // TODO when extending ReifyCmd\n      // workspaces: this.workspaceNames,\n\n    });\n\n    if (args.length) {\n      // get the set of nodes matching the name that we want rebuilt\n      const tree = await arb.loadActual();\n      const specs = args.map(arg => {\n        const spec = npa(arg);\n\n        if (spec.type === 'tag' && spec.rawSpec === '') {\n          return spec;\n        }\n\n        if (spec.type !== 'range' && spec.type !== 'version' && spec.type !== 'directory') {\n          throw new Error('`npm rebuild` only supports SemVer version/range specifiers');\n        }\n\n        return spec;\n      });\n      const nodes = tree.inventory.filter(node => this.isNode(specs, node));\n      await arb.rebuild({\n        nodes\n      });\n    } else {\n      await arb.rebuild();\n    }\n\n    this.npm.output('rebuilt dependencies successfully');\n  }\n\n  isNode(specs, node) {\n    return specs.some(spec => {\n      if (spec.type === 'directory') {\n        return node.path === spec.fetchSpec;\n      }\n\n      if (spec.name !== node.name) {\n        return false;\n      }\n\n      if (spec.rawSpec === '' || spec.rawSpec === '*') {\n        return true;\n      }\n\n      const {\n        version\n      } = node.package; // TODO: add tests for a package with missing version\n\n      return semver.satisfies(version, spec.fetchSpec);\n    });\n  }\n\n}\n\nmodule.exports = Rebuild;","map":{"version":3,"names":["resolve","require","Arborist","npa","semver","completion","ArboristWorkspaceCmd","Rebuild","description","name","params","usage","opts","npm","exec","args","globalTop","globalDir","where","global","prefix","arb","flatOptions","path","length","tree","loadActual","specs","map","arg","spec","type","rawSpec","Error","nodes","inventory","filter","node","isNode","rebuild","output","some","fetchSpec","version","package","satisfies","module","exports"],"sources":["/Users/chelsea/Documents/0_AllCoding/shoppingstories-v3/node_modules/npm/lib/commands/rebuild.js"],"sourcesContent":["const { resolve } = require('path')\nconst Arborist = require('@npmcli/arborist')\nconst npa = require('npm-package-arg')\nconst semver = require('semver')\nconst completion = require('../utils/completion/installed-deep.js')\n\nconst ArboristWorkspaceCmd = require('../arborist-cmd.js')\nclass Rebuild extends ArboristWorkspaceCmd {\n  static description = 'Rebuild a package'\n  static name = 'rebuild'\n  static params = [\n    'global',\n    'bin-links',\n    'foreground-scripts',\n    'ignore-scripts',\n    ...super.params,\n  ]\n\n  static usage = ['[<package-spec>] ...]']\n\n  // TODO\n  /* istanbul ignore next */\n  async completion (opts) {\n    return completion(this.npm, opts)\n  }\n\n  async exec (args) {\n    const globalTop = resolve(this.npm.globalDir, '..')\n    const where = this.npm.global ? globalTop : this.npm.prefix\n    const arb = new Arborist({\n      ...this.npm.flatOptions,\n      path: where,\n      // TODO when extending ReifyCmd\n      // workspaces: this.workspaceNames,\n    })\n\n    if (args.length) {\n      // get the set of nodes matching the name that we want rebuilt\n      const tree = await arb.loadActual()\n      const specs = args.map(arg => {\n        const spec = npa(arg)\n        if (spec.type === 'tag' && spec.rawSpec === '') {\n          return spec\n        }\n\n        if (spec.type !== 'range' && spec.type !== 'version' && spec.type !== 'directory') {\n          throw new Error('`npm rebuild` only supports SemVer version/range specifiers')\n        }\n\n        return spec\n      })\n      const nodes = tree.inventory.filter(node => this.isNode(specs, node))\n\n      await arb.rebuild({ nodes })\n    } else {\n      await arb.rebuild()\n    }\n\n    this.npm.output('rebuilt dependencies successfully')\n  }\n\n  isNode (specs, node) {\n    return specs.some(spec => {\n      if (spec.type === 'directory') {\n        return node.path === spec.fetchSpec\n      }\n\n      if (spec.name !== node.name) {\n        return false\n      }\n\n      if (spec.rawSpec === '' || spec.rawSpec === '*') {\n        return true\n      }\n\n      const { version } = node.package\n      // TODO: add tests for a package with missing version\n      return semver.satisfies(version, spec.fetchSpec)\n    })\n  }\n}\nmodule.exports = Rebuild\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}