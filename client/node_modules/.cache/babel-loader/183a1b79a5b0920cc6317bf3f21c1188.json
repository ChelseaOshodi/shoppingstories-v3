{"ast":null,"code":"const linkBins = require('./link-bins.js');\n\nconst linkMans = require('./link-mans.js');\n\nconst binLinks = opts => {\n  const {\n    path,\n    pkg,\n    force,\n    global,\n    top\n  } = opts; // global top pkgs on windows get bins installed in {prefix}, and no mans\n  //\n  // unix global top pkgs get their bins installed in {prefix}/bin,\n  // and mans in {prefix}/share/man\n  //\n  // non-top pkgs get their bins installed in {prefix}/node_modules/.bin,\n  // and do not install mans\n  //\n  // non-global top pkgs don't have any bins or mans linked.  From here on\n  // out, if it's top, we know that it's global, so no need to pass that\n  // option further down the stack.\n\n  if (top && !global) {\n    return Promise.resolve();\n  }\n\n  return Promise.all([// allow clobbering within the local node_modules/.bin folder.\n  // only global bins are protected in this way, or else it is\n  // yet another vector for excessive dependency conflicts.\n  linkBins({\n    path,\n    pkg,\n    top,\n    force: force || !top\n  }), linkMans({\n    path,\n    pkg,\n    top,\n    force\n  })]);\n};\n\nconst shimBin = require('./shim-bin.js');\n\nconst linkGently = require('./link-gently.js');\n\nconst resetSeen = () => {\n  shimBin.resetSeen();\n  linkGently.resetSeen();\n};\n\nconst checkBins = require('./check-bins.js');\n\nconst getPaths = require('./get-paths.js');\n\nmodule.exports = Object.assign(binLinks, {\n  checkBins,\n  resetSeen,\n  getPaths\n});","map":{"version":3,"names":["linkBins","require","linkMans","binLinks","opts","path","pkg","force","global","top","Promise","resolve","all","shimBin","linkGently","resetSeen","checkBins","getPaths","module","exports","Object","assign"],"sources":["/Users/chelsea/Documents/0_AllCoding/shoppingstories-v3/node_modules/npm/node_modules/bin-links/lib/index.js"],"sourcesContent":["const linkBins = require('./link-bins.js')\nconst linkMans = require('./link-mans.js')\n\nconst binLinks = opts => {\n  const { path, pkg, force, global, top } = opts\n  // global top pkgs on windows get bins installed in {prefix}, and no mans\n  //\n  // unix global top pkgs get their bins installed in {prefix}/bin,\n  // and mans in {prefix}/share/man\n  //\n  // non-top pkgs get their bins installed in {prefix}/node_modules/.bin,\n  // and do not install mans\n  //\n  // non-global top pkgs don't have any bins or mans linked.  From here on\n  // out, if it's top, we know that it's global, so no need to pass that\n  // option further down the stack.\n  if (top && !global) {\n    return Promise.resolve()\n  }\n\n  return Promise.all([\n    // allow clobbering within the local node_modules/.bin folder.\n    // only global bins are protected in this way, or else it is\n    // yet another vector for excessive dependency conflicts.\n    linkBins({ path, pkg, top, force: force || !top }),\n    linkMans({ path, pkg, top, force }),\n  ])\n}\n\nconst shimBin = require('./shim-bin.js')\nconst linkGently = require('./link-gently.js')\nconst resetSeen = () => {\n  shimBin.resetSeen()\n  linkGently.resetSeen()\n}\n\nconst checkBins = require('./check-bins.js')\nconst getPaths = require('./get-paths.js')\n\nmodule.exports = Object.assign(binLinks, {\n  checkBins,\n  resetSeen,\n  getPaths,\n})\n"],"mappings":"AAAA,MAAMA,QAAQ,GAAGC,OAAO,CAAC,gBAAD,CAAxB;;AACA,MAAMC,QAAQ,GAAGD,OAAO,CAAC,gBAAD,CAAxB;;AAEA,MAAME,QAAQ,GAAGC,IAAI,IAAI;EACvB,MAAM;IAAEC,IAAF;IAAQC,GAAR;IAAaC,KAAb;IAAoBC,MAApB;IAA4BC;EAA5B,IAAoCL,IAA1C,CADuB,CAEvB;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;;EACA,IAAIK,GAAG,IAAI,CAACD,MAAZ,EAAoB;IAClB,OAAOE,OAAO,CAACC,OAAR,EAAP;EACD;;EAED,OAAOD,OAAO,CAACE,GAAR,CAAY,CACjB;EACA;EACA;EACAZ,QAAQ,CAAC;IAAEK,IAAF;IAAQC,GAAR;IAAaG,GAAb;IAAkBF,KAAK,EAAEA,KAAK,IAAI,CAACE;EAAnC,CAAD,CAJS,EAKjBP,QAAQ,CAAC;IAAEG,IAAF;IAAQC,GAAR;IAAaG,GAAb;IAAkBF;EAAlB,CAAD,CALS,CAAZ,CAAP;AAOD,CAxBD;;AA0BA,MAAMM,OAAO,GAAGZ,OAAO,CAAC,eAAD,CAAvB;;AACA,MAAMa,UAAU,GAAGb,OAAO,CAAC,kBAAD,CAA1B;;AACA,MAAMc,SAAS,GAAG,MAAM;EACtBF,OAAO,CAACE,SAAR;EACAD,UAAU,CAACC,SAAX;AACD,CAHD;;AAKA,MAAMC,SAAS,GAAGf,OAAO,CAAC,iBAAD,CAAzB;;AACA,MAAMgB,QAAQ,GAAGhB,OAAO,CAAC,gBAAD,CAAxB;;AAEAiB,MAAM,CAACC,OAAP,GAAiBC,MAAM,CAACC,MAAP,CAAclB,QAAd,EAAwB;EACvCa,SADuC;EAEvCD,SAFuC;EAGvCE;AAHuC,CAAxB,CAAjB"},"metadata":{},"sourceType":"script"}