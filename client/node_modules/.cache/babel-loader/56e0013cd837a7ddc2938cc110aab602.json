{"ast":null,"code":"const os = require('os');\n\nconst log = require('./log-shim.js');\n\nconst errorMessage = require('./error-message.js');\n\nconst replaceInfo = require('./replace-info.js');\n\nconst messageText = msg => msg.map(line => line.slice(1).join(' ')).join('\\n');\n\nconst indent = val => Array.isArray(val) ? val.map(v => indent(v)) : `    ${val}`;\n\nlet npm = null; // set by the cli\n\nlet exitHandlerCalled = false;\nlet showLogFileError = false;\nprocess.on('exit', code => {\n  log.disableProgress(); // process.emit is synchronous, so the timeEnd handler will run before the\n  // unfinished timer check below\n\n  process.emit('timeEnd', 'npm');\n  const hasNpm = !!npm;\n  const hasLoadedNpm = hasNpm && npm.config.loaded; // Unfinished timers can be read before config load\n\n  if (hasNpm) {\n    for (const [name, timer] of npm.unfinishedTimers) {\n      log.verbose('unfinished npm timer', name, timer);\n    }\n  }\n\n  if (!code) {\n    log.info('ok');\n  } else {\n    log.verbose('code', code);\n  }\n\n  if (!exitHandlerCalled) {\n    process.exitCode = code || 1;\n    log.error('', 'Exit handler never called!'); // eslint-disable-next-line no-console\n\n    console.error('');\n    log.error('', 'This is an error with npm itself. Please report this error at:');\n    log.error('', '    <https://github.com/npm/cli/issues>');\n    showLogFileError = true;\n  } // npm must be loaded to know where the log file was written\n\n\n  if (hasLoadedNpm) {\n    // write the timing file now, this might do nothing based on the configs set.\n    // we need to call it here in case it errors so we dont tell the user\n    // about a timing file that doesn't exist\n    npm.writeTimingFile();\n    const logsDir = npm.logsDir;\n    const logFiles = npm.logFiles;\n    const timingDir = npm.timingDir;\n    const timingFile = npm.timingFile;\n    const timing = npm.config.get('timing');\n    const logsMax = npm.config.get('logs-max'); // Determine whether to show log file message and why it is\n    // being shown since in timing mode we always show the log file message\n\n    const logMethod = showLogFileError ? 'error' : timing ? 'info' : null;\n\n    if (logMethod) {\n      if (!npm.silent) {\n        // just a line break if not in silent mode\n        // eslint-disable-next-line no-console\n        console.error('');\n      }\n\n      const message = [];\n\n      if (timingFile) {\n        message.push('Timing info written to:', indent(timingFile));\n      } else if (timing) {\n        message.push(`The timing file was not written due to an error writing to the directory: ${timingDir}`);\n      }\n\n      if (logFiles.length) {\n        message.push('A complete log of this run can be found in:', ...indent(logFiles));\n      } else if (logsMax <= 0) {\n        // user specified no log file\n        message.push(`Log files were not written due to the config logs-max=${logsMax}`);\n      } else {\n        // could be an error writing to the directory\n        message.push(`Log files were not written due to an error writing to the directory: ${logsDir}`, 'You can rerun the command with `--loglevel=verbose` to see the logs in your terminal');\n      }\n\n      log[logMethod]('', message.join('\\n'));\n    } // This removes any listeners npm setup, mostly for tests to avoid max listener warnings\n\n\n    npm.unload();\n  } // these are needed for the tests to have a clean slate in each test case\n\n\n  exitHandlerCalled = false;\n  showLogFileError = false;\n});\n\nconst exitHandler = err => {\n  exitHandlerCalled = true;\n  log.disableProgress();\n  const hasNpm = !!npm;\n  const hasLoadedNpm = hasNpm && npm.config.loaded;\n\n  if (!hasNpm) {\n    err = err || new Error('Exit prior to setting npm in exit handler'); // eslint-disable-next-line no-console\n\n    console.error(err.stack || err.message);\n    return process.exit(1);\n  }\n\n  if (!hasLoadedNpm) {\n    err = err || new Error('Exit prior to config file resolving.'); // eslint-disable-next-line no-console\n\n    console.error(err.stack || err.message);\n  } // only show the notification if it finished.\n\n\n  if (typeof npm.updateNotification === 'string') {\n    const {\n      level\n    } = log;\n    log.level = 'notice';\n    log.notice('', npm.updateNotification);\n    log.level = level;\n  }\n\n  let exitCode;\n  let noLogMessage;\n\n  if (err) {\n    exitCode = 1; // if we got a command that just shells out to something else, then it\n    // will presumably print its own errors and exit with a proper status\n    // code if there's a problem.  If we got an error with a code=0, then...\n    // something else went wrong along the way, so maybe an npm problem?\n\n    const isShellout = npm.commandInstance && npm.commandInstance.constructor.isShellout;\n    const quietShellout = isShellout && typeof err.code === 'number' && err.code;\n\n    if (quietShellout) {\n      exitCode = err.code;\n      noLogMessage = true;\n    } else if (typeof err === 'string') {\n      // XXX: we should stop throwing strings\n      log.error('', err);\n      noLogMessage = true;\n    } else if (!(err instanceof Error)) {\n      log.error('weird error', err);\n      noLogMessage = true;\n    } else {\n      if (!err.code) {\n        const matchErrorCode = err.message.match(/^(?:Error: )?(E[A-Z]+)/);\n        err.code = matchErrorCode && matchErrorCode[1];\n      }\n\n      for (const k of ['type', 'stack', 'statusCode', 'pkgid']) {\n        const v = err[k];\n\n        if (v) {\n          log.verbose(k, replaceInfo(v));\n        }\n      }\n\n      log.verbose('cwd', process.cwd());\n      log.verbose('', os.type() + ' ' + os.release());\n      log.verbose('node', process.version);\n      log.verbose('npm ', 'v' + npm.version);\n\n      for (const k of ['code', 'syscall', 'file', 'path', 'dest', 'errno']) {\n        const v = err[k];\n\n        if (v) {\n          log.error(k, v);\n        }\n      }\n\n      const msg = errorMessage(err, npm);\n\n      for (const errline of [...msg.summary, ...msg.detail]) {\n        log.error(...errline);\n      }\n\n      if (hasLoadedNpm && npm.config.get('json')) {\n        const error = {\n          error: {\n            code: err.code,\n            summary: messageText(msg.summary),\n            detail: messageText(msg.detail)\n          }\n        };\n        npm.outputError(JSON.stringify(error, null, 2));\n      }\n\n      if (typeof err.errno === 'number') {\n        exitCode = err.errno;\n      } else if (typeof err.code === 'number') {\n        exitCode = err.code;\n      }\n    }\n  }\n\n  log.verbose('exit', exitCode || 0);\n  showLogFileError = hasLoadedNpm && npm.silent || noLogMessage ? false : !!exitCode; // explicitly call process.exit now so we don't hang on things like the\n  // update notifier, also flush stdout/err beforehand because process.exit doesn't\n  // wait for that to happen.\n\n  let flushed = 0;\n  const flush = [process.stderr, process.stdout];\n\n  const exit = () => ++flushed === flush.length && process.exit(exitCode);\n\n  flush.forEach(f => f.write('', exit));\n};\n\nmodule.exports = exitHandler;\n\nmodule.exports.setNpm = n => npm = n;","map":{"version":3,"names":["os","require","log","errorMessage","replaceInfo","messageText","msg","map","line","slice","join","indent","val","Array","isArray","v","npm","exitHandlerCalled","showLogFileError","process","on","code","disableProgress","emit","hasNpm","hasLoadedNpm","config","loaded","name","timer","unfinishedTimers","verbose","info","exitCode","error","console","writeTimingFile","logsDir","logFiles","timingDir","timingFile","timing","get","logsMax","logMethod","silent","message","push","length","unload","exitHandler","err","Error","stack","exit","updateNotification","level","notice","noLogMessage","isShellout","commandInstance","constructor","quietShellout","matchErrorCode","match","k","cwd","type","release","version","errline","summary","detail","outputError","JSON","stringify","errno","flushed","flush","stderr","stdout","forEach","f","write","module","exports","setNpm","n"],"sources":["/Users/chelsea/Documents/0_AllCoding/shoppingstories-v3/node_modules/npm/lib/utils/exit-handler.js"],"sourcesContent":["const os = require('os')\n\nconst log = require('./log-shim.js')\nconst errorMessage = require('./error-message.js')\nconst replaceInfo = require('./replace-info.js')\n\nconst messageText = msg => msg.map(line => line.slice(1).join(' ')).join('\\n')\nconst indent = (val) => Array.isArray(val) ? val.map(v => indent(v)) : `    ${val}`\n\nlet npm = null // set by the cli\nlet exitHandlerCalled = false\nlet showLogFileError = false\n\nprocess.on('exit', code => {\n  log.disableProgress()\n\n  // process.emit is synchronous, so the timeEnd handler will run before the\n  // unfinished timer check below\n  process.emit('timeEnd', 'npm')\n\n  const hasNpm = !!npm\n  const hasLoadedNpm = hasNpm && npm.config.loaded\n\n  // Unfinished timers can be read before config load\n  if (hasNpm) {\n    for (const [name, timer] of npm.unfinishedTimers) {\n      log.verbose('unfinished npm timer', name, timer)\n    }\n  }\n\n  if (!code) {\n    log.info('ok')\n  } else {\n    log.verbose('code', code)\n  }\n\n  if (!exitHandlerCalled) {\n    process.exitCode = code || 1\n    log.error('', 'Exit handler never called!')\n    // eslint-disable-next-line no-console\n    console.error('')\n    log.error('', 'This is an error with npm itself. Please report this error at:')\n    log.error('', '    <https://github.com/npm/cli/issues>')\n    showLogFileError = true\n  }\n\n  // npm must be loaded to know where the log file was written\n  if (hasLoadedNpm) {\n    // write the timing file now, this might do nothing based on the configs set.\n    // we need to call it here in case it errors so we dont tell the user\n    // about a timing file that doesn't exist\n    npm.writeTimingFile()\n\n    const logsDir = npm.logsDir\n    const logFiles = npm.logFiles\n\n    const timingDir = npm.timingDir\n    const timingFile = npm.timingFile\n\n    const timing = npm.config.get('timing')\n    const logsMax = npm.config.get('logs-max')\n\n    // Determine whether to show log file message and why it is\n    // being shown since in timing mode we always show the log file message\n    const logMethod = showLogFileError ? 'error' : timing ? 'info' : null\n\n    if (logMethod) {\n      if (!npm.silent) {\n        // just a line break if not in silent mode\n        // eslint-disable-next-line no-console\n        console.error('')\n      }\n\n      const message = []\n\n      if (timingFile) {\n        message.push('Timing info written to:', indent(timingFile))\n      } else if (timing) {\n        message.push(\n          `The timing file was not written due to an error writing to the directory: ${timingDir}`\n        )\n      }\n\n      if (logFiles.length) {\n        message.push('A complete log of this run can be found in:', ...indent(logFiles))\n      } else if (logsMax <= 0) {\n        // user specified no log file\n        message.push(`Log files were not written due to the config logs-max=${logsMax}`)\n      } else {\n        // could be an error writing to the directory\n        message.push(\n          `Log files were not written due to an error writing to the directory: ${logsDir}`,\n          'You can rerun the command with `--loglevel=verbose` to see the logs in your terminal'\n        )\n      }\n\n      log[logMethod]('', message.join('\\n'))\n    }\n\n    // This removes any listeners npm setup, mostly for tests to avoid max listener warnings\n    npm.unload()\n  }\n\n  // these are needed for the tests to have a clean slate in each test case\n  exitHandlerCalled = false\n  showLogFileError = false\n})\n\nconst exitHandler = err => {\n  exitHandlerCalled = true\n\n  log.disableProgress()\n\n  const hasNpm = !!npm\n  const hasLoadedNpm = hasNpm && npm.config.loaded\n\n  if (!hasNpm) {\n    err = err || new Error('Exit prior to setting npm in exit handler')\n    // eslint-disable-next-line no-console\n    console.error(err.stack || err.message)\n    return process.exit(1)\n  }\n\n  if (!hasLoadedNpm) {\n    err = err || new Error('Exit prior to config file resolving.')\n    // eslint-disable-next-line no-console\n    console.error(err.stack || err.message)\n  }\n\n  // only show the notification if it finished.\n  if (typeof npm.updateNotification === 'string') {\n    const { level } = log\n    log.level = 'notice'\n    log.notice('', npm.updateNotification)\n    log.level = level\n  }\n\n  let exitCode\n  let noLogMessage\n\n  if (err) {\n    exitCode = 1\n    // if we got a command that just shells out to something else, then it\n    // will presumably print its own errors and exit with a proper status\n    // code if there's a problem.  If we got an error with a code=0, then...\n    // something else went wrong along the way, so maybe an npm problem?\n    const isShellout = npm.commandInstance && npm.commandInstance.constructor.isShellout\n    const quietShellout = isShellout && typeof err.code === 'number' && err.code\n    if (quietShellout) {\n      exitCode = err.code\n      noLogMessage = true\n    } else if (typeof err === 'string') {\n      // XXX: we should stop throwing strings\n      log.error('', err)\n      noLogMessage = true\n    } else if (!(err instanceof Error)) {\n      log.error('weird error', err)\n      noLogMessage = true\n    } else {\n      if (!err.code) {\n        const matchErrorCode = err.message.match(/^(?:Error: )?(E[A-Z]+)/)\n        err.code = matchErrorCode && matchErrorCode[1]\n      }\n\n      for (const k of ['type', 'stack', 'statusCode', 'pkgid']) {\n        const v = err[k]\n        if (v) {\n          log.verbose(k, replaceInfo(v))\n        }\n      }\n\n      log.verbose('cwd', process.cwd())\n      log.verbose('', os.type() + ' ' + os.release())\n      log.verbose('node', process.version)\n      log.verbose('npm ', 'v' + npm.version)\n\n      for (const k of ['code', 'syscall', 'file', 'path', 'dest', 'errno']) {\n        const v = err[k]\n        if (v) {\n          log.error(k, v)\n        }\n      }\n\n      const msg = errorMessage(err, npm)\n      for (const errline of [...msg.summary, ...msg.detail]) {\n        log.error(...errline)\n      }\n\n      if (hasLoadedNpm && npm.config.get('json')) {\n        const error = {\n          error: {\n            code: err.code,\n            summary: messageText(msg.summary),\n            detail: messageText(msg.detail),\n          },\n        }\n        npm.outputError(JSON.stringify(error, null, 2))\n      }\n\n      if (typeof err.errno === 'number') {\n        exitCode = err.errno\n      } else if (typeof err.code === 'number') {\n        exitCode = err.code\n      }\n    }\n  }\n\n  log.verbose('exit', exitCode || 0)\n\n  showLogFileError = (hasLoadedNpm && npm.silent) || noLogMessage\n    ? false\n    : !!exitCode\n\n  // explicitly call process.exit now so we don't hang on things like the\n  // update notifier, also flush stdout/err beforehand because process.exit doesn't\n  // wait for that to happen.\n  let flushed = 0\n  const flush = [process.stderr, process.stdout]\n  const exit = () => ++flushed === flush.length && process.exit(exitCode)\n  flush.forEach((f) => f.write('', exit))\n}\n\nmodule.exports = exitHandler\nmodule.exports.setNpm = n => (npm = n)\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}