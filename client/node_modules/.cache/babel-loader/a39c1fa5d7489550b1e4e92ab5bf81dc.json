{"ast":null,"code":"// we know it's global and/or not top, so the path has to be\n// {prefix}/node_modules/{name}.  Can't rely on pkg.name, because\n// it might be installed as an alias.\nconst {\n  dirname,\n  basename\n} = require('path'); // this gets called a lot and can't change, so memoize it\n\n\nconst memo = new Map();\n\nmodule.exports = path => {\n  if (memo.has(path)) {\n    return memo.get(path);\n  }\n\n  const scopeOrNm = dirname(path);\n  const nm = basename(scopeOrNm) === 'node_modules' ? scopeOrNm : dirname(scopeOrNm);\n  memo.set(path, nm);\n  return nm;\n};","map":{"version":3,"names":["dirname","basename","require","memo","Map","module","exports","path","has","get","scopeOrNm","nm","set"],"sources":["/Users/chelsea/Documents/0_AllCoding/shoppingstories-v3/node_modules/npm/node_modules/bin-links/lib/get-node-modules.js"],"sourcesContent":["// we know it's global and/or not top, so the path has to be\n// {prefix}/node_modules/{name}.  Can't rely on pkg.name, because\n// it might be installed as an alias.\n\nconst { dirname, basename } = require('path')\n// this gets called a lot and can't change, so memoize it\nconst memo = new Map()\nmodule.exports = path => {\n  if (memo.has(path)) {\n    return memo.get(path)\n  }\n\n  const scopeOrNm = dirname(path)\n  const nm = basename(scopeOrNm) === 'node_modules' ? scopeOrNm\n    : dirname(scopeOrNm)\n\n  memo.set(path, nm)\n  return nm\n}\n"],"mappings":"AAAA;AACA;AACA;AAEA,MAAM;EAAEA,OAAF;EAAWC;AAAX,IAAwBC,OAAO,CAAC,MAAD,CAArC,C,CACA;;;AACA,MAAMC,IAAI,GAAG,IAAIC,GAAJ,EAAb;;AACAC,MAAM,CAACC,OAAP,GAAiBC,IAAI,IAAI;EACvB,IAAIJ,IAAI,CAACK,GAAL,CAASD,IAAT,CAAJ,EAAoB;IAClB,OAAOJ,IAAI,CAACM,GAAL,CAASF,IAAT,CAAP;EACD;;EAED,MAAMG,SAAS,GAAGV,OAAO,CAACO,IAAD,CAAzB;EACA,MAAMI,EAAE,GAAGV,QAAQ,CAACS,SAAD,CAAR,KAAwB,cAAxB,GAAyCA,SAAzC,GACPV,OAAO,CAACU,SAAD,CADX;EAGAP,IAAI,CAACS,GAAL,CAASL,IAAT,EAAeI,EAAf;EACA,OAAOA,EAAP;AACD,CAXD"},"metadata":{},"sourceType":"script"}