{"ast":null,"code":"// compares the inventory of package items in the tree\n// that is about to be installed (idealTree) with the inventory\n// of items stored in the package-lock file (virtualTree)\n//\n// Returns empty array if no errors found or an array populated\n// with an entry for each validation error found.\nfunction validateLockfile(virtualTree, idealTree) {\n  const errors = []; // loops through the inventory of packages resulted by ideal tree,\n  // for each package compares the versions with the version stored in the\n  // package-lock and adds an error to the list in case of mismatches\n\n  for (const [key, entry] of idealTree.entries()) {\n    const lock = virtualTree.get(key);\n\n    if (!lock) {\n      errors.push(`Missing: ${entry.name}@${entry.version} from lock file`);\n      continue;\n    }\n\n    if (entry.version !== lock.version) {\n      errors.push(`Invalid: lock file's ${lock.name}@${lock.version} does ` + `not satisfy ${entry.name}@${entry.version}`);\n    }\n  }\n\n  return errors;\n}\n\nmodule.exports = validateLockfile;","map":{"version":3,"names":["validateLockfile","virtualTree","idealTree","errors","key","entry","entries","lock","get","push","name","version","module","exports"],"sources":["/Users/chelsea/Documents/0_AllCoding/shoppingstories-v3/node_modules/npm/lib/utils/validate-lockfile.js"],"sourcesContent":["// compares the inventory of package items in the tree\n// that is about to be installed (idealTree) with the inventory\n// of items stored in the package-lock file (virtualTree)\n//\n// Returns empty array if no errors found or an array populated\n// with an entry for each validation error found.\nfunction validateLockfile (virtualTree, idealTree) {\n  const errors = []\n\n  // loops through the inventory of packages resulted by ideal tree,\n  // for each package compares the versions with the version stored in the\n  // package-lock and adds an error to the list in case of mismatches\n  for (const [key, entry] of idealTree.entries()) {\n    const lock = virtualTree.get(key)\n\n    if (!lock) {\n      errors.push(`Missing: ${entry.name}@${entry.version} from lock file`)\n      continue\n    }\n\n    if (entry.version !== lock.version) {\n      errors.push(`Invalid: lock file's ${lock.name}@${lock.version} does ` +\n      `not satisfy ${entry.name}@${entry.version}`)\n    }\n  }\n  return errors\n}\n\nmodule.exports = validateLockfile\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA,SAASA,gBAAT,CAA2BC,WAA3B,EAAwCC,SAAxC,EAAmD;EACjD,MAAMC,MAAM,GAAG,EAAf,CADiD,CAGjD;EACA;EACA;;EACA,KAAK,MAAM,CAACC,GAAD,EAAMC,KAAN,CAAX,IAA2BH,SAAS,CAACI,OAAV,EAA3B,EAAgD;IAC9C,MAAMC,IAAI,GAAGN,WAAW,CAACO,GAAZ,CAAgBJ,GAAhB,CAAb;;IAEA,IAAI,CAACG,IAAL,EAAW;MACTJ,MAAM,CAACM,IAAP,CAAa,YAAWJ,KAAK,CAACK,IAAK,IAAGL,KAAK,CAACM,OAAQ,iBAApD;MACA;IACD;;IAED,IAAIN,KAAK,CAACM,OAAN,KAAkBJ,IAAI,CAACI,OAA3B,EAAoC;MAClCR,MAAM,CAACM,IAAP,CAAa,wBAAuBF,IAAI,CAACG,IAAK,IAAGH,IAAI,CAACI,OAAQ,QAAlD,GACX,eAAcN,KAAK,CAACK,IAAK,IAAGL,KAAK,CAACM,OAAQ,EAD3C;IAED;EACF;;EACD,OAAOR,MAAP;AACD;;AAEDS,MAAM,CAACC,OAAP,GAAiBb,gBAAjB"},"metadata":{},"sourceType":"script"}