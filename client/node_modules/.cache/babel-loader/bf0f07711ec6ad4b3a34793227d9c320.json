{"ast":null,"code":"const {\n  promisify\n} = require('util');\n\nconst readAsync = promisify(require('read'));\n\nconst userValidate = require('npm-user-validate');\n\nconst log = require('./log-shim.js');\n\nexports.otp = readOTP;\nexports.password = readPassword;\nexports.username = readUsername;\nexports.email = readEmail;\nconst otpPrompt = `This command requires a one-time password (OTP) from your authenticator app.\nEnter one below. You can also pass one on the command line by appending --otp=123456.\nFor more information, see:\nhttps://docs.npmjs.com/getting-started/using-two-factor-authentication\nEnter OTP: `;\nconst passwordPrompt = 'npm password: ';\nconst usernamePrompt = 'npm username: ';\nconst emailPrompt = 'email (this IS public): ';\n\nfunction read(opts) {\n  log.clearProgress();\n  return readAsync(opts).finally(() => log.showProgress());\n}\n\nfunction readOTP() {\n  let msg = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : otpPrompt;\n  let otp = arguments.length > 1 ? arguments[1] : undefined;\n  let isRetry = arguments.length > 2 ? arguments[2] : undefined;\n\n  if (isRetry && otp && /^[\\d ]+$|^[A-Fa-f0-9]{64,64}$/.test(otp)) {\n    return otp.replace(/\\s+/g, '');\n  }\n\n  return read({\n    prompt: msg,\n    default: otp || ''\n  }).then(otp => readOTP(msg, otp, true));\n}\n\nfunction readPassword() {\n  let msg = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : passwordPrompt;\n  let password = arguments.length > 1 ? arguments[1] : undefined;\n  let isRetry = arguments.length > 2 ? arguments[2] : undefined;\n\n  if (isRetry && password) {\n    return password;\n  }\n\n  return read({\n    prompt: msg,\n    silent: true,\n    default: password || ''\n  }).then(password => readPassword(msg, password, true));\n}\n\nfunction readUsername() {\n  let msg = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : usernamePrompt;\n  let username = arguments.length > 1 ? arguments[1] : undefined;\n  let isRetry = arguments.length > 2 ? arguments[2] : undefined;\n\n  if (isRetry && username) {\n    const error = userValidate.username(username);\n\n    if (error) {\n      log.warn(error.message);\n    } else {\n      return Promise.resolve(username.trim());\n    }\n  }\n\n  return read({\n    prompt: msg,\n    default: username || ''\n  }).then(username => readUsername(msg, username, true));\n}\n\nfunction readEmail() {\n  let msg = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : emailPrompt;\n  let email = arguments.length > 1 ? arguments[1] : undefined;\n  let isRetry = arguments.length > 2 ? arguments[2] : undefined;\n\n  if (isRetry && email) {\n    const error = userValidate.email(email);\n\n    if (error) {\n      log.warn(error.message);\n    } else {\n      return email.trim();\n    }\n  }\n\n  return read({\n    prompt: msg,\n    default: email || ''\n  }).then(username => readEmail(msg, username, true));\n}","map":{"version":3,"names":["promisify","require","readAsync","userValidate","log","exports","otp","readOTP","password","readPassword","username","readUsername","email","readEmail","otpPrompt","passwordPrompt","usernamePrompt","emailPrompt","read","opts","clearProgress","finally","showProgress","msg","isRetry","test","replace","prompt","default","then","silent","error","warn","message","Promise","resolve","trim"],"sources":["/Users/chelsea/Documents/0_AllCoding/shoppingstories-v3/node_modules/npm/lib/utils/read-user-info.js"],"sourcesContent":["const { promisify } = require('util')\nconst readAsync = promisify(require('read'))\nconst userValidate = require('npm-user-validate')\nconst log = require('./log-shim.js')\n\nexports.otp = readOTP\nexports.password = readPassword\nexports.username = readUsername\nexports.email = readEmail\n\nconst otpPrompt = `This command requires a one-time password (OTP) from your authenticator app.\nEnter one below. You can also pass one on the command line by appending --otp=123456.\nFor more information, see:\nhttps://docs.npmjs.com/getting-started/using-two-factor-authentication\nEnter OTP: `\nconst passwordPrompt = 'npm password: '\nconst usernamePrompt = 'npm username: '\nconst emailPrompt = 'email (this IS public): '\n\nfunction read (opts) {\n  log.clearProgress()\n  return readAsync(opts).finally(() => log.showProgress())\n}\n\nfunction readOTP (msg = otpPrompt, otp, isRetry) {\n  if (isRetry && otp && /^[\\d ]+$|^[A-Fa-f0-9]{64,64}$/.test(otp)) {\n    return otp.replace(/\\s+/g, '')\n  }\n\n  return read({ prompt: msg, default: otp || '' })\n    .then((otp) => readOTP(msg, otp, true))\n}\n\nfunction readPassword (msg = passwordPrompt, password, isRetry) {\n  if (isRetry && password) {\n    return password\n  }\n\n  return read({ prompt: msg, silent: true, default: password || '' })\n    .then((password) => readPassword(msg, password, true))\n}\n\nfunction readUsername (msg = usernamePrompt, username, isRetry) {\n  if (isRetry && username) {\n    const error = userValidate.username(username)\n    if (error) {\n      log.warn(error.message)\n    } else {\n      return Promise.resolve(username.trim())\n    }\n  }\n\n  return read({ prompt: msg, default: username || '' })\n    .then((username) => readUsername(msg, username, true))\n}\n\nfunction readEmail (msg = emailPrompt, email, isRetry) {\n  if (isRetry && email) {\n    const error = userValidate.email(email)\n    if (error) {\n      log.warn(error.message)\n    } else {\n      return email.trim()\n    }\n  }\n\n  return read({ prompt: msg, default: email || '' })\n    .then((username) => readEmail(msg, username, true))\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}