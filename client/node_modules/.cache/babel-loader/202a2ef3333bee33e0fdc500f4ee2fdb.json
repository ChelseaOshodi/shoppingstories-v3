{"ast":null,"code":"const {\n  basename,\n  extname\n} = require('path');\n\nconst binaryExtensions = require('binary-extensions'); // we should try to print patches as long as the\n// extension is not identified as binary files\n\n\nconst shouldPrintPatch = function (path) {\n  let opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n  if (opts.diffText) {\n    return true;\n  }\n\n  const filename = basename(path);\n  const extension = (filename.startsWith('.') ? filename : extname(filename)).slice(1);\n  return !binaryExtensions.includes(extension);\n};\n\nmodule.exports = shouldPrintPatch;","map":{"version":3,"names":["basename","extname","require","binaryExtensions","shouldPrintPatch","path","opts","diffText","filename","extension","startsWith","slice","includes","module","exports"],"sources":["/Users/chelsea/Documents/0_AllCoding/shoppingstories-v3/node_modules/npm/node_modules/libnpmdiff/lib/should-print-patch.js"],"sourcesContent":["const { basename, extname } = require('path')\n\nconst binaryExtensions = require('binary-extensions')\n\n// we should try to print patches as long as the\n// extension is not identified as binary files\nconst shouldPrintPatch = (path, opts = {}) => {\n  if (opts.diffText) {\n    return true\n  }\n\n  const filename = basename(path)\n  const extension = (\n    filename.startsWith('.')\n      ? filename\n      : extname(filename)\n  ).slice(1)\n\n  return !binaryExtensions.includes(extension)\n}\n\nmodule.exports = shouldPrintPatch\n"],"mappings":"AAAA,MAAM;EAAEA,QAAF;EAAYC;AAAZ,IAAwBC,OAAO,CAAC,MAAD,CAArC;;AAEA,MAAMC,gBAAgB,GAAGD,OAAO,CAAC,mBAAD,CAAhC,C,CAEA;AACA;;;AACA,MAAME,gBAAgB,GAAG,UAACC,IAAD,EAAqB;EAAA,IAAdC,IAAc,uEAAP,EAAO;;EAC5C,IAAIA,IAAI,CAACC,QAAT,EAAmB;IACjB,OAAO,IAAP;EACD;;EAED,MAAMC,QAAQ,GAAGR,QAAQ,CAACK,IAAD,CAAzB;EACA,MAAMI,SAAS,GAAG,CAChBD,QAAQ,CAACE,UAAT,CAAoB,GAApB,IACIF,QADJ,GAEIP,OAAO,CAACO,QAAD,CAHK,EAIhBG,KAJgB,CAIV,CAJU,CAAlB;EAMA,OAAO,CAACR,gBAAgB,CAACS,QAAjB,CAA0BH,SAA1B,CAAR;AACD,CAbD;;AAeAI,MAAM,CAACC,OAAP,GAAiBV,gBAAjB"},"metadata":{},"sourceType":"script"}