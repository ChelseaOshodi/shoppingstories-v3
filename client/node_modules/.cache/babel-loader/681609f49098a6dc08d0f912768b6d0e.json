{"ast":null,"code":"// Separated out for easier unit testing\nmodule.exports = async process => {\n  // set it here so that regardless of what happens later, we don't\n  // leak any private CLI configs to other programs\n  process.title = 'npm'; // We used to differentiate between known broken and unsupported\n  // versions of node and attempt to only log unsupported but still run.\n  // After we dropped node 10 support, we can use new features\n  // (like static, private, etc) which will only give vague syntax errors,\n  // so now both broken and unsupported use console, but only broken\n  // will process.exit. It is important to now perform *both* of these\n  // checks as early as possible so the user gets the error message.\n\n  const semver = require('semver');\n\n  const supported = require('../package.json').engines.node;\n\n  const knownBroken = '<12.5.0';\n  const nodejsVersion = process.version.replace(/-.*$/, '');\n  /* eslint-disable no-console */\n\n  if (semver.satisfies(nodejsVersion, knownBroken)) {\n    console.error('ERROR: npm is known not to run on Node.js ' + process.version);\n    console.error(\"You'll need to upgrade to a newer Node.js version in order to use this\");\n    console.error('version of npm. You can find the latest version at https://nodejs.org/');\n    process.exit(1);\n  }\n\n  if (!semver.satisfies(nodejsVersion, supported)) {\n    console.error('npm does not support Node.js ' + process.version);\n    console.error('You should probably upgrade to a newer version of node as we');\n    console.error(\"can't make any promises that npm will work with this version.\");\n    console.error('You can find the latest version at https://nodejs.org/');\n  }\n  /* eslint-enable no-console */\n\n\n  const exitHandler = require('./utils/exit-handler.js');\n\n  process.on('uncaughtException', exitHandler);\n  process.on('unhandledRejection', exitHandler);\n\n  const Npm = require('./npm.js');\n\n  const npm = new Npm();\n  exitHandler.setNpm(npm); // if npm is called as \"npmg\" or \"npm_g\", then\n  // run in global mode.\n\n  if (process.argv[1][process.argv[1].length - 1] === 'g') {\n    process.argv.splice(1, 1, 'npm', '-g');\n  }\n\n  const log = require('./utils/log-shim.js'); // only log node and npm paths in argv initially since argv can contain\n  // sensitive info. a cleaned version will be logged later\n\n\n  log.verbose('cli', process.argv.slice(0, 2).join(' '));\n  log.info('using', 'npm@%s', npm.version);\n  log.info('using', 'node@%s', process.version);\n  let cmd; // now actually fire up npm and run the command.\n  // this is how to use npm programmatically:\n\n  try {\n    await npm.load();\n\n    if (npm.config.get('version', 'cli')) {\n      npm.output(npm.version);\n      return exitHandler();\n    } // npm --versions=cli\n\n\n    if (npm.config.get('versions', 'cli')) {\n      npm.argv = ['version'];\n      npm.config.set('usage', false, 'cli');\n    }\n\n    cmd = npm.argv.shift();\n\n    if (!cmd) {\n      npm.output(await npm.usage);\n      process.exitCode = 1;\n      return exitHandler();\n    }\n\n    await npm.exec(cmd, npm.argv);\n    return exitHandler();\n  } catch (err) {\n    if (err.code === 'EUNKNOWNCOMMAND') {\n      const didYouMean = require('./utils/did-you-mean.js');\n\n      const suggestions = await didYouMean(npm, npm.localPrefix, cmd);\n      npm.output(`Unknown command: \"${cmd}\"${suggestions}\\n`);\n      npm.output('To see a list of supported npm commands, run:\\n  npm help');\n      process.exitCode = 1;\n      return exitHandler();\n    }\n\n    return exitHandler(err);\n  }\n};","map":{"version":3,"names":["module","exports","process","title","semver","require","supported","engines","node","knownBroken","nodejsVersion","version","replace","satisfies","console","error","exit","exitHandler","on","Npm","npm","setNpm","argv","length","splice","log","verbose","slice","join","info","cmd","load","config","get","output","set","shift","usage","exitCode","exec","err","code","didYouMean","suggestions","localPrefix"],"sources":["/Users/chelsea/Documents/0_AllCoding/shoppingstories-v3/node_modules/npm/lib/cli.js"],"sourcesContent":["// Separated out for easier unit testing\nmodule.exports = async process => {\n  // set it here so that regardless of what happens later, we don't\n  // leak any private CLI configs to other programs\n  process.title = 'npm'\n\n  // We used to differentiate between known broken and unsupported\n  // versions of node and attempt to only log unsupported but still run.\n  // After we dropped node 10 support, we can use new features\n  // (like static, private, etc) which will only give vague syntax errors,\n  // so now both broken and unsupported use console, but only broken\n  // will process.exit. It is important to now perform *both* of these\n  // checks as early as possible so the user gets the error message.\n  const semver = require('semver')\n  const supported = require('../package.json').engines.node\n  const knownBroken = '<12.5.0'\n\n  const nodejsVersion = process.version.replace(/-.*$/, '')\n  /* eslint-disable no-console */\n  if (semver.satisfies(nodejsVersion, knownBroken)) {\n    console.error('ERROR: npm is known not to run on Node.js ' + process.version)\n    console.error(\"You'll need to upgrade to a newer Node.js version in order to use this\")\n    console.error('version of npm. You can find the latest version at https://nodejs.org/')\n    process.exit(1)\n  }\n  if (!semver.satisfies(nodejsVersion, supported)) {\n    console.error('npm does not support Node.js ' + process.version)\n    console.error('You should probably upgrade to a newer version of node as we')\n    console.error(\"can't make any promises that npm will work with this version.\")\n    console.error('You can find the latest version at https://nodejs.org/')\n  }\n  /* eslint-enable no-console */\n\n  const exitHandler = require('./utils/exit-handler.js')\n  process.on('uncaughtException', exitHandler)\n  process.on('unhandledRejection', exitHandler)\n\n  const Npm = require('./npm.js')\n  const npm = new Npm()\n  exitHandler.setNpm(npm)\n\n  // if npm is called as \"npmg\" or \"npm_g\", then\n  // run in global mode.\n  if (process.argv[1][process.argv[1].length - 1] === 'g') {\n    process.argv.splice(1, 1, 'npm', '-g')\n  }\n\n  const log = require('./utils/log-shim.js')\n  // only log node and npm paths in argv initially since argv can contain\n  // sensitive info. a cleaned version will be logged later\n  log.verbose('cli', process.argv.slice(0, 2).join(' '))\n  log.info('using', 'npm@%s', npm.version)\n  log.info('using', 'node@%s', process.version)\n\n  let cmd\n  // now actually fire up npm and run the command.\n  // this is how to use npm programmatically:\n  try {\n    await npm.load()\n    if (npm.config.get('version', 'cli')) {\n      npm.output(npm.version)\n      return exitHandler()\n    }\n\n    // npm --versions=cli\n    if (npm.config.get('versions', 'cli')) {\n      npm.argv = ['version']\n      npm.config.set('usage', false, 'cli')\n    }\n\n    cmd = npm.argv.shift()\n    if (!cmd) {\n      npm.output(await npm.usage)\n      process.exitCode = 1\n      return exitHandler()\n    }\n\n    await npm.exec(cmd, npm.argv)\n    return exitHandler()\n  } catch (err) {\n    if (err.code === 'EUNKNOWNCOMMAND') {\n      const didYouMean = require('./utils/did-you-mean.js')\n      const suggestions = await didYouMean(npm, npm.localPrefix, cmd)\n      npm.output(`Unknown command: \"${cmd}\"${suggestions}\\n`)\n      npm.output('To see a list of supported npm commands, run:\\n  npm help')\n      process.exitCode = 1\n      return exitHandler()\n    }\n    return exitHandler(err)\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}