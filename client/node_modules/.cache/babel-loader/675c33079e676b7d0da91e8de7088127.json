{"ast":null,"code":"// Perform a breadth-first walk of a tree, either logical or physical\n// This one only visits, it doesn't leave.  That's because\n// in a breadth-first traversal, children may be visited long\n// after their parent, so the \"exit\" pass ends up being just\n// another breadth-first walk.\n//\n// Breadth-first traversals are good for either creating a tree (ie,\n// reifying a dep graph based on a package.json without a node_modules\n// or package-lock), or mutating it in-place.  For a map-reduce type of\n// walk, it doesn't make a lot of sense, and is very expensive.\nconst breadth = _ref => {\n  let {\n    visit,\n    filter = () => true,\n    getChildren,\n    tree\n  } = _ref;\n  const queue = [];\n  const seen = new Map();\n\n  const next = () => {\n    while (queue.length) {\n      const node = queue.shift();\n      const res = visitNode(node);\n\n      if (isPromise(res)) {\n        return res.then(() => next());\n      }\n    }\n\n    return seen.get(tree);\n  };\n\n  const visitNode = visitTree => {\n    if (seen.has(visitTree)) {\n      return seen.get(visitTree);\n    }\n\n    seen.set(visitTree, null);\n    const res = visit ? visit(visitTree) : visitTree;\n\n    if (isPromise(res)) {\n      const fullResult = res.then(resThen => {\n        seen.set(visitTree, resThen);\n        return kidNodes(visitTree);\n      });\n      seen.set(visitTree, fullResult);\n      return fullResult;\n    } else {\n      seen.set(visitTree, res);\n      return kidNodes(visitTree);\n    }\n  };\n\n  const kidNodes = kidTree => {\n    const kids = getChildren(kidTree, seen.get(kidTree));\n    return isPromise(kids) ? kids.then(processKids) : processKids(kids);\n  };\n\n  const processKids = kids => {\n    kids = (kids || []).filter(filter);\n    queue.push(...kids);\n  };\n\n  queue.push(tree);\n  return next();\n};\n\nconst isPromise = p => p && typeof p.then === 'function';\n\nmodule.exports = breadth;","map":{"version":3,"names":["breadth","visit","filter","getChildren","tree","queue","seen","Map","next","length","node","shift","res","visitNode","isPromise","then","get","visitTree","has","set","fullResult","resThen","kidNodes","kidTree","kids","processKids","push","p","module","exports"],"sources":["/Users/chelsea/Documents/0_AllCoding/shoppingstories-v3/node_modules/npm/node_modules/treeverse/lib/breadth.js"],"sourcesContent":["// Perform a breadth-first walk of a tree, either logical or physical\n// This one only visits, it doesn't leave.  That's because\n// in a breadth-first traversal, children may be visited long\n// after their parent, so the \"exit\" pass ends up being just\n// another breadth-first walk.\n//\n// Breadth-first traversals are good for either creating a tree (ie,\n// reifying a dep graph based on a package.json without a node_modules\n// or package-lock), or mutating it in-place.  For a map-reduce type of\n// walk, it doesn't make a lot of sense, and is very expensive.\nconst breadth = ({\n  visit,\n  filter = () => true,\n  getChildren,\n  tree,\n}) => {\n  const queue = []\n  const seen = new Map()\n\n  const next = () => {\n    while (queue.length) {\n      const node = queue.shift()\n      const res = visitNode(node)\n      if (isPromise(res)) {\n        return res.then(() => next())\n      }\n    }\n    return seen.get(tree)\n  }\n\n  const visitNode = (visitTree) => {\n    if (seen.has(visitTree)) {\n      return seen.get(visitTree)\n    }\n\n    seen.set(visitTree, null)\n    const res = visit ? visit(visitTree) : visitTree\n    if (isPromise(res)) {\n      const fullResult = res.then(resThen => {\n        seen.set(visitTree, resThen)\n        return kidNodes(visitTree)\n      })\n      seen.set(visitTree, fullResult)\n      return fullResult\n    } else {\n      seen.set(visitTree, res)\n      return kidNodes(visitTree)\n    }\n  }\n\n  const kidNodes = (kidTree) => {\n    const kids = getChildren(kidTree, seen.get(kidTree))\n    return isPromise(kids) ? kids.then(processKids) : processKids(kids)\n  }\n\n  const processKids = (kids) => {\n    kids = (kids || []).filter(filter)\n    queue.push(...kids)\n  }\n\n  queue.push(tree)\n  return next()\n}\n\nconst isPromise = p => p && typeof p.then === 'function'\n\nmodule.exports = breadth\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAMA,OAAO,GAAG,QAKV;EAAA,IALW;IACfC,KADe;IAEfC,MAAM,GAAG,MAAM,IAFA;IAGfC,WAHe;IAIfC;EAJe,CAKX;EACJ,MAAMC,KAAK,GAAG,EAAd;EACA,MAAMC,IAAI,GAAG,IAAIC,GAAJ,EAAb;;EAEA,MAAMC,IAAI,GAAG,MAAM;IACjB,OAAOH,KAAK,CAACI,MAAb,EAAqB;MACnB,MAAMC,IAAI,GAAGL,KAAK,CAACM,KAAN,EAAb;MACA,MAAMC,GAAG,GAAGC,SAAS,CAACH,IAAD,CAArB;;MACA,IAAII,SAAS,CAACF,GAAD,CAAb,EAAoB;QAClB,OAAOA,GAAG,CAACG,IAAJ,CAAS,MAAMP,IAAI,EAAnB,CAAP;MACD;IACF;;IACD,OAAOF,IAAI,CAACU,GAAL,CAASZ,IAAT,CAAP;EACD,CATD;;EAWA,MAAMS,SAAS,GAAII,SAAD,IAAe;IAC/B,IAAIX,IAAI,CAACY,GAAL,CAASD,SAAT,CAAJ,EAAyB;MACvB,OAAOX,IAAI,CAACU,GAAL,CAASC,SAAT,CAAP;IACD;;IAEDX,IAAI,CAACa,GAAL,CAASF,SAAT,EAAoB,IAApB;IACA,MAAML,GAAG,GAAGX,KAAK,GAAGA,KAAK,CAACgB,SAAD,CAAR,GAAsBA,SAAvC;;IACA,IAAIH,SAAS,CAACF,GAAD,CAAb,EAAoB;MAClB,MAAMQ,UAAU,GAAGR,GAAG,CAACG,IAAJ,CAASM,OAAO,IAAI;QACrCf,IAAI,CAACa,GAAL,CAASF,SAAT,EAAoBI,OAApB;QACA,OAAOC,QAAQ,CAACL,SAAD,CAAf;MACD,CAHkB,CAAnB;MAIAX,IAAI,CAACa,GAAL,CAASF,SAAT,EAAoBG,UAApB;MACA,OAAOA,UAAP;IACD,CAPD,MAOO;MACLd,IAAI,CAACa,GAAL,CAASF,SAAT,EAAoBL,GAApB;MACA,OAAOU,QAAQ,CAACL,SAAD,CAAf;IACD;EACF,CAlBD;;EAoBA,MAAMK,QAAQ,GAAIC,OAAD,IAAa;IAC5B,MAAMC,IAAI,GAAGrB,WAAW,CAACoB,OAAD,EAAUjB,IAAI,CAACU,GAAL,CAASO,OAAT,CAAV,CAAxB;IACA,OAAOT,SAAS,CAACU,IAAD,CAAT,GAAkBA,IAAI,CAACT,IAAL,CAAUU,WAAV,CAAlB,GAA2CA,WAAW,CAACD,IAAD,CAA7D;EACD,CAHD;;EAKA,MAAMC,WAAW,GAAID,IAAD,IAAU;IAC5BA,IAAI,GAAG,CAACA,IAAI,IAAI,EAAT,EAAatB,MAAb,CAAoBA,MAApB,CAAP;IACAG,KAAK,CAACqB,IAAN,CAAW,GAAGF,IAAd;EACD,CAHD;;EAKAnB,KAAK,CAACqB,IAAN,CAAWtB,IAAX;EACA,OAAOI,IAAI,EAAX;AACD,CApDD;;AAsDA,MAAMM,SAAS,GAAGa,CAAC,IAAIA,CAAC,IAAI,OAAOA,CAAC,CAACZ,IAAT,KAAkB,UAA9C;;AAEAa,MAAM,CAACC,OAAP,GAAiB7B,OAAjB"},"metadata":{},"sourceType":"script"}