{"ast":null,"code":"const path = require('path');\n\nconst libexec = require('libnpmexec');\n\nconst BaseCommand = require('../base-command.js');\n\nclass Exec extends BaseCommand {\n  static description = 'Run a command from a local or remote npm package';\n  static params = ['package', 'call', 'workspace', 'workspaces', 'include-workspace-root'];\n  static name = 'exec';\n  static usage = ['-- <pkg>[@<version>] [args...]', '--package=<pkg>[@<version>] -- <cmd> [args...]', '-c \\'<cmd> [args...]\\'', '--package=foo -c \\'<cmd> [args...]\\''];\n  static ignoreImplicitWorkspace = false;\n  static isShellout = true;\n\n  async exec(_args) {\n    let {\n      locationMsg,\n      runPath\n    } = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    // This is where libnpmexec will look for locally installed packages\n    const localPrefix = this.npm.localPrefix; // This is where libnpmexec will actually run the scripts from\n\n    if (!runPath) {\n      runPath = process.cwd();\n    }\n\n    const args = [..._args];\n    const call = this.npm.config.get('call');\n    let globalPath;\n    const {\n      flatOptions,\n      localBin,\n      globalBin,\n      globalDir\n    } = this.npm;\n    const output = this.npm.output.bind(this.npm);\n    const scriptShell = this.npm.config.get('script-shell') || undefined;\n    const packages = this.npm.config.get('package');\n    const yes = this.npm.config.get('yes'); // --prefix sets both of these to the same thing, meaning the global prefix\n    // is invalid (i.e. no lib/node_modules).  This is not a trivial thing to\n    // untangle and fix so we work around it here.\n\n    if (this.npm.localPrefix !== this.npm.globalPrefix) {\n      globalPath = path.resolve(globalDir, '..');\n    }\n\n    if (call && _args.length) {\n      throw this.usageError();\n    }\n\n    return libexec({ ...flatOptions,\n      // we explicitly set packageLockOnly to false because if it's true\n      // when we try to install a missing package, we won't actually install it\n      packageLockOnly: false,\n      args,\n      call,\n      localBin,\n      locationMsg,\n      globalBin,\n      globalPath,\n      output,\n      packages,\n      path: localPrefix,\n      runPath,\n      scriptShell,\n      yes\n    });\n  }\n\n  async execWorkspaces(args, filters) {\n    await this.setWorkspaces(filters);\n\n    for (const [name, path] of this.workspaces) {\n      const locationMsg = `in workspace ${this.npm.chalk.green(name)} at location:\\n${this.npm.chalk.dim(path)}`;\n      await this.exec(args, {\n        locationMsg,\n        runPath: path\n      });\n    }\n  }\n\n}\n\nmodule.exports = Exec;","map":{"version":3,"names":["path","require","libexec","BaseCommand","Exec","description","params","name","usage","ignoreImplicitWorkspace","isShellout","exec","_args","locationMsg","runPath","localPrefix","npm","process","cwd","args","call","config","get","globalPath","flatOptions","localBin","globalBin","globalDir","output","bind","scriptShell","undefined","packages","yes","globalPrefix","resolve","length","usageError","packageLockOnly","execWorkspaces","filters","setWorkspaces","workspaces","chalk","green","dim","module","exports"],"sources":["/Users/chelsea/Documents/0_AllCoding/shoppingstories-v3/node_modules/npm/lib/commands/exec.js"],"sourcesContent":["const path = require('path')\nconst libexec = require('libnpmexec')\nconst BaseCommand = require('../base-command.js')\n\nclass Exec extends BaseCommand {\n  static description = 'Run a command from a local or remote npm package'\n  static params = [\n    'package',\n    'call',\n    'workspace',\n    'workspaces',\n    'include-workspace-root',\n  ]\n\n  static name = 'exec'\n  static usage = [\n    '-- <pkg>[@<version>] [args...]',\n    '--package=<pkg>[@<version>] -- <cmd> [args...]',\n    '-c \\'<cmd> [args...]\\'',\n    '--package=foo -c \\'<cmd> [args...]\\'',\n  ]\n\n  static ignoreImplicitWorkspace = false\n  static isShellout = true\n\n  async exec (_args, { locationMsg, runPath } = {}) {\n    // This is where libnpmexec will look for locally installed packages\n    const localPrefix = this.npm.localPrefix\n\n    // This is where libnpmexec will actually run the scripts from\n    if (!runPath) {\n      runPath = process.cwd()\n    }\n\n    const args = [..._args]\n    const call = this.npm.config.get('call')\n    let globalPath\n    const {\n      flatOptions,\n      localBin,\n      globalBin,\n      globalDir,\n    } = this.npm\n    const output = this.npm.output.bind(this.npm)\n    const scriptShell = this.npm.config.get('script-shell') || undefined\n    const packages = this.npm.config.get('package')\n    const yes = this.npm.config.get('yes')\n    // --prefix sets both of these to the same thing, meaning the global prefix\n    // is invalid (i.e. no lib/node_modules).  This is not a trivial thing to\n    // untangle and fix so we work around it here.\n    if (this.npm.localPrefix !== this.npm.globalPrefix) {\n      globalPath = path.resolve(globalDir, '..')\n    }\n\n    if (call && _args.length) {\n      throw this.usageError()\n    }\n\n    return libexec({\n      ...flatOptions,\n      // we explicitly set packageLockOnly to false because if it's true\n      // when we try to install a missing package, we won't actually install it\n      packageLockOnly: false,\n      args,\n      call,\n      localBin,\n      locationMsg,\n      globalBin,\n      globalPath,\n      output,\n      packages,\n      path: localPrefix,\n      runPath,\n      scriptShell,\n      yes,\n    })\n  }\n\n  async execWorkspaces (args, filters) {\n    await this.setWorkspaces(filters)\n\n    for (const [name, path] of this.workspaces) {\n      const locationMsg =\n        `in workspace ${this.npm.chalk.green(name)} at location:\\n${this.npm.chalk.dim(path)}`\n      await this.exec(args, { locationMsg, runPath: path })\n    }\n  }\n}\n\nmodule.exports = Exec\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}