{"ast":null,"code":"const {\n  resolve\n} = require('path');\n\nconst chalk = require('chalk');\n\nconst runScript = require('@npmcli/run-script');\n\nconst {\n  isServerPackage\n} = runScript;\n\nconst rpj = require('read-package-json-fast');\n\nconst log = require('../utils/log-shim.js');\n\nconst didYouMean = require('../utils/did-you-mean.js');\n\nconst {\n  isWindowsShell\n} = require('../utils/is-windows.js');\n\nconst cmdList = ['publish', 'install', 'uninstall', 'test', 'stop', 'start', 'restart', 'version'].reduce((l, p) => l.concat(['pre' + p, p, 'post' + p]), []);\nconst nocolor = {\n  reset: s => s,\n  bold: s => s,\n  dim: s => s,\n  blue: s => s,\n  green: s => s\n};\n\nconst BaseCommand = require('../base-command.js');\n\nclass RunScript extends BaseCommand {\n  static description = 'Run arbitrary package scripts';\n  static params = ['workspace', 'workspaces', 'include-workspace-root', 'if-present', 'ignore-scripts', 'foreground-scripts', 'script-shell'];\n  static name = 'run-script';\n  static usage = ['<command> [-- <args>]'];\n  static ignoreImplicitWorkspace = false;\n  static isShellout = true;\n\n  async completion(opts) {\n    const argv = opts.conf.argv.remain;\n\n    if (argv.length === 2) {\n      // find the script name\n      const json = resolve(this.npm.localPrefix, 'package.json');\n      const {\n        scripts = {}\n      } = await rpj(json).catch(er => ({}));\n      return Object.keys(scripts);\n    }\n  }\n\n  async exec(args) {\n    if (args.length) {\n      return this.run(args);\n    } else {\n      return this.list(args);\n    }\n  }\n\n  async execWorkspaces(args, filters) {\n    if (args.length) {\n      return this.runWorkspaces(args, filters);\n    } else {\n      return this.listWorkspaces(args, filters);\n    }\n  }\n\n  async run(_ref) {\n    let [event, ...args] = _ref;\n    let {\n      path = this.npm.localPrefix,\n      pkg\n    } = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    // this || undefined is because runScript will be unhappy with the default\n    // null value\n    const scriptShell = this.npm.config.get('script-shell') || undefined;\n    pkg = pkg || (await rpj(`${path}/package.json`));\n    const {\n      scripts = {}\n    } = pkg;\n\n    if (event === 'restart' && !scripts.restart) {\n      scripts.restart = 'npm stop --if-present && npm start';\n    } else if (event === 'env' && !scripts.env) {\n      scripts.env = isWindowsShell ? 'SET' : 'env';\n    }\n\n    pkg.scripts = scripts;\n\n    if (!Object.prototype.hasOwnProperty.call(scripts, event) && !(event === 'start' && (await isServerPackage(path)))) {\n      if (this.npm.config.get('if-present')) {\n        return;\n      }\n\n      const suggestions = await didYouMean(this.npm, path, event);\n      throw new Error(`Missing script: \"${event}\"${suggestions}\\n\\nTo see a list of scripts, run:\\n  npm run`);\n    } // positional args only added to the main event, not pre/post\n\n\n    const events = [[event, args]];\n\n    if (!this.npm.config.get('ignore-scripts')) {\n      if (scripts[`pre${event}`]) {\n        events.unshift([`pre${event}`, []]);\n      }\n\n      if (scripts[`post${event}`]) {\n        events.push([`post${event}`, []]);\n      }\n    }\n\n    const opts = {\n      path,\n      args,\n      scriptShell,\n      stdio: 'inherit',\n      stdioString: true,\n      pkg,\n      banner: !this.npm.silent\n    };\n\n    for (const [event, args] of events) {\n      await runScript({ ...opts,\n        event,\n        args\n      });\n    }\n  }\n\n  async list(args, path) {\n    path = path || this.npm.localPrefix;\n    const {\n      scripts,\n      name,\n      _id\n    } = await rpj(`${path}/package.json`);\n    const pkgid = _id || name;\n    const color = this.npm.color;\n\n    if (!scripts) {\n      return [];\n    }\n\n    const allScripts = Object.keys(scripts);\n\n    if (this.npm.silent) {\n      return allScripts;\n    }\n\n    if (this.npm.config.get('json')) {\n      this.npm.output(JSON.stringify(scripts, null, 2));\n      return allScripts;\n    }\n\n    if (this.npm.config.get('parseable')) {\n      for (const [script, cmd] of Object.entries(scripts)) {\n        this.npm.output(`${script}:${cmd}`);\n      }\n\n      return allScripts;\n    }\n\n    const indent = '\\n    ';\n    const prefix = '  ';\n    const cmds = [];\n    const runScripts = [];\n\n    for (const script of allScripts) {\n      const list = cmdList.includes(script) ? cmds : runScripts;\n      list.push(script);\n    }\n\n    const colorize = color ? chalk : nocolor;\n\n    if (cmds.length) {\n      this.npm.output(`${colorize.reset(colorize.bold('Lifecycle scripts'))} included in ${colorize.green(pkgid)}:`);\n    }\n\n    for (const script of cmds) {\n      this.npm.output(prefix + script + indent + colorize.dim(scripts[script]));\n    }\n\n    if (!cmds.length && runScripts.length) {\n      this.npm.output(`${colorize.bold('Scripts')} available in ${colorize.green(pkgid)} via \\`${colorize.blue('npm run-script')}\\`:`);\n    } else if (runScripts.length) {\n      this.npm.output(`\\navailable via \\`${colorize.blue('npm run-script')}\\`:`);\n    }\n\n    for (const script of runScripts) {\n      this.npm.output(prefix + script + indent + colorize.dim(scripts[script]));\n    }\n\n    this.npm.output('');\n    return allScripts;\n  }\n\n  async runWorkspaces(args, filters) {\n    const res = [];\n    await this.setWorkspaces(filters);\n\n    for (const workspacePath of this.workspacePaths) {\n      const pkg = await rpj(`${workspacePath}/package.json`);\n      const runResult = await this.run(args, {\n        path: workspacePath,\n        pkg\n      }).catch(err => {\n        log.error(`Lifecycle script \\`${args[0]}\\` failed with error:`);\n        log.error(err);\n        log.error(`  in workspace: ${pkg._id || pkg.name}`);\n        log.error(`  at location: ${workspacePath}`);\n        const scriptMissing = err.message.startsWith('Missing script'); // avoids exiting with error code in case there's scripts missing\n        // in some workspaces since other scripts might have succeeded\n\n        if (!scriptMissing) {\n          process.exitCode = 1;\n        }\n\n        return scriptMissing;\n      });\n      res.push(runResult);\n    } // in case **all** tests are missing, then it should exit with error code\n\n\n    if (res.every(Boolean)) {\n      throw new Error(`Missing script: ${args[0]}`);\n    }\n  }\n\n  async listWorkspaces(args, filters) {\n    await this.setWorkspaces(filters);\n\n    if (this.npm.silent) {\n      return;\n    }\n\n    if (this.npm.config.get('json')) {\n      const res = {};\n\n      for (const workspacePath of this.workspacePaths) {\n        const {\n          scripts,\n          name\n        } = await rpj(`${workspacePath}/package.json`);\n        res[name] = { ...scripts\n        };\n      }\n\n      this.npm.output(JSON.stringify(res, null, 2));\n      return;\n    }\n\n    if (this.npm.config.get('parseable')) {\n      for (const workspacePath of this.workspacePaths) {\n        const {\n          scripts,\n          name\n        } = await rpj(`${workspacePath}/package.json`);\n\n        for (const [script, cmd] of Object.entries(scripts || {})) {\n          this.npm.output(`${name}:${script}:${cmd}`);\n        }\n      }\n\n      return;\n    }\n\n    for (const workspacePath of this.workspacePaths) {\n      await this.list(args, workspacePath);\n    }\n  }\n\n}\n\nmodule.exports = RunScript;","map":{"version":3,"names":["resolve","require","chalk","runScript","isServerPackage","rpj","log","didYouMean","isWindowsShell","cmdList","reduce","l","p","concat","nocolor","reset","s","bold","dim","blue","green","BaseCommand","RunScript","description","params","name","usage","ignoreImplicitWorkspace","isShellout","completion","opts","argv","conf","remain","length","json","npm","localPrefix","scripts","catch","er","Object","keys","exec","args","run","list","execWorkspaces","filters","runWorkspaces","listWorkspaces","event","path","pkg","scriptShell","config","get","undefined","restart","env","prototype","hasOwnProperty","call","suggestions","Error","events","unshift","push","stdio","stdioString","banner","silent","_id","pkgid","color","allScripts","output","JSON","stringify","script","cmd","entries","indent","prefix","cmds","runScripts","includes","colorize","res","setWorkspaces","workspacePath","workspacePaths","runResult","err","error","scriptMissing","message","startsWith","process","exitCode","every","Boolean","module","exports"],"sources":["/Users/chelsea/Documents/0_AllCoding/shoppingstories-v3/node_modules/npm/lib/commands/run-script.js"],"sourcesContent":["const { resolve } = require('path')\nconst chalk = require('chalk')\nconst runScript = require('@npmcli/run-script')\nconst { isServerPackage } = runScript\nconst rpj = require('read-package-json-fast')\nconst log = require('../utils/log-shim.js')\nconst didYouMean = require('../utils/did-you-mean.js')\nconst { isWindowsShell } = require('../utils/is-windows.js')\n\nconst cmdList = [\n  'publish',\n  'install',\n  'uninstall',\n  'test',\n  'stop',\n  'start',\n  'restart',\n  'version',\n].reduce((l, p) => l.concat(['pre' + p, p, 'post' + p]), [])\n\nconst nocolor = {\n  reset: s => s,\n  bold: s => s,\n  dim: s => s,\n  blue: s => s,\n  green: s => s,\n}\n\nconst BaseCommand = require('../base-command.js')\nclass RunScript extends BaseCommand {\n  static description = 'Run arbitrary package scripts'\n  static params = [\n    'workspace',\n    'workspaces',\n    'include-workspace-root',\n    'if-present',\n    'ignore-scripts',\n    'foreground-scripts',\n    'script-shell',\n  ]\n\n  static name = 'run-script'\n  static usage = ['<command> [-- <args>]']\n  static ignoreImplicitWorkspace = false\n  static isShellout = true\n\n  async completion (opts) {\n    const argv = opts.conf.argv.remain\n    if (argv.length === 2) {\n      // find the script name\n      const json = resolve(this.npm.localPrefix, 'package.json')\n      const { scripts = {} } = await rpj(json).catch(er => ({}))\n      return Object.keys(scripts)\n    }\n  }\n\n  async exec (args) {\n    if (args.length) {\n      return this.run(args)\n    } else {\n      return this.list(args)\n    }\n  }\n\n  async execWorkspaces (args, filters) {\n    if (args.length) {\n      return this.runWorkspaces(args, filters)\n    } else {\n      return this.listWorkspaces(args, filters)\n    }\n  }\n\n  async run ([event, ...args], { path = this.npm.localPrefix, pkg } = {}) {\n    // this || undefined is because runScript will be unhappy with the default\n    // null value\n    const scriptShell = this.npm.config.get('script-shell') || undefined\n\n    pkg = pkg || (await rpj(`${path}/package.json`))\n    const { scripts = {} } = pkg\n\n    if (event === 'restart' && !scripts.restart) {\n      scripts.restart = 'npm stop --if-present && npm start'\n    } else if (event === 'env' && !scripts.env) {\n      scripts.env = isWindowsShell ? 'SET' : 'env'\n    }\n\n    pkg.scripts = scripts\n\n    if (\n      !Object.prototype.hasOwnProperty.call(scripts, event) &&\n      !(event === 'start' && (await isServerPackage(path)))\n    ) {\n      if (this.npm.config.get('if-present')) {\n        return\n      }\n\n      const suggestions = await didYouMean(this.npm, path, event)\n      throw new Error(\n        `Missing script: \"${event}\"${suggestions}\\n\\nTo see a list of scripts, run:\\n  npm run`\n      )\n    }\n\n    // positional args only added to the main event, not pre/post\n    const events = [[event, args]]\n    if (!this.npm.config.get('ignore-scripts')) {\n      if (scripts[`pre${event}`]) {\n        events.unshift([`pre${event}`, []])\n      }\n\n      if (scripts[`post${event}`]) {\n        events.push([`post${event}`, []])\n      }\n    }\n\n    const opts = {\n      path,\n      args,\n      scriptShell,\n      stdio: 'inherit',\n      stdioString: true,\n      pkg,\n      banner: !this.npm.silent,\n    }\n\n    for (const [event, args] of events) {\n      await runScript({\n        ...opts,\n        event,\n        args,\n      })\n    }\n  }\n\n  async list (args, path) {\n    path = path || this.npm.localPrefix\n    const { scripts, name, _id } = await rpj(`${path}/package.json`)\n    const pkgid = _id || name\n    const color = this.npm.color\n\n    if (!scripts) {\n      return []\n    }\n\n    const allScripts = Object.keys(scripts)\n    if (this.npm.silent) {\n      return allScripts\n    }\n\n    if (this.npm.config.get('json')) {\n      this.npm.output(JSON.stringify(scripts, null, 2))\n      return allScripts\n    }\n\n    if (this.npm.config.get('parseable')) {\n      for (const [script, cmd] of Object.entries(scripts)) {\n        this.npm.output(`${script}:${cmd}`)\n      }\n\n      return allScripts\n    }\n\n    const indent = '\\n    '\n    const prefix = '  '\n    const cmds = []\n    const runScripts = []\n    for (const script of allScripts) {\n      const list = cmdList.includes(script) ? cmds : runScripts\n      list.push(script)\n    }\n    const colorize = color ? chalk : nocolor\n\n    if (cmds.length) {\n      this.npm.output(\n        `${colorize.reset(colorize.bold('Lifecycle scripts'))} included in ${colorize.green(\n          pkgid\n        )}:`\n      )\n    }\n\n    for (const script of cmds) {\n      this.npm.output(prefix + script + indent + colorize.dim(scripts[script]))\n    }\n\n    if (!cmds.length && runScripts.length) {\n      this.npm.output(\n        `${colorize.bold('Scripts')} available in ${colorize.green(pkgid)} via \\`${colorize.blue(\n          'npm run-script'\n        )}\\`:`\n      )\n    } else if (runScripts.length) {\n      this.npm.output(`\\navailable via \\`${colorize.blue('npm run-script')}\\`:`)\n    }\n\n    for (const script of runScripts) {\n      this.npm.output(prefix + script + indent + colorize.dim(scripts[script]))\n    }\n\n    this.npm.output('')\n    return allScripts\n  }\n\n  async runWorkspaces (args, filters) {\n    const res = []\n    await this.setWorkspaces(filters)\n\n    for (const workspacePath of this.workspacePaths) {\n      const pkg = await rpj(`${workspacePath}/package.json`)\n      const runResult = await this.run(args, {\n        path: workspacePath,\n        pkg,\n      }).catch(err => {\n        log.error(`Lifecycle script \\`${args[0]}\\` failed with error:`)\n        log.error(err)\n        log.error(`  in workspace: ${pkg._id || pkg.name}`)\n        log.error(`  at location: ${workspacePath}`)\n\n        const scriptMissing = err.message.startsWith('Missing script')\n\n        // avoids exiting with error code in case there's scripts missing\n        // in some workspaces since other scripts might have succeeded\n        if (!scriptMissing) {\n          process.exitCode = 1\n        }\n\n        return scriptMissing\n      })\n      res.push(runResult)\n    }\n\n    // in case **all** tests are missing, then it should exit with error code\n    if (res.every(Boolean)) {\n      throw new Error(`Missing script: ${args[0]}`)\n    }\n  }\n\n  async listWorkspaces (args, filters) {\n    await this.setWorkspaces(filters)\n\n    if (this.npm.silent) {\n      return\n    }\n\n    if (this.npm.config.get('json')) {\n      const res = {}\n      for (const workspacePath of this.workspacePaths) {\n        const { scripts, name } = await rpj(`${workspacePath}/package.json`)\n        res[name] = { ...scripts }\n      }\n      this.npm.output(JSON.stringify(res, null, 2))\n      return\n    }\n\n    if (this.npm.config.get('parseable')) {\n      for (const workspacePath of this.workspacePaths) {\n        const { scripts, name } = await rpj(`${workspacePath}/package.json`)\n        for (const [script, cmd] of Object.entries(scripts || {})) {\n          this.npm.output(`${name}:${script}:${cmd}`)\n        }\n      }\n      return\n    }\n\n    for (const workspacePath of this.workspacePaths) {\n      await this.list(args, workspacePath)\n    }\n  }\n}\n\nmodule.exports = RunScript\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}