{"ast":null,"code":"const cacache = require('cacache');\n\nconst fs = require('fs');\n\nconst fetch = require('make-fetch-happen');\n\nconst table = require('text-table');\n\nconst which = require('which');\n\nconst pacote = require('pacote');\n\nconst {\n  resolve\n} = require('path');\n\nconst semver = require('semver');\n\nconst {\n  promisify\n} = require('util');\n\nconst log = require('../utils/log-shim.js');\n\nconst ansiTrim = require('../utils/ansi-trim.js');\n\nconst ping = require('../utils/ping.js');\n\nconst {\n  registry: {\n    default: defaultRegistry\n  }\n} = require('../utils/config/definitions.js');\n\nconst lstat = promisify(fs.lstat);\nconst readdir = promisify(fs.readdir);\nconst access = promisify(fs.access);\nconst {\n  R_OK,\n  W_OK,\n  X_OK\n} = fs.constants;\n\nconst maskLabel = mask => {\n  const label = [];\n\n  if (mask & R_OK) {\n    label.push('readable');\n  }\n\n  if (mask & W_OK) {\n    label.push('writable');\n  }\n\n  if (mask & X_OK) {\n    label.push('executable');\n  }\n\n  return label.join(', ');\n};\n\nconst BaseCommand = require('../base-command.js');\n\nclass Doctor extends BaseCommand {\n  static description = 'Check your npm environment';\n  static name = 'doctor';\n  static params = ['registry'];\n  static ignoreImplicitWorkspace = false;\n\n  async exec(args) {\n    log.info('Running checkup'); // each message is [title, ok, message]\n\n    const messages = [];\n    const actions = [['npm ping', 'checkPing', []], ['npm -v', 'getLatestNpmVersion', []], ['node -v', 'getLatestNodejsVersion', []], ['npm config get registry', 'checkNpmRegistry', []], ['which git', 'getGitPath', []], ...(process.platform === 'win32' ? [] : [['Perms check on cached files', 'checkFilesPermission', [this.npm.cache, true, R_OK]], ['Perms check on local node_modules', 'checkFilesPermission', [this.npm.localDir, true, R_OK | W_OK, true]], ['Perms check on global node_modules', 'checkFilesPermission', [this.npm.globalDir, false, R_OK]], ['Perms check on local bin folder', 'checkFilesPermission', [this.npm.localBin, false, R_OK | W_OK | X_OK, true]], ['Perms check on global bin folder', 'checkFilesPermission', [this.npm.globalBin, false, X_OK]]]), ['Verify cache contents', 'verifyCachedFiles', [this.npm.flatOptions.cache]] // TODO:\n    // - ensure arborist.loadActual() runs without errors and no invalid edges\n    // - ensure package-lock.json matches loadActual()\n    // - verify loadActual without hidden lock file matches hidden lockfile\n    // - verify all local packages have bins linked\n    ]; // Do the actual work\n\n    for (const [msg, fn, args] of actions) {\n      const line = [msg];\n\n      try {\n        line.push(true, await this[fn](...args));\n      } catch (er) {\n        line.push(false, er);\n      }\n\n      messages.push(line);\n    }\n\n    const outHead = ['Check', 'Value', 'Recommendation/Notes'].map(h => this.npm.chalk.underline(h));\n    let allOk = true;\n    const outBody = messages.map(item => {\n      if (!item[1]) {\n        allOk = false;\n        item[0] = this.npm.chalk.red(item[0]);\n        item[1] = this.npm.chalk.red('not ok');\n        item[2] = this.npm.chalk.magenta(String(item[2]));\n      } else {\n        item[1] = this.npm.chalk.green('ok');\n      }\n\n      return item;\n    });\n    const outTable = [outHead, ...outBody];\n    const tableOpts = {\n      stringLength: s => ansiTrim(s).length\n    };\n\n    if (!this.npm.silent) {\n      this.npm.output(table(outTable, tableOpts));\n    }\n\n    if (!allOk) {\n      throw new Error('Some problems found. See above for recommendations.');\n    }\n  }\n\n  async checkPing() {\n    const tracker = log.newItem('checkPing', 1);\n    tracker.info('checkPing', 'Pinging registry');\n\n    try {\n      await ping({ ...this.npm.flatOptions,\n        retry: false\n      });\n      return '';\n    } catch (er) {\n      if (/^E\\d{3}$/.test(er.code || '')) {\n        throw er.code.slice(1) + ' ' + er.message;\n      } else {\n        throw er.message;\n      }\n    } finally {\n      tracker.finish();\n    }\n  }\n\n  async getLatestNpmVersion() {\n    const tracker = log.newItem('getLatestNpmVersion', 1);\n    tracker.info('getLatestNpmVersion', 'Getting npm package information');\n\n    try {\n      const latest = (await pacote.manifest('npm@latest', this.npm.flatOptions)).version;\n\n      if (semver.gte(this.npm.version, latest)) {\n        return `current: v${this.npm.version}, latest: v${latest}`;\n      } else {\n        throw `Use npm v${latest}`;\n      }\n    } finally {\n      tracker.finish();\n    }\n  }\n\n  async getLatestNodejsVersion() {\n    // XXX get the latest in the current major as well\n    const current = process.version;\n    const currentRange = `^${current}`;\n    const url = 'https://nodejs.org/dist/index.json';\n    const tracker = log.newItem('getLatestNodejsVersion', 1);\n    tracker.info('getLatestNodejsVersion', 'Getting Node.js release information');\n\n    try {\n      const res = await fetch(url, {\n        method: 'GET',\n        ...this.npm.flatOptions\n      });\n      const data = await res.json();\n      let maxCurrent = '0.0.0';\n      let maxLTS = '0.0.0';\n\n      for (const {\n        lts,\n        version\n      } of data) {\n        if (lts && semver.gt(version, maxLTS)) {\n          maxLTS = version;\n        }\n\n        if (semver.satisfies(version, currentRange) && semver.gt(version, maxCurrent)) {\n          maxCurrent = version;\n        }\n      }\n\n      const recommended = semver.gt(maxCurrent, maxLTS) ? maxCurrent : maxLTS;\n\n      if (semver.gte(process.version, recommended)) {\n        return `current: ${current}, recommended: ${recommended}`;\n      } else {\n        throw `Use node ${recommended} (current: ${current})`;\n      }\n    } finally {\n      tracker.finish();\n    }\n  }\n\n  async checkFilesPermission(root, shouldOwn, mask, missingOk) {\n    let ok = true;\n    const tracker = log.newItem(root, 1);\n\n    try {\n      const uid = process.getuid();\n      const gid = process.getgid();\n      const files = new Set([root]);\n\n      for (const f of files) {\n        tracker.silly('checkFilesPermission', f.slice(root.length + 1));\n        const st = await lstat(f).catch(er => {\n          // if it can't be missing, or if it can and the error wasn't that it was missing\n          if (!missingOk || er.code !== 'ENOENT') {\n            ok = false;\n            tracker.warn('checkFilesPermission', 'error getting info for ' + f);\n          }\n        });\n        tracker.completeWork(1);\n\n        if (!st) {\n          continue;\n        }\n\n        if (shouldOwn && (uid !== st.uid || gid !== st.gid)) {\n          tracker.warn('checkFilesPermission', 'should be owner of ' + f);\n          ok = false;\n        }\n\n        if (!st.isDirectory() && !st.isFile()) {\n          continue;\n        }\n\n        try {\n          await access(f, mask);\n        } catch (er) {\n          ok = false;\n          const msg = `Missing permissions on ${f} (expect: ${maskLabel(mask)})`;\n          tracker.error('checkFilesPermission', msg);\n          continue;\n        }\n\n        if (st.isDirectory()) {\n          const entries = await readdir(f).catch(er => {\n            ok = false;\n            tracker.warn('checkFilesPermission', 'error reading directory ' + f);\n            return [];\n          });\n\n          for (const entry of entries) {\n            files.add(resolve(f, entry));\n          }\n        }\n      }\n    } finally {\n      tracker.finish();\n\n      if (!ok) {\n        throw `Check the permissions of files in ${root}` + (shouldOwn ? ' (should be owned by current user)' : '');\n      } else {\n        return '';\n      }\n    }\n  }\n\n  async getGitPath() {\n    const tracker = log.newItem('getGitPath', 1);\n    tracker.info('getGitPath', 'Finding git in your PATH');\n\n    try {\n      return await which('git').catch(er => {\n        tracker.warn(er);\n        throw \"Install git and ensure it's in your PATH.\";\n      });\n    } finally {\n      tracker.finish();\n    }\n  }\n\n  async verifyCachedFiles() {\n    const tracker = log.newItem('verifyCachedFiles', 1);\n    tracker.info('verifyCachedFiles', 'Verifying the npm cache');\n\n    try {\n      const stats = await cacache.verify(this.npm.flatOptions.cache);\n      const {\n        badContentCount,\n        reclaimedCount,\n        missingContent,\n        reclaimedSize\n      } = stats;\n\n      if (badContentCount || reclaimedCount || missingContent) {\n        if (badContentCount) {\n          tracker.warn('verifyCachedFiles', `Corrupted content removed: ${badContentCount}`);\n        }\n\n        if (reclaimedCount) {\n          tracker.warn('verifyCachedFiles', `Content garbage-collected: ${reclaimedCount} (${reclaimedSize} bytes)`);\n        }\n\n        if (missingContent) {\n          tracker.warn('verifyCachedFiles', `Missing content: ${missingContent}`);\n        }\n\n        tracker.warn('verifyCachedFiles', 'Cache issues have been fixed');\n      }\n\n      tracker.info('verifyCachedFiles', `Verification complete. Stats: ${JSON.stringify(stats, null, 2)}`);\n      return `verified ${stats.verifiedContent} tarballs`;\n    } finally {\n      tracker.finish();\n    }\n  }\n\n  async checkNpmRegistry() {\n    if (this.npm.flatOptions.registry !== defaultRegistry) {\n      throw `Try \\`npm config set registry=${defaultRegistry}\\``;\n    } else {\n      return `using default registry (${defaultRegistry})`;\n    }\n  }\n\n}\n\nmodule.exports = Doctor;","map":{"version":3,"names":["cacache","require","fs","fetch","table","which","pacote","resolve","semver","promisify","log","ansiTrim","ping","registry","default","defaultRegistry","lstat","readdir","access","R_OK","W_OK","X_OK","constants","maskLabel","mask","label","push","join","BaseCommand","Doctor","description","name","params","ignoreImplicitWorkspace","exec","args","info","messages","actions","process","platform","npm","cache","localDir","globalDir","localBin","globalBin","flatOptions","msg","fn","line","er","outHead","map","h","chalk","underline","allOk","outBody","item","red","magenta","String","green","outTable","tableOpts","stringLength","s","length","silent","output","Error","checkPing","tracker","newItem","retry","test","code","slice","message","finish","getLatestNpmVersion","latest","manifest","version","gte","getLatestNodejsVersion","current","currentRange","url","res","method","data","json","maxCurrent","maxLTS","lts","gt","satisfies","recommended","checkFilesPermission","root","shouldOwn","missingOk","ok","uid","getuid","gid","getgid","files","Set","f","silly","st","catch","warn","completeWork","isDirectory","isFile","error","entries","entry","add","getGitPath","verifyCachedFiles","stats","verify","badContentCount","reclaimedCount","missingContent","reclaimedSize","JSON","stringify","verifiedContent","checkNpmRegistry","module","exports"],"sources":["/Users/chelsea/Documents/0_AllCoding/shoppingstories-v3/node_modules/npm/lib/commands/doctor.js"],"sourcesContent":["const cacache = require('cacache')\nconst fs = require('fs')\nconst fetch = require('make-fetch-happen')\nconst table = require('text-table')\nconst which = require('which')\nconst pacote = require('pacote')\nconst { resolve } = require('path')\nconst semver = require('semver')\nconst { promisify } = require('util')\nconst log = require('../utils/log-shim.js')\nconst ansiTrim = require('../utils/ansi-trim.js')\nconst ping = require('../utils/ping.js')\nconst {\n  registry: { default: defaultRegistry },\n} = require('../utils/config/definitions.js')\nconst lstat = promisify(fs.lstat)\nconst readdir = promisify(fs.readdir)\nconst access = promisify(fs.access)\nconst { R_OK, W_OK, X_OK } = fs.constants\nconst maskLabel = mask => {\n  const label = []\n  if (mask & R_OK) {\n    label.push('readable')\n  }\n\n  if (mask & W_OK) {\n    label.push('writable')\n  }\n\n  if (mask & X_OK) {\n    label.push('executable')\n  }\n\n  return label.join(', ')\n}\n\nconst BaseCommand = require('../base-command.js')\nclass Doctor extends BaseCommand {\n  static description = 'Check your npm environment'\n  static name = 'doctor'\n  static params = ['registry']\n  static ignoreImplicitWorkspace = false\n\n  async exec (args) {\n    log.info('Running checkup')\n\n    // each message is [title, ok, message]\n    const messages = []\n\n    const actions = [\n      ['npm ping', 'checkPing', []],\n      ['npm -v', 'getLatestNpmVersion', []],\n      ['node -v', 'getLatestNodejsVersion', []],\n      ['npm config get registry', 'checkNpmRegistry', []],\n      ['which git', 'getGitPath', []],\n      ...(process.platform === 'win32'\n        ? []\n        : [\n          [\n            'Perms check on cached files',\n            'checkFilesPermission',\n            [this.npm.cache, true, R_OK],\n          ], [\n            'Perms check on local node_modules',\n            'checkFilesPermission',\n            [this.npm.localDir, true, R_OK | W_OK, true],\n          ], [\n            'Perms check on global node_modules',\n            'checkFilesPermission',\n            [this.npm.globalDir, false, R_OK],\n          ], [\n            'Perms check on local bin folder',\n            'checkFilesPermission',\n            [this.npm.localBin, false, R_OK | W_OK | X_OK, true],\n          ], [\n            'Perms check on global bin folder',\n            'checkFilesPermission',\n            [this.npm.globalBin, false, X_OK],\n          ],\n        ]),\n      [\n        'Verify cache contents',\n        'verifyCachedFiles',\n        [this.npm.flatOptions.cache],\n      ],\n      // TODO:\n      // - ensure arborist.loadActual() runs without errors and no invalid edges\n      // - ensure package-lock.json matches loadActual()\n      // - verify loadActual without hidden lock file matches hidden lockfile\n      // - verify all local packages have bins linked\n    ]\n\n    // Do the actual work\n    for (const [msg, fn, args] of actions) {\n      const line = [msg]\n      try {\n        line.push(true, await this[fn](...args))\n      } catch (er) {\n        line.push(false, er)\n      }\n      messages.push(line)\n    }\n\n    const outHead = ['Check', 'Value', 'Recommendation/Notes'].map(h => this.npm.chalk.underline(h))\n    let allOk = true\n    const outBody = messages.map(item => {\n      if (!item[1]) {\n        allOk = false\n        item[0] = this.npm.chalk.red(item[0])\n        item[1] = this.npm.chalk.red('not ok')\n        item[2] = this.npm.chalk.magenta(String(item[2]))\n      } else {\n        item[1] = this.npm.chalk.green('ok')\n      }\n      return item\n    })\n    const outTable = [outHead, ...outBody]\n    const tableOpts = {\n      stringLength: s => ansiTrim(s).length,\n    }\n\n    if (!this.npm.silent) {\n      this.npm.output(table(outTable, tableOpts))\n    }\n    if (!allOk) {\n      throw new Error('Some problems found. See above for recommendations.')\n    }\n  }\n\n  async checkPing () {\n    const tracker = log.newItem('checkPing', 1)\n    tracker.info('checkPing', 'Pinging registry')\n    try {\n      await ping({ ...this.npm.flatOptions, retry: false })\n      return ''\n    } catch (er) {\n      if (/^E\\d{3}$/.test(er.code || '')) {\n        throw er.code.slice(1) + ' ' + er.message\n      } else {\n        throw er.message\n      }\n    } finally {\n      tracker.finish()\n    }\n  }\n\n  async getLatestNpmVersion () {\n    const tracker = log.newItem('getLatestNpmVersion', 1)\n    tracker.info('getLatestNpmVersion', 'Getting npm package information')\n    try {\n      const latest = (await pacote.manifest('npm@latest', this.npm.flatOptions)).version\n      if (semver.gte(this.npm.version, latest)) {\n        return `current: v${this.npm.version}, latest: v${latest}`\n      } else {\n        throw `Use npm v${latest}`\n      }\n    } finally {\n      tracker.finish()\n    }\n  }\n\n  async getLatestNodejsVersion () {\n    // XXX get the latest in the current major as well\n    const current = process.version\n    const currentRange = `^${current}`\n    const url = 'https://nodejs.org/dist/index.json'\n    const tracker = log.newItem('getLatestNodejsVersion', 1)\n    tracker.info('getLatestNodejsVersion', 'Getting Node.js release information')\n    try {\n      const res = await fetch(url, { method: 'GET', ...this.npm.flatOptions })\n      const data = await res.json()\n      let maxCurrent = '0.0.0'\n      let maxLTS = '0.0.0'\n      for (const { lts, version } of data) {\n        if (lts && semver.gt(version, maxLTS)) {\n          maxLTS = version\n        }\n\n        if (semver.satisfies(version, currentRange) && semver.gt(version, maxCurrent)) {\n          maxCurrent = version\n        }\n      }\n      const recommended = semver.gt(maxCurrent, maxLTS) ? maxCurrent : maxLTS\n      if (semver.gte(process.version, recommended)) {\n        return `current: ${current}, recommended: ${recommended}`\n      } else {\n        throw `Use node ${recommended} (current: ${current})`\n      }\n    } finally {\n      tracker.finish()\n    }\n  }\n\n  async checkFilesPermission (root, shouldOwn, mask, missingOk) {\n    let ok = true\n\n    const tracker = log.newItem(root, 1)\n\n    try {\n      const uid = process.getuid()\n      const gid = process.getgid()\n      const files = new Set([root])\n      for (const f of files) {\n        tracker.silly('checkFilesPermission', f.slice(root.length + 1))\n        const st = await lstat(f).catch(er => {\n          // if it can't be missing, or if it can and the error wasn't that it was missing\n          if (!missingOk || er.code !== 'ENOENT') {\n            ok = false\n            tracker.warn('checkFilesPermission', 'error getting info for ' + f)\n          }\n        })\n\n        tracker.completeWork(1)\n\n        if (!st) {\n          continue\n        }\n\n        if (shouldOwn && (uid !== st.uid || gid !== st.gid)) {\n          tracker.warn('checkFilesPermission', 'should be owner of ' + f)\n          ok = false\n        }\n\n        if (!st.isDirectory() && !st.isFile()) {\n          continue\n        }\n\n        try {\n          await access(f, mask)\n        } catch (er) {\n          ok = false\n          const msg = `Missing permissions on ${f} (expect: ${maskLabel(mask)})`\n          tracker.error('checkFilesPermission', msg)\n          continue\n        }\n\n        if (st.isDirectory()) {\n          const entries = await readdir(f).catch(er => {\n            ok = false\n            tracker.warn('checkFilesPermission', 'error reading directory ' + f)\n            return []\n          })\n          for (const entry of entries) {\n            files.add(resolve(f, entry))\n          }\n        }\n      }\n    } finally {\n      tracker.finish()\n      if (!ok) {\n        throw (\n          `Check the permissions of files in ${root}` +\n          (shouldOwn ? ' (should be owned by current user)' : '')\n        )\n      } else {\n        return ''\n      }\n    }\n  }\n\n  async getGitPath () {\n    const tracker = log.newItem('getGitPath', 1)\n    tracker.info('getGitPath', 'Finding git in your PATH')\n    try {\n      return await which('git').catch(er => {\n        tracker.warn(er)\n        throw \"Install git and ensure it's in your PATH.\"\n      })\n    } finally {\n      tracker.finish()\n    }\n  }\n\n  async verifyCachedFiles () {\n    const tracker = log.newItem('verifyCachedFiles', 1)\n    tracker.info('verifyCachedFiles', 'Verifying the npm cache')\n    try {\n      const stats = await cacache.verify(this.npm.flatOptions.cache)\n      const { badContentCount, reclaimedCount, missingContent, reclaimedSize } = stats\n      if (badContentCount || reclaimedCount || missingContent) {\n        if (badContentCount) {\n          tracker.warn('verifyCachedFiles', `Corrupted content removed: ${badContentCount}`)\n        }\n\n        if (reclaimedCount) {\n          tracker.warn(\n            'verifyCachedFiles',\n            `Content garbage-collected: ${reclaimedCount} (${reclaimedSize} bytes)`\n          )\n        }\n\n        if (missingContent) {\n          tracker.warn('verifyCachedFiles', `Missing content: ${missingContent}`)\n        }\n\n        tracker.warn('verifyCachedFiles', 'Cache issues have been fixed')\n      }\n      tracker.info(\n        'verifyCachedFiles',\n        `Verification complete. Stats: ${JSON.stringify(stats, null, 2)}`\n      )\n      return `verified ${stats.verifiedContent} tarballs`\n    } finally {\n      tracker.finish()\n    }\n  }\n\n  async checkNpmRegistry () {\n    if (this.npm.flatOptions.registry !== defaultRegistry) {\n      throw `Try \\`npm config set registry=${defaultRegistry}\\``\n    } else {\n      return `using default registry (${defaultRegistry})`\n    }\n  }\n}\n\nmodule.exports = Doctor\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}