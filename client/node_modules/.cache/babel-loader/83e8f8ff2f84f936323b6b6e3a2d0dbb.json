{"ast":null,"code":"const inspect = require('util').inspect;\n\nconst {\n  URL\n} = require('url');\n\nconst chalk = require('chalk');\n\nconst log = require('../utils/log-shim.js');\n\nconst npmProfile = require('npm-profile');\n\nconst qrcodeTerminal = require('qrcode-terminal');\n\nconst Table = require('cli-table3');\n\nconst otplease = require('../utils/otplease.js');\n\nconst pulseTillDone = require('../utils/pulse-till-done.js');\n\nconst readUserInfo = require('../utils/read-user-info.js');\n\nconst qrcode = url => new Promise(resolve => qrcodeTerminal.generate(url, resolve));\n\nconst knownProfileKeys = ['name', 'email', 'two-factor auth', 'fullname', 'homepage', 'freenode', 'twitter', 'github', 'created', 'updated'];\nconst writableProfileKeys = ['email', 'password', 'fullname', 'homepage', 'freenode', 'twitter', 'github'];\n\nconst BaseCommand = require('../base-command.js');\n\nclass Profile extends BaseCommand {\n  static description = 'Change settings on your registry profile';\n  static name = 'profile';\n  static usage = ['enable-2fa [auth-only|auth-and-writes]', 'disable-2fa', 'get [<key>]', 'set <key> <value>'];\n  static params = ['registry', 'json', 'parseable', 'otp'];\n  static ignoreImplicitWorkspace = true;\n\n  async completion(opts) {\n    var argv = opts.conf.argv.remain;\n\n    if (!argv[2]) {\n      return ['enable-2fa', 'disable-2fa', 'get', 'set'];\n    }\n\n    switch (argv[2]) {\n      case 'enable-2fa':\n      case 'enable-tfa':\n        return ['auth-and-writes', 'auth-only'];\n\n      case 'disable-2fa':\n      case 'disable-tfa':\n      case 'get':\n      case 'set':\n        return [];\n\n      default:\n        throw new Error(argv[2] + ' not recognized');\n    }\n  }\n\n  async exec(args) {\n    if (args.length === 0) {\n      throw this.usageError();\n    }\n\n    log.gauge.show('profile');\n    const [subcmd, ...opts] = args;\n\n    switch (subcmd) {\n      case 'enable-2fa':\n      case 'enable-tfa':\n      case 'enable2fa':\n      case 'enabletfa':\n        return this.enable2fa(opts);\n\n      case 'disable-2fa':\n      case 'disable-tfa':\n      case 'disable2fa':\n      case 'disabletfa':\n        return this.disable2fa();\n\n      case 'get':\n        return this.get(opts);\n\n      case 'set':\n        return this.set(opts);\n\n      default:\n        throw new Error('Unknown profile command: ' + subcmd);\n    }\n  }\n\n  async get(args) {\n    const tfa = 'two-factor auth';\n    const info = await pulseTillDone.withPromise(npmProfile.get({ ...this.npm.flatOptions\n    }));\n\n    if (!info.cidr_whitelist) {\n      delete info.cidr_whitelist;\n    }\n\n    if (this.npm.config.get('json')) {\n      this.npm.output(JSON.stringify(info, null, 2));\n      return;\n    } // clean up and format key/values for output\n\n\n    const cleaned = {};\n\n    for (const key of knownProfileKeys) {\n      cleaned[key] = info[key] || '';\n    }\n\n    const unknownProfileKeys = Object.keys(info).filter(k => !(k in cleaned));\n\n    for (const key of unknownProfileKeys) {\n      cleaned[key] = info[key] || '';\n    }\n\n    delete cleaned.tfa;\n    delete cleaned.email_verified;\n    cleaned.email += info.email_verified ? ' (verified)' : '(unverified)';\n\n    if (info.tfa && !info.tfa.pending) {\n      cleaned[tfa] = info.tfa.mode;\n    } else {\n      cleaned[tfa] = 'disabled';\n    }\n\n    if (args.length) {\n      const values = args // comma or space separated\n      .join(',').split(/,/).filter(arg => arg.trim() !== '').map(arg => cleaned[arg]).join('\\t');\n      this.npm.output(values);\n    } else {\n      if (this.npm.config.get('parseable')) {\n        for (const key of Object.keys(info)) {\n          if (key === 'tfa') {\n            this.npm.output(`${key}\\t${cleaned[tfa]}`);\n          } else {\n            this.npm.output(`${key}\\t${info[key]}`);\n          }\n        }\n      } else {\n        const table = new Table();\n\n        for (const key of Object.keys(cleaned)) {\n          table.push({\n            [chalk.bold(key)]: cleaned[key]\n          });\n        }\n\n        this.npm.output(table.toString());\n      }\n    }\n  }\n\n  async set(args) {\n    const conf = { ...this.npm.flatOptions\n    };\n    const prop = (args[0] || '').toLowerCase().trim();\n    let value = args.length > 1 ? args.slice(1).join(' ') : null;\n\n    const readPasswords = async () => {\n      const newpassword = await readUserInfo.password('New password: ');\n      const confirmedpassword = await readUserInfo.password('       Again:     ');\n\n      if (newpassword !== confirmedpassword) {\n        log.warn('profile', 'Passwords do not match, please try again.');\n        return readPasswords();\n      }\n\n      return newpassword;\n    };\n\n    if (prop !== 'password' && value === null) {\n      throw new Error('npm profile set <prop> <value>');\n    }\n\n    if (prop === 'password' && value !== null) {\n      throw new Error('npm profile set password\\n' + 'Do not include your current or new passwords on the command line.');\n    }\n\n    if (writableProfileKeys.indexOf(prop) === -1) {\n      throw new Error(`\"${prop}\" is not a property we can set. ` + `Valid properties are: ` + writableProfileKeys.join(', '));\n    }\n\n    if (prop === 'password') {\n      const current = await readUserInfo.password('Current password: ');\n      const newpassword = await readPasswords();\n      value = {\n        old: current,\n        new: newpassword\n      };\n    } // FIXME: Work around to not clear everything other than what we're setting\n\n\n    const user = await pulseTillDone.withPromise(npmProfile.get(conf));\n    const newUser = {};\n\n    for (const key of writableProfileKeys) {\n      newUser[key] = user[key];\n    }\n\n    newUser[prop] = value;\n    const result = await otplease(this.npm, conf, conf => npmProfile.set(newUser, conf));\n\n    if (this.npm.config.get('json')) {\n      this.npm.output(JSON.stringify({\n        [prop]: result[prop]\n      }, null, 2));\n    } else if (this.npm.config.get('parseable')) {\n      this.npm.output(prop + '\\t' + result[prop]);\n    } else if (result[prop] != null) {\n      this.npm.output('Set', prop, 'to', result[prop]);\n    } else {\n      this.npm.output('Set', prop);\n    }\n  }\n\n  async enable2fa(args) {\n    if (args.length > 1) {\n      throw new Error('npm profile enable-2fa [auth-and-writes|auth-only]');\n    }\n\n    const mode = args[0] || 'auth-and-writes';\n\n    if (mode !== 'auth-only' && mode !== 'auth-and-writes') {\n      throw new Error(`Invalid two-factor authentication mode \"${mode}\".\\n` + 'Valid modes are:\\n' + '  auth-only - Require two-factor authentication only when logging in\\n' + '  auth-and-writes - Require two-factor authentication when logging in ' + 'AND when publishing');\n    }\n\n    if (this.npm.config.get('json') || this.npm.config.get('parseable')) {\n      throw new Error('Enabling two-factor authentication is an interactive operation and ' + (this.npm.config.get('json') ? 'JSON' : 'parseable') + ' output mode is not available');\n    }\n\n    const info = {\n      tfa: {\n        mode: mode\n      }\n    }; // if they're using legacy auth currently then we have to\n    // update them to a bearer token before continuing.\n\n    const creds = this.npm.config.getCredentialsByURI(this.npm.config.get('registry'));\n    const auth = {};\n\n    if (creds.token) {\n      auth.token = creds.token;\n    } else if (creds.username) {\n      auth.basic = {\n        username: creds.username,\n        password: creds.password\n      };\n    } else if (creds.auth) {\n      const basic = Buffer.from(creds.auth, 'base64').toString().split(':', 2);\n      auth.basic = {\n        username: basic[0],\n        password: basic[1]\n      };\n    }\n\n    if (!auth.basic && !auth.token) {\n      throw new Error('You need to be logged in to registry ' + `${this.npm.config.get('registry')} in order to enable 2fa`);\n    }\n\n    if (auth.basic) {\n      log.info('profile', 'Updating authentication to bearer token');\n      const result = await npmProfile.createToken(auth.basic.password, false, [], { ...this.npm.flatOptions\n      });\n\n      if (!result.token) {\n        throw new Error(`Your registry ${this.npm.config.get('registry')} does not seem to ` + 'support bearer tokens. Bearer tokens are required for ' + 'two-factor authentication');\n      }\n\n      this.npm.config.setCredentialsByURI(this.npm.config.get('registry'), {\n        token: result.token\n      });\n      await this.npm.config.save('user');\n    }\n\n    log.notice('profile', 'Enabling two factor authentication for ' + mode);\n    const password = await readUserInfo.password();\n    info.tfa.password = password;\n    log.info('profile', 'Determine if tfa is pending');\n    const userInfo = await pulseTillDone.withPromise(npmProfile.get({ ...this.npm.flatOptions\n    }));\n    const conf = { ...this.npm.flatOptions\n    };\n\n    if (userInfo && userInfo.tfa && userInfo.tfa.pending) {\n      log.info('profile', 'Resetting two-factor authentication');\n      await pulseTillDone.withPromise(npmProfile.set({\n        tfa: {\n          password,\n          mode: 'disable'\n        }\n      }, conf));\n    } else if (userInfo && userInfo.tfa) {\n      if (!conf.otp) {\n        conf.otp = await readUserInfo.otp('Enter one-time password: ');\n      }\n    }\n\n    log.info('profile', 'Setting two-factor authentication to ' + mode);\n    const challenge = await pulseTillDone.withPromise(npmProfile.set(info, conf));\n\n    if (challenge.tfa === null) {\n      this.npm.output('Two factor authentication mode changed to: ' + mode);\n      return;\n    }\n\n    const badResponse = typeof challenge.tfa !== 'string' || !/^otpauth:[/][/]/.test(challenge.tfa);\n\n    if (badResponse) {\n      throw new Error('Unknown error enabling two-factor authentication. Expected otpauth URL' + ', got: ' + inspect(challenge.tfa));\n    }\n\n    const otpauth = new URL(challenge.tfa);\n    const secret = otpauth.searchParams.get('secret');\n    const code = await qrcode(challenge.tfa);\n    this.npm.output('Scan into your authenticator app:\\n' + code + '\\n Or enter code:', secret);\n    const interactiveOTP = await readUserInfo.otp('And an OTP code from your authenticator: ');\n    log.info('profile', 'Finalizing two-factor authentication');\n    const result = await npmProfile.set({\n      tfa: [interactiveOTP]\n    }, conf);\n    this.npm.output('2FA successfully enabled. Below are your recovery codes, ' + 'please print these out.');\n    this.npm.output('You will need these to recover access to your account ' + 'if you lose your authentication device.');\n\n    for (const tfaCode of result.tfa) {\n      this.npm.output('\\t' + tfaCode);\n    }\n  }\n\n  async disable2fa(args) {\n    const conf = { ...this.npm.flatOptions\n    };\n    const info = await pulseTillDone.withPromise(npmProfile.get(conf));\n\n    if (!info.tfa || info.tfa.pending) {\n      this.npm.output('Two factor authentication not enabled.');\n      return;\n    }\n\n    const password = await readUserInfo.password();\n\n    if (!conf.otp) {\n      const msg = 'Enter one-time password: ';\n      conf.otp = await readUserInfo.otp(msg);\n    }\n\n    log.info('profile', 'disabling tfa');\n    await pulseTillDone.withPromise(npmProfile.set({\n      tfa: {\n        password: password,\n        mode: 'disable'\n      }\n    }, conf));\n\n    if (this.npm.config.get('json')) {\n      this.npm.output(JSON.stringify({\n        tfa: false\n      }, null, 2));\n    } else if (this.npm.config.get('parseable')) {\n      this.npm.output('tfa\\tfalse');\n    } else {\n      this.npm.output('Two factor authentication disabled.');\n    }\n  }\n\n}\n\nmodule.exports = Profile;","map":{"version":3,"names":["inspect","require","URL","chalk","log","npmProfile","qrcodeTerminal","Table","otplease","pulseTillDone","readUserInfo","qrcode","url","Promise","resolve","generate","knownProfileKeys","writableProfileKeys","BaseCommand","Profile","description","name","usage","params","ignoreImplicitWorkspace","completion","opts","argv","conf","remain","Error","exec","args","length","usageError","gauge","show","subcmd","enable2fa","disable2fa","get","set","tfa","info","withPromise","npm","flatOptions","cidr_whitelist","config","output","JSON","stringify","cleaned","key","unknownProfileKeys","Object","keys","filter","k","email_verified","email","pending","mode","values","join","split","arg","trim","map","table","push","bold","toString","prop","toLowerCase","value","slice","readPasswords","newpassword","password","confirmedpassword","warn","indexOf","current","old","new","user","newUser","result","creds","getCredentialsByURI","auth","token","username","basic","Buffer","from","createToken","setCredentialsByURI","save","notice","userInfo","otp","challenge","badResponse","test","otpauth","secret","searchParams","code","interactiveOTP","tfaCode","msg","module","exports"],"sources":["/Users/chelsea/Documents/0_AllCoding/shoppingstories-v3/node_modules/npm/lib/commands/profile.js"],"sourcesContent":["const inspect = require('util').inspect\nconst { URL } = require('url')\nconst chalk = require('chalk')\nconst log = require('../utils/log-shim.js')\nconst npmProfile = require('npm-profile')\nconst qrcodeTerminal = require('qrcode-terminal')\nconst Table = require('cli-table3')\n\nconst otplease = require('../utils/otplease.js')\nconst pulseTillDone = require('../utils/pulse-till-done.js')\nconst readUserInfo = require('../utils/read-user-info.js')\n\nconst qrcode = url =>\n  new Promise((resolve) => qrcodeTerminal.generate(url, resolve))\n\nconst knownProfileKeys = [\n  'name',\n  'email',\n  'two-factor auth',\n  'fullname',\n  'homepage',\n  'freenode',\n  'twitter',\n  'github',\n  'created',\n  'updated',\n]\n\nconst writableProfileKeys = [\n  'email',\n  'password',\n  'fullname',\n  'homepage',\n  'freenode',\n  'twitter',\n  'github',\n]\n\nconst BaseCommand = require('../base-command.js')\nclass Profile extends BaseCommand {\n  static description = 'Change settings on your registry profile'\n  static name = 'profile'\n  static usage = [\n    'enable-2fa [auth-only|auth-and-writes]',\n    'disable-2fa',\n    'get [<key>]',\n    'set <key> <value>',\n  ]\n\n  static params = [\n    'registry',\n    'json',\n    'parseable',\n    'otp',\n  ]\n\n  static ignoreImplicitWorkspace = true\n\n  async completion (opts) {\n    var argv = opts.conf.argv.remain\n\n    if (!argv[2]) {\n      return ['enable-2fa', 'disable-2fa', 'get', 'set']\n    }\n\n    switch (argv[2]) {\n      case 'enable-2fa':\n      case 'enable-tfa':\n        return ['auth-and-writes', 'auth-only']\n\n      case 'disable-2fa':\n      case 'disable-tfa':\n      case 'get':\n      case 'set':\n        return []\n      default:\n        throw new Error(argv[2] + ' not recognized')\n    }\n  }\n\n  async exec (args) {\n    if (args.length === 0) {\n      throw this.usageError()\n    }\n\n    log.gauge.show('profile')\n\n    const [subcmd, ...opts] = args\n\n    switch (subcmd) {\n      case 'enable-2fa':\n      case 'enable-tfa':\n      case 'enable2fa':\n      case 'enabletfa':\n        return this.enable2fa(opts)\n      case 'disable-2fa':\n      case 'disable-tfa':\n      case 'disable2fa':\n      case 'disabletfa':\n        return this.disable2fa()\n      case 'get':\n        return this.get(opts)\n      case 'set':\n        return this.set(opts)\n      default:\n        throw new Error('Unknown profile command: ' + subcmd)\n    }\n  }\n\n  async get (args) {\n    const tfa = 'two-factor auth'\n    const info = await pulseTillDone.withPromise(\n      npmProfile.get({ ...this.npm.flatOptions })\n    )\n\n    if (!info.cidr_whitelist) {\n      delete info.cidr_whitelist\n    }\n\n    if (this.npm.config.get('json')) {\n      this.npm.output(JSON.stringify(info, null, 2))\n      return\n    }\n\n    // clean up and format key/values for output\n    const cleaned = {}\n    for (const key of knownProfileKeys) {\n      cleaned[key] = info[key] || ''\n    }\n\n    const unknownProfileKeys = Object.keys(info).filter((k) => !(k in cleaned))\n    for (const key of unknownProfileKeys) {\n      cleaned[key] = info[key] || ''\n    }\n\n    delete cleaned.tfa\n    delete cleaned.email_verified\n    cleaned.email += info.email_verified ? ' (verified)' : '(unverified)'\n\n    if (info.tfa && !info.tfa.pending) {\n      cleaned[tfa] = info.tfa.mode\n    } else {\n      cleaned[tfa] = 'disabled'\n    }\n\n    if (args.length) {\n      const values = args // comma or space separated\n        .join(',')\n        .split(/,/)\n        .filter((arg) => arg.trim() !== '')\n        .map((arg) => cleaned[arg])\n        .join('\\t')\n      this.npm.output(values)\n    } else {\n      if (this.npm.config.get('parseable')) {\n        for (const key of Object.keys(info)) {\n          if (key === 'tfa') {\n            this.npm.output(`${key}\\t${cleaned[tfa]}`)\n          } else {\n            this.npm.output(`${key}\\t${info[key]}`)\n          }\n        }\n      } else {\n        const table = new Table()\n        for (const key of Object.keys(cleaned)) {\n          table.push({ [chalk.bold(key)]: cleaned[key] })\n        }\n\n        this.npm.output(table.toString())\n      }\n    }\n  }\n\n  async set (args) {\n    const conf = { ...this.npm.flatOptions }\n    const prop = (args[0] || '').toLowerCase().trim()\n\n    let value = args.length > 1 ? args.slice(1).join(' ') : null\n\n    const readPasswords = async () => {\n      const newpassword = await readUserInfo.password('New password: ')\n      const confirmedpassword = await readUserInfo.password('       Again:     ')\n\n      if (newpassword !== confirmedpassword) {\n        log.warn('profile', 'Passwords do not match, please try again.')\n        return readPasswords()\n      }\n\n      return newpassword\n    }\n\n    if (prop !== 'password' && value === null) {\n      throw new Error('npm profile set <prop> <value>')\n    }\n\n    if (prop === 'password' && value !== null) {\n      throw new Error(\n        'npm profile set password\\n' +\n        'Do not include your current or new passwords on the command line.')\n    }\n\n    if (writableProfileKeys.indexOf(prop) === -1) {\n      throw new Error(`\"${prop}\" is not a property we can set. ` +\n        `Valid properties are: ` + writableProfileKeys.join(', '))\n    }\n\n    if (prop === 'password') {\n      const current = await readUserInfo.password('Current password: ')\n      const newpassword = await readPasswords()\n\n      value = { old: current, new: newpassword }\n    }\n\n    // FIXME: Work around to not clear everything other than what we're setting\n    const user = await pulseTillDone.withPromise(npmProfile.get(conf))\n    const newUser = {}\n\n    for (const key of writableProfileKeys) {\n      newUser[key] = user[key]\n    }\n\n    newUser[prop] = value\n\n    const result = await otplease(this.npm, conf, conf => npmProfile.set(newUser, conf))\n\n    if (this.npm.config.get('json')) {\n      this.npm.output(JSON.stringify({ [prop]: result[prop] }, null, 2))\n    } else if (this.npm.config.get('parseable')) {\n      this.npm.output(prop + '\\t' + result[prop])\n    } else if (result[prop] != null) {\n      this.npm.output('Set', prop, 'to', result[prop])\n    } else {\n      this.npm.output('Set', prop)\n    }\n  }\n\n  async enable2fa (args) {\n    if (args.length > 1) {\n      throw new Error('npm profile enable-2fa [auth-and-writes|auth-only]')\n    }\n\n    const mode = args[0] || 'auth-and-writes'\n    if (mode !== 'auth-only' && mode !== 'auth-and-writes') {\n      throw new Error(\n        `Invalid two-factor authentication mode \"${mode}\".\\n` +\n        'Valid modes are:\\n' +\n        '  auth-only - Require two-factor authentication only when logging in\\n' +\n        '  auth-and-writes - Require two-factor authentication when logging in ' +\n        'AND when publishing'\n      )\n    }\n\n    if (this.npm.config.get('json') || this.npm.config.get('parseable')) {\n      throw new Error(\n        'Enabling two-factor authentication is an interactive operation and ' +\n        (this.npm.config.get('json') ? 'JSON' : 'parseable') + ' output mode is not available'\n      )\n    }\n\n    const info = {\n      tfa: {\n        mode: mode,\n      },\n    }\n\n    // if they're using legacy auth currently then we have to\n    // update them to a bearer token before continuing.\n    const creds = this.npm.config.getCredentialsByURI(this.npm.config.get('registry'))\n    const auth = {}\n\n    if (creds.token) {\n      auth.token = creds.token\n    } else if (creds.username) {\n      auth.basic = { username: creds.username, password: creds.password }\n    } else if (creds.auth) {\n      const basic = Buffer.from(creds.auth, 'base64').toString().split(':', 2)\n      auth.basic = { username: basic[0], password: basic[1] }\n    }\n\n    if (!auth.basic && !auth.token) {\n      throw new Error(\n        'You need to be logged in to registry ' +\n        `${this.npm.config.get('registry')} in order to enable 2fa`\n      )\n    }\n\n    if (auth.basic) {\n      log.info('profile', 'Updating authentication to bearer token')\n      const result = await npmProfile.createToken(\n        auth.basic.password, false, [], { ...this.npm.flatOptions }\n      )\n\n      if (!result.token) {\n        throw new Error(\n          `Your registry ${this.npm.config.get('registry')} does not seem to ` +\n          'support bearer tokens. Bearer tokens are required for ' +\n          'two-factor authentication'\n        )\n      }\n\n      this.npm.config.setCredentialsByURI(\n        this.npm.config.get('registry'),\n        { token: result.token }\n      )\n      await this.npm.config.save('user')\n    }\n\n    log.notice('profile', 'Enabling two factor authentication for ' + mode)\n    const password = await readUserInfo.password()\n    info.tfa.password = password\n\n    log.info('profile', 'Determine if tfa is pending')\n    const userInfo = await pulseTillDone.withPromise(\n      npmProfile.get({ ...this.npm.flatOptions })\n    )\n\n    const conf = { ...this.npm.flatOptions }\n    if (userInfo && userInfo.tfa && userInfo.tfa.pending) {\n      log.info('profile', 'Resetting two-factor authentication')\n      await pulseTillDone.withPromise(\n        npmProfile.set({ tfa: { password, mode: 'disable' } }, conf)\n      )\n    } else if (userInfo && userInfo.tfa) {\n      if (!conf.otp) {\n        conf.otp = await readUserInfo.otp(\n          'Enter one-time password: '\n        )\n      }\n    }\n\n    log.info('profile', 'Setting two-factor authentication to ' + mode)\n    const challenge = await pulseTillDone.withPromise(\n      npmProfile.set(info, conf)\n    )\n\n    if (challenge.tfa === null) {\n      this.npm.output('Two factor authentication mode changed to: ' + mode)\n      return\n    }\n\n    const badResponse = typeof challenge.tfa !== 'string'\n      || !/^otpauth:[/][/]/.test(challenge.tfa)\n    if (badResponse) {\n      throw new Error(\n        'Unknown error enabling two-factor authentication. Expected otpauth URL' +\n        ', got: ' + inspect(challenge.tfa)\n      )\n    }\n\n    const otpauth = new URL(challenge.tfa)\n    const secret = otpauth.searchParams.get('secret')\n    const code = await qrcode(challenge.tfa)\n\n    this.npm.output(\n      'Scan into your authenticator app:\\n' + code + '\\n Or enter code:', secret\n    )\n\n    const interactiveOTP =\n      await readUserInfo.otp('And an OTP code from your authenticator: ')\n\n    log.info('profile', 'Finalizing two-factor authentication')\n\n    const result = await npmProfile.set({ tfa: [interactiveOTP] }, conf)\n\n    this.npm.output(\n      '2FA successfully enabled. Below are your recovery codes, ' +\n      'please print these out.'\n    )\n    this.npm.output(\n      'You will need these to recover access to your account ' +\n      'if you lose your authentication device.'\n    )\n\n    for (const tfaCode of result.tfa) {\n      this.npm.output('\\t' + tfaCode)\n    }\n  }\n\n  async disable2fa (args) {\n    const conf = { ...this.npm.flatOptions }\n    const info = await pulseTillDone.withPromise(npmProfile.get(conf))\n\n    if (!info.tfa || info.tfa.pending) {\n      this.npm.output('Two factor authentication not enabled.')\n      return\n    }\n\n    const password = await readUserInfo.password()\n\n    if (!conf.otp) {\n      const msg = 'Enter one-time password: '\n      conf.otp = await readUserInfo.otp(msg)\n    }\n\n    log.info('profile', 'disabling tfa')\n\n    await pulseTillDone.withPromise(npmProfile.set({\n      tfa: { password: password, mode: 'disable' },\n    }, conf))\n\n    if (this.npm.config.get('json')) {\n      this.npm.output(JSON.stringify({ tfa: false }, null, 2))\n    } else if (this.npm.config.get('parseable')) {\n      this.npm.output('tfa\\tfalse')\n    } else {\n      this.npm.output('Two factor authentication disabled.')\n    }\n  }\n}\nmodule.exports = Profile\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}