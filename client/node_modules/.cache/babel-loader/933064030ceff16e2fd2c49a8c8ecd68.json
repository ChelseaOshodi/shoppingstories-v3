{"ast":null,"code":"const calculateDelta = (now, date) => Math.round(Math.abs(now - date) / 1000);\n\nexport default function relativeDateFactory(translations) {\n  return function relativeDate(date) {\n    let now = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : new Date();\n\n    if (!(date instanceof Date)) {\n      date = new Date(date);\n    }\n\n    let delta = null;\n    const minute = 60;\n    const hour = minute * 60;\n    const day = hour * 24;\n    const week = day * 7;\n    const month = day * 30;\n    const year = day * 365;\n    delta = calculateDelta(now, date);\n\n    if (delta > day && delta < week) {\n      date = new Date(date.getFullYear(), date.getMonth(), date.getDate(), 0, 0, 0);\n      delta = calculateDelta(now, date);\n    }\n\n    const translate = (translatePhrase, timeValue) => {\n      let key;\n\n      if (translatePhrase === 'justNow') {\n        key = translatePhrase;\n      } else if (now >= date) {\n        key = `${translatePhrase}Ago`;\n      } else {\n        key = `${translatePhrase}FromNow`;\n      }\n\n      const translation = translations[key];\n\n      if (typeof translation === 'function') {\n        return translation(timeValue);\n      }\n\n      return translation.replace('{{time}}', timeValue);\n    };\n\n    switch (false) {\n      case !(delta < 30):\n        return translate('justNow');\n\n      case !(delta < minute):\n        return translate('seconds', delta);\n\n      case !(delta < 2 * minute):\n        return translate('aMinute');\n\n      case !(delta < hour):\n        return translate('minutes', Math.floor(delta / minute));\n\n      case Math.floor(delta / hour) !== 1:\n        return translate('anHour');\n\n      case !(delta < day):\n        return translate('hours', Math.floor(delta / hour));\n\n      case !(delta < day * 2):\n        return translate('aDay');\n\n      case !(delta < week):\n        return translate('days', Math.floor(delta / day));\n\n      case Math.floor(delta / week) !== 1:\n        return translate('aWeek');\n\n      case !(delta < month):\n        return translate('weeks', Math.floor(delta / week));\n\n      case Math.floor(delta / month) !== 1:\n        return translate('aMonth');\n\n      case !(delta < year):\n        return translate('months', Math.floor(delta / month));\n\n      case Math.floor(delta / year) !== 1:\n        return translate('aYear');\n\n      default:\n        return translate('overAYear');\n    }\n  };\n}","map":{"version":3,"names":["calculateDelta","now","date","Math","round","abs","relativeDateFactory","translations","relativeDate","Date","delta","minute","hour","day","week","month","year","getFullYear","getMonth","getDate","translate","translatePhrase","timeValue","key","translation","replace","floor"],"sources":["/Users/chelsea/Documents/0_AllCoding/shoppingstories-v3/node_modules/npm/node_modules/tiny-relative-date/src/factory.js"],"sourcesContent":["const calculateDelta = (now, date) => Math.round(Math.abs(now - date) / 1000)\n\nexport default function relativeDateFactory (translations) {\n  return function relativeDate (date, now = new Date()) {\n    if (!(date instanceof Date)) {\n      date = new Date(date)\n    }\n\n    let delta = null\n\n    const minute = 60\n    const hour = minute * 60\n    const day = hour * 24\n    const week = day * 7\n    const month = day * 30\n    const year = day * 365\n\n    delta = calculateDelta(now, date)\n\n    if (delta > day && delta < week) {\n      date = new Date(date.getFullYear(), date.getMonth(), date.getDate(), 0, 0, 0)\n      delta = calculateDelta(now, date)\n    }\n\n    const translate = (translatePhrase, timeValue) => {\n      let key\n\n      if (translatePhrase === 'justNow') {\n        key = translatePhrase\n      } else if (now >= date) {\n        key = `${translatePhrase}Ago`\n      } else {\n        key = `${translatePhrase}FromNow`\n      }\n\n      const translation = translations[key]\n\n      if (typeof translation === 'function') {\n        return translation(timeValue)\n      }\n\n      return translation.replace('{{time}}', timeValue)\n    }\n\n    switch (false) {\n      case !(delta < 30):\n        return translate('justNow')\n\n      case !(delta < minute):\n        return translate('seconds', delta)\n\n      case !(delta < 2 * minute):\n        return translate('aMinute')\n\n      case !(delta < hour):\n        return translate('minutes', Math.floor(delta / minute))\n\n      case Math.floor(delta / hour) !== 1:\n        return translate('anHour')\n\n      case !(delta < day):\n        return translate('hours', Math.floor(delta / hour))\n\n      case !(delta < day * 2):\n        return translate('aDay')\n\n      case !(delta < week):\n        return translate('days', Math.floor(delta / day))\n\n      case Math.floor(delta / week) !== 1:\n        return translate('aWeek')\n\n      case !(delta < month):\n        return translate('weeks', Math.floor(delta / week))\n\n      case Math.floor(delta / month) !== 1:\n        return translate('aMonth')\n\n      case !(delta < year):\n        return translate('months', Math.floor(delta / month))\n\n      case Math.floor(delta / year) !== 1:\n        return translate('aYear')\n\n      default:\n        return translate('overAYear')\n    }\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}