{"ast":null,"code":"const fs = require('fs');\n\nconst {\n  promisify\n} = require('util');\n\nconst {\n  readFileSync\n} = fs;\nconst readFile = promisify(fs.readFile);\n\nconst extractPath = (path, cmdshimContents) => {\n  if (/[.]cmd$/.test(path)) {\n    return extractPathFromCmd(cmdshimContents);\n  } else if (/[.]ps1$/.test(path)) {\n    return extractPathFromPowershell(cmdshimContents);\n  } else {\n    return extractPathFromCygwin(cmdshimContents);\n  }\n};\n\nconst extractPathFromPowershell = cmdshimContents => {\n  const matches = cmdshimContents.match(/\"[$]basedir[/]([^\"]+?)\"\\s+[$]args/);\n  return matches && matches[1];\n};\n\nconst extractPathFromCmd = cmdshimContents => {\n  const matches = cmdshimContents.match(/\"%(?:~dp0|dp0%)\\\\([^\"]+?)\"\\s+%[*]/);\n  return matches && matches[1];\n};\n\nconst extractPathFromCygwin = cmdshimContents => {\n  const matches = cmdshimContents.match(/\"[$]basedir[/]([^\"]+?)\"\\s+\"[$]@\"/);\n  return matches && matches[1];\n};\n\nconst wrapError = (thrown, newError) => {\n  newError.message = thrown.message;\n  newError.code = thrown.code;\n  newError.path = thrown.path;\n  return newError;\n};\n\nconst notaShim = (path, er) => {\n  if (!er) {\n    er = new Error();\n    Error.captureStackTrace(er, notaShim);\n  }\n\n  er.code = 'ENOTASHIM';\n  er.message = `Can't read shim path from '${path}', ` + `it doesn't appear to be a cmd-shim`;\n  return er;\n};\n\nconst readCmdShim = path => {\n  // create a new error to capture the stack trace from this point,\n  // instead of getting some opaque stack into node's internals\n  const er = new Error();\n  Error.captureStackTrace(er, readCmdShim);\n  return readFile(path).then(contents => {\n    const destination = extractPath(path, contents.toString());\n\n    if (destination) {\n      return destination;\n    }\n\n    return Promise.reject(notaShim(path, er));\n  }, readFileEr => Promise.reject(wrapError(readFileEr, er)));\n};\n\nconst readCmdShimSync = path => {\n  const contents = readFileSync(path);\n  const destination = extractPath(path, contents.toString());\n\n  if (!destination) {\n    throw notaShim(path);\n  }\n\n  return destination;\n};\n\nreadCmdShim.sync = readCmdShimSync;\nmodule.exports = readCmdShim;","map":{"version":3,"names":["fs","require","promisify","readFileSync","readFile","extractPath","path","cmdshimContents","test","extractPathFromCmd","extractPathFromPowershell","extractPathFromCygwin","matches","match","wrapError","thrown","newError","message","code","notaShim","er","Error","captureStackTrace","readCmdShim","then","contents","destination","toString","Promise","reject","readFileEr","readCmdShimSync","sync","module","exports"],"sources":["/Users/chelsea/Documents/0_AllCoding/shoppingstories-v3/node_modules/npm/node_modules/read-cmd-shim/lib/index.js"],"sourcesContent":["const fs = require('fs')\nconst { promisify } = require('util')\nconst { readFileSync } = fs\nconst readFile = promisify(fs.readFile)\n\nconst extractPath = (path, cmdshimContents) => {\n  if (/[.]cmd$/.test(path)) {\n    return extractPathFromCmd(cmdshimContents)\n  } else if (/[.]ps1$/.test(path)) {\n    return extractPathFromPowershell(cmdshimContents)\n  } else {\n    return extractPathFromCygwin(cmdshimContents)\n  }\n}\n\nconst extractPathFromPowershell = cmdshimContents => {\n  const matches = cmdshimContents.match(/\"[$]basedir[/]([^\"]+?)\"\\s+[$]args/)\n  return matches && matches[1]\n}\n\nconst extractPathFromCmd = cmdshimContents => {\n  const matches = cmdshimContents.match(/\"%(?:~dp0|dp0%)\\\\([^\"]+?)\"\\s+%[*]/)\n  return matches && matches[1]\n}\n\nconst extractPathFromCygwin = cmdshimContents => {\n  const matches = cmdshimContents.match(/\"[$]basedir[/]([^\"]+?)\"\\s+\"[$]@\"/)\n  return matches && matches[1]\n}\n\nconst wrapError = (thrown, newError) => {\n  newError.message = thrown.message\n  newError.code = thrown.code\n  newError.path = thrown.path\n  return newError\n}\n\nconst notaShim = (path, er) => {\n  if (!er) {\n    er = new Error()\n    Error.captureStackTrace(er, notaShim)\n  }\n  er.code = 'ENOTASHIM'\n  er.message = `Can't read shim path from '${path}', ` +\n    `it doesn't appear to be a cmd-shim`\n  return er\n}\n\nconst readCmdShim = path => {\n  // create a new error to capture the stack trace from this point,\n  // instead of getting some opaque stack into node's internals\n  const er = new Error()\n  Error.captureStackTrace(er, readCmdShim)\n  return readFile(path).then(contents => {\n    const destination = extractPath(path, contents.toString())\n    if (destination) {\n      return destination\n    }\n    return Promise.reject(notaShim(path, er))\n  }, readFileEr => Promise.reject(wrapError(readFileEr, er)))\n}\n\nconst readCmdShimSync = path => {\n  const contents = readFileSync(path)\n  const destination = extractPath(path, contents.toString())\n  if (!destination) {\n    throw notaShim(path)\n  }\n  return destination\n}\n\nreadCmdShim.sync = readCmdShimSync\nmodule.exports = readCmdShim\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}