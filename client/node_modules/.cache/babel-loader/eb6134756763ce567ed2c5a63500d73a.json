{"ast":null,"code":"const archy = require('archy');\n\nconst Arborist = require('@npmcli/arborist');\n\nconst chalk = require('chalk');\n\nconst pacote = require('pacote');\n\nconst semver = require('semver');\n\nconst npa = require('npm-package-arg');\n\nconst {\n  depth\n} = require('treeverse');\n\nconst {\n  readTree: getFundingInfo,\n  normalizeFunding,\n  isValidFunding\n} = require('libnpmfund');\n\nconst completion = require('../utils/completion/installed-deep.js');\n\nconst openUrl = require('../utils/open-url.js');\n\nconst ArboristWorkspaceCmd = require('../arborist-cmd.js');\n\nconst getPrintableName = _ref => {\n  let {\n    name,\n    version\n  } = _ref;\n  const printableVersion = version ? `@${version}` : '';\n  return `${name}${printableVersion}`;\n};\n\nclass Fund extends ArboristWorkspaceCmd {\n  static description = 'Retrieve funding information';\n  static name = 'fund';\n  static params = ['json', 'browser', 'unicode', 'workspace', 'which'];\n  static usage = ['[<package-spec>]']; // TODO\n\n  /* istanbul ignore next */\n\n  async completion(opts) {\n    return completion(this.npm, opts);\n  }\n\n  async exec(args) {\n    const spec = args[0];\n    const numberArg = this.npm.config.get('which');\n    const fundingSourceNumber = numberArg && parseInt(numberArg, 10);\n    const badFundingSourceNumber = numberArg !== null && (String(fundingSourceNumber) !== numberArg || fundingSourceNumber < 1);\n\n    if (badFundingSourceNumber) {\n      const err = new Error('`npm fund [<@scope>/]<pkg> [--which=fundingSourceNumber]` must be given a positive integer');\n      err.code = 'EFUNDNUMBER';\n      throw err;\n    }\n\n    if (this.npm.global) {\n      const err = new Error('`npm fund` does not support global packages');\n      err.code = 'EFUNDGLOBAL';\n      throw err;\n    }\n\n    const where = this.npm.prefix;\n    const arb = new Arborist({ ...this.npm.flatOptions,\n      path: where\n    });\n    const tree = await arb.loadActual();\n\n    if (spec) {\n      await this.openFundingUrl({\n        path: where,\n        tree,\n        spec,\n        fundingSourceNumber\n      });\n      return;\n    } // TODO: add !workspacesEnabled option handling to libnpmfund\n\n\n    const fundingInfo = getFundingInfo(tree, { ...this.flatOptions,\n      workspaces: this.workspaceNames\n    });\n\n    if (this.npm.config.get('json')) {\n      this.npm.output(this.printJSON(fundingInfo));\n    } else {\n      this.npm.output(this.printHuman(fundingInfo));\n    }\n  }\n\n  printJSON(fundingInfo) {\n    return JSON.stringify(fundingInfo, null, 2);\n  }\n\n  printHuman(fundingInfo) {\n    const color = this.npm.color;\n    const unicode = this.npm.config.get('unicode');\n    const seenUrls = new Map();\n\n    const tree = obj => archy(obj, '', {\n      unicode\n    });\n\n    const result = depth({\n      tree: fundingInfo,\n      // composes human readable package name\n      // and creates a new archy item for readable output\n      visit: _ref2 => {\n        let {\n          name,\n          version,\n          funding\n        } = _ref2;\n        const [fundingSource] = [].concat(normalizeFunding(funding)).filter(isValidFunding);\n        const {\n          url\n        } = fundingSource || {};\n        const pkgRef = getPrintableName({\n          name,\n          version\n        });\n        let item = {\n          label: pkgRef\n        };\n\n        if (url) {\n          item.label = tree({\n            label: color ? chalk.bgBlack.white(url) : url,\n            nodes: [pkgRef]\n          }).trim(); // stacks all packages together under the same item\n\n          if (seenUrls.has(url)) {\n            item = seenUrls.get(url);\n            item.label += `, ${pkgRef}`;\n            return null;\n          } else {\n            seenUrls.set(url, item);\n          }\n        }\n\n        return item;\n      },\n      // puts child nodes back into returned archy\n      // output while also filtering out missing items\n      leave: (item, children) => {\n        if (item) {\n          item.nodes = children.filter(Boolean);\n        }\n\n        return item;\n      },\n      // turns tree-like object return by libnpmfund\n      // into children to be properly read by treeverse\n      getChildren: node => Object.keys(node.dependencies || {}).map(key => ({\n        name: key,\n        ...node.dependencies[key]\n      }))\n    });\n    const res = tree(result);\n    return color ? chalk.reset(res) : res;\n  }\n\n  async openFundingUrl(_ref3) {\n    let {\n      path,\n      tree,\n      spec,\n      fundingSourceNumber\n    } = _ref3;\n    const arg = npa(spec, path);\n\n    const retrievePackageMetadata = () => {\n      if (arg.type === 'directory') {\n        if (tree.path === arg.fetchSpec) {\n          // matches cwd, e.g: npm fund .\n          return tree.package;\n        } else {\n          // matches any file path within current arborist inventory\n          for (const item of tree.inventory.values()) {\n            if (item.path === arg.fetchSpec) {\n              return item.package;\n            }\n          }\n        }\n      } else {\n        // tries to retrieve a package from arborist inventory\n        // by matching resulted package name from the provided spec\n        const [item] = [...tree.inventory.query('name', arg.name)].filter(i => semver.valid(i.package.version)).sort((a, b) => semver.rcompare(a.package.version, b.package.version));\n\n        if (item) {\n          return item.package;\n        }\n      }\n    };\n\n    const {\n      funding\n    } = retrievePackageMetadata() || (await pacote.manifest(arg, this.npm.flatOptions).catch(() => ({})));\n    const validSources = [].concat(normalizeFunding(funding)).filter(isValidFunding);\n    const matchesValidSource = validSources.length === 1 || fundingSourceNumber > 0 && fundingSourceNumber <= validSources.length;\n\n    if (matchesValidSource) {\n      const index = fundingSourceNumber ? fundingSourceNumber - 1 : 0;\n      const {\n        type,\n        url\n      } = validSources[index];\n      const typePrefix = type ? `${type} funding` : 'Funding';\n      const msg = `${typePrefix} available at the following URL`;\n      return openUrl(this.npm, url, msg);\n    } else if (validSources.length && !(fundingSourceNumber >= 1)) {\n      validSources.forEach((_ref4, i) => {\n        let {\n          type,\n          url\n        } = _ref4;\n        const typePrefix = type ? `${type} funding` : 'Funding';\n        const msg = `${typePrefix} available at the following URL`;\n        this.npm.output(`${i + 1}: ${msg}: ${url}`);\n      });\n      this.npm.output(\n      /* eslint-disable-next-line max-len */\n      'Run `npm fund [<@scope>/]<pkg> --which=1`, for example, to open the first funding URL listed in that package');\n    } else {\n      const noFundingError = new Error(`No valid funding method available for: ${spec}`);\n      noFundingError.code = 'ENOFUND';\n      throw noFundingError;\n    }\n  }\n\n}\n\nmodule.exports = Fund;","map":{"version":3,"names":["archy","require","Arborist","chalk","pacote","semver","npa","depth","readTree","getFundingInfo","normalizeFunding","isValidFunding","completion","openUrl","ArboristWorkspaceCmd","getPrintableName","name","version","printableVersion","Fund","description","params","usage","opts","npm","exec","args","spec","numberArg","config","get","fundingSourceNumber","parseInt","badFundingSourceNumber","String","err","Error","code","global","where","prefix","arb","flatOptions","path","tree","loadActual","openFundingUrl","fundingInfo","workspaces","workspaceNames","output","printJSON","printHuman","JSON","stringify","color","unicode","seenUrls","Map","obj","result","visit","funding","fundingSource","concat","filter","url","pkgRef","item","label","bgBlack","white","nodes","trim","has","set","leave","children","Boolean","getChildren","node","Object","keys","dependencies","map","key","res","reset","arg","retrievePackageMetadata","type","fetchSpec","package","inventory","values","query","i","valid","sort","a","b","rcompare","manifest","catch","validSources","matchesValidSource","length","index","typePrefix","msg","forEach","noFundingError","module","exports"],"sources":["/Users/chelsea/Documents/0_AllCoding/shoppingstories-v3/node_modules/npm/lib/commands/fund.js"],"sourcesContent":["const archy = require('archy')\nconst Arborist = require('@npmcli/arborist')\nconst chalk = require('chalk')\nconst pacote = require('pacote')\nconst semver = require('semver')\nconst npa = require('npm-package-arg')\nconst { depth } = require('treeverse')\nconst { readTree: getFundingInfo, normalizeFunding, isValidFunding } = require('libnpmfund')\n\nconst completion = require('../utils/completion/installed-deep.js')\nconst openUrl = require('../utils/open-url.js')\nconst ArboristWorkspaceCmd = require('../arborist-cmd.js')\n\nconst getPrintableName = ({ name, version }) => {\n  const printableVersion = version ? `@${version}` : ''\n  return `${name}${printableVersion}`\n}\n\nclass Fund extends ArboristWorkspaceCmd {\n  static description = 'Retrieve funding information'\n  static name = 'fund'\n  static params = ['json', 'browser', 'unicode', 'workspace', 'which']\n  static usage = ['[<package-spec>]']\n\n  // TODO\n  /* istanbul ignore next */\n  async completion (opts) {\n    return completion(this.npm, opts)\n  }\n\n  async exec (args) {\n    const spec = args[0]\n    const numberArg = this.npm.config.get('which')\n\n    const fundingSourceNumber = numberArg && parseInt(numberArg, 10)\n\n    const badFundingSourceNumber =\n      numberArg !== null && (String(fundingSourceNumber) !== numberArg || fundingSourceNumber < 1)\n\n    if (badFundingSourceNumber) {\n      const err = new Error(\n        '`npm fund [<@scope>/]<pkg> [--which=fundingSourceNumber]` must be given a positive integer'\n      )\n      err.code = 'EFUNDNUMBER'\n      throw err\n    }\n\n    if (this.npm.global) {\n      const err = new Error('`npm fund` does not support global packages')\n      err.code = 'EFUNDGLOBAL'\n      throw err\n    }\n\n    const where = this.npm.prefix\n    const arb = new Arborist({ ...this.npm.flatOptions, path: where })\n    const tree = await arb.loadActual()\n\n    if (spec) {\n      await this.openFundingUrl({\n        path: where,\n        tree,\n        spec,\n        fundingSourceNumber,\n      })\n      return\n    }\n\n    // TODO: add !workspacesEnabled option handling to libnpmfund\n    const fundingInfo = getFundingInfo(tree, {\n      ...this.flatOptions,\n      workspaces: this.workspaceNames,\n    })\n\n    if (this.npm.config.get('json')) {\n      this.npm.output(this.printJSON(fundingInfo))\n    } else {\n      this.npm.output(this.printHuman(fundingInfo))\n    }\n  }\n\n  printJSON (fundingInfo) {\n    return JSON.stringify(fundingInfo, null, 2)\n  }\n\n  printHuman (fundingInfo) {\n    const color = this.npm.color\n    const unicode = this.npm.config.get('unicode')\n    const seenUrls = new Map()\n\n    const tree = obj => archy(obj, '', { unicode })\n\n    const result = depth({\n      tree: fundingInfo,\n\n      // composes human readable package name\n      // and creates a new archy item for readable output\n      visit: ({ name, version, funding }) => {\n        const [fundingSource] = [].concat(normalizeFunding(funding)).filter(isValidFunding)\n        const { url } = fundingSource || {}\n        const pkgRef = getPrintableName({ name, version })\n        let item = {\n          label: pkgRef,\n        }\n\n        if (url) {\n          item.label = tree({\n            label: color ? chalk.bgBlack.white(url) : url,\n            nodes: [pkgRef],\n          }).trim()\n\n          // stacks all packages together under the same item\n          if (seenUrls.has(url)) {\n            item = seenUrls.get(url)\n            item.label += `, ${pkgRef}`\n            return null\n          } else {\n            seenUrls.set(url, item)\n          }\n        }\n\n        return item\n      },\n\n      // puts child nodes back into returned archy\n      // output while also filtering out missing items\n      leave: (item, children) => {\n        if (item) {\n          item.nodes = children.filter(Boolean)\n        }\n\n        return item\n      },\n\n      // turns tree-like object return by libnpmfund\n      // into children to be properly read by treeverse\n      getChildren: node =>\n        Object.keys(node.dependencies || {}).map(key => ({\n          name: key,\n          ...node.dependencies[key],\n        })),\n    })\n\n    const res = tree(result)\n    return color ? chalk.reset(res) : res\n  }\n\n  async openFundingUrl ({ path, tree, spec, fundingSourceNumber }) {\n    const arg = npa(spec, path)\n    const retrievePackageMetadata = () => {\n      if (arg.type === 'directory') {\n        if (tree.path === arg.fetchSpec) {\n          // matches cwd, e.g: npm fund .\n          return tree.package\n        } else {\n          // matches any file path within current arborist inventory\n          for (const item of tree.inventory.values()) {\n            if (item.path === arg.fetchSpec) {\n              return item.package\n            }\n          }\n        }\n      } else {\n        // tries to retrieve a package from arborist inventory\n        // by matching resulted package name from the provided spec\n        const [item] = [...tree.inventory.query('name', arg.name)]\n          .filter(i => semver.valid(i.package.version))\n          .sort((a, b) => semver.rcompare(a.package.version, b.package.version))\n\n        if (item) {\n          return item.package\n        }\n      }\n    }\n\n    const { funding } =\n      retrievePackageMetadata() ||\n      (await pacote.manifest(arg, this.npm.flatOptions).catch(() => ({})))\n\n    const validSources = [].concat(normalizeFunding(funding)).filter(isValidFunding)\n\n    const matchesValidSource =\n      validSources.length === 1 ||\n      (fundingSourceNumber > 0 && fundingSourceNumber <= validSources.length)\n\n    if (matchesValidSource) {\n      const index = fundingSourceNumber ? fundingSourceNumber - 1 : 0\n      const { type, url } = validSources[index]\n      const typePrefix = type ? `${type} funding` : 'Funding'\n      const msg = `${typePrefix} available at the following URL`\n      return openUrl(this.npm, url, msg)\n    } else if (validSources.length && !(fundingSourceNumber >= 1)) {\n      validSources.forEach(({ type, url }, i) => {\n        const typePrefix = type ? `${type} funding` : 'Funding'\n        const msg = `${typePrefix} available at the following URL`\n        this.npm.output(`${i + 1}: ${msg}: ${url}`)\n      })\n      this.npm.output(\n        /* eslint-disable-next-line max-len */\n        'Run `npm fund [<@scope>/]<pkg> --which=1`, for example, to open the first funding URL listed in that package'\n      )\n    } else {\n      const noFundingError = new Error(`No valid funding method available for: ${spec}`)\n      noFundingError.code = 'ENOFUND'\n\n      throw noFundingError\n    }\n  }\n}\nmodule.exports = Fund\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}