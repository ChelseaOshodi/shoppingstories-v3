{"ast":null,"code":"'use strict';\n\nconst {\n  URL\n} = require('url');\n\nconst npa = require('npm-package-arg');\n\nconst npmFetch = require('npm-registry-fetch');\n\nconst semver = require('semver'); // given a tarball url and a registry url, returns just the\n// relevant pathname portion of it, so that it can be handled\n// elegantly by npm-registry-fetch which only expects pathnames\n// and handles the registry hostname via opts\n\n\nconst getPathname = (tarball, registry) => {\n  const registryUrl = new URL(registry).pathname.slice(1);\n  let tarballUrl = new URL(tarball).pathname.slice(1); // test the tarball url to see if it starts with a possible\n  // pathname from the registry url, in that case strips that portion\n  // of it so that we only return the post-registry-url pathname\n\n  if (registryUrl) {\n    tarballUrl = tarballUrl.slice(registryUrl.length);\n  }\n\n  return tarballUrl;\n};\n\nconst unpublish = async (spec, opts) => {\n  spec = npa(spec); // spec is used to pick the appropriate registry/auth combo.\n\n  opts = {\n    force: false,\n    ...opts,\n    spec\n  };\n\n  try {\n    const pkgUri = spec.escapedName;\n    const pkg = await npmFetch.json(pkgUri, { ...opts,\n      query: {\n        write: true\n      }\n    });\n    const version = spec.rawSpec;\n    const allVersions = pkg.versions || {};\n    const versionData = allVersions[version];\n    const rawSpecs = !spec.rawSpec || spec.rawSpec === '*';\n    const onlyVersion = Object.keys(allVersions).length === 1;\n    const noVersions = !Object.keys(allVersions).length; // if missing specific version,\n    // assumed unpublished\n\n    if (!versionData && !rawSpecs && !noVersions) {\n      return true;\n    } // unpublish all versions of a package:\n    // - no specs supplied \"npm unpublish foo\"\n    // - all specs (\"*\") \"npm unpublish foo@*\"\n    // - there was only one version\n    // - has no versions field on packument\n\n\n    if (rawSpecs || onlyVersion || noVersions) {\n      await npmFetch(`${pkgUri}/-rev/${pkg._rev}`, { ...opts,\n        method: 'DELETE',\n        ignoreBody: true\n      });\n      return true;\n    } else {\n      const dist = allVersions[version].dist;\n      delete allVersions[version];\n      const latestVer = pkg['dist-tags'].latest; // deleting dist tags associated to version\n\n      Object.keys(pkg['dist-tags']).forEach(tag => {\n        if (pkg['dist-tags'][tag] === version) {\n          delete pkg['dist-tags'][tag];\n        }\n      });\n\n      if (latestVer === version) {\n        pkg['dist-tags'].latest = Object.keys(allVersions).sort(semver.compareLoose).pop();\n      }\n\n      delete pkg._revisions;\n      delete pkg._attachments; // Update packument with removed versions\n\n      await npmFetch(`${pkgUri}/-rev/${pkg._rev}`, { ...opts,\n        method: 'PUT',\n        body: pkg,\n        ignoreBody: true\n      }); // Remove the tarball itself\n\n      const {\n        _rev\n      } = await npmFetch.json(pkgUri, { ...opts,\n        query: {\n          write: true\n        }\n      });\n      const tarballUrl = getPathname(dist.tarball, opts.registry);\n      await npmFetch(`${tarballUrl}/-rev/${_rev}`, { ...opts,\n        method: 'DELETE',\n        ignoreBody: true\n      });\n      return true;\n    }\n  } catch (err) {\n    if (err.code !== 'E404') {\n      throw err;\n    }\n\n    return true;\n  }\n};\n\nmodule.exports = unpublish;","map":{"version":3,"names":["URL","require","npa","npmFetch","semver","getPathname","tarball","registry","registryUrl","pathname","slice","tarballUrl","length","unpublish","spec","opts","force","pkgUri","escapedName","pkg","json","query","write","version","rawSpec","allVersions","versions","versionData","rawSpecs","onlyVersion","Object","keys","noVersions","_rev","method","ignoreBody","dist","latestVer","latest","forEach","tag","sort","compareLoose","pop","_revisions","_attachments","body","err","code","module","exports"],"sources":["/Users/chelsea/Documents/0_AllCoding/shoppingstories-v3/node_modules/npm/node_modules/libnpmpublish/lib/unpublish.js"],"sourcesContent":["'use strict'\n\nconst { URL } = require('url')\nconst npa = require('npm-package-arg')\nconst npmFetch = require('npm-registry-fetch')\nconst semver = require('semver')\n\n// given a tarball url and a registry url, returns just the\n// relevant pathname portion of it, so that it can be handled\n// elegantly by npm-registry-fetch which only expects pathnames\n// and handles the registry hostname via opts\nconst getPathname = (tarball, registry) => {\n  const registryUrl = new URL(registry).pathname.slice(1)\n  let tarballUrl = new URL(tarball).pathname.slice(1)\n\n  // test the tarball url to see if it starts with a possible\n  // pathname from the registry url, in that case strips that portion\n  // of it so that we only return the post-registry-url pathname\n  if (registryUrl) {\n    tarballUrl = tarballUrl.slice(registryUrl.length)\n  }\n  return tarballUrl\n}\n\nconst unpublish = async (spec, opts) => {\n  spec = npa(spec)\n  // spec is used to pick the appropriate registry/auth combo.\n  opts = {\n    force: false,\n    ...opts,\n    spec,\n  }\n\n  try {\n    const pkgUri = spec.escapedName\n    const pkg = await npmFetch.json(pkgUri, {\n      ...opts,\n      query: { write: true },\n    })\n\n    const version = spec.rawSpec\n    const allVersions = pkg.versions || {}\n    const versionData = allVersions[version]\n\n    const rawSpecs = (!spec.rawSpec || spec.rawSpec === '*')\n    const onlyVersion = Object.keys(allVersions).length === 1\n    const noVersions = !Object.keys(allVersions).length\n\n    // if missing specific version,\n    // assumed unpublished\n    if (!versionData && !rawSpecs && !noVersions) {\n      return true\n    }\n\n    // unpublish all versions of a package:\n    // - no specs supplied \"npm unpublish foo\"\n    // - all specs (\"*\") \"npm unpublish foo@*\"\n    // - there was only one version\n    // - has no versions field on packument\n    if (rawSpecs || onlyVersion || noVersions) {\n      await npmFetch(`${pkgUri}/-rev/${pkg._rev}`, {\n        ...opts,\n        method: 'DELETE',\n        ignoreBody: true,\n      })\n      return true\n    } else {\n      const dist = allVersions[version].dist\n      delete allVersions[version]\n\n      const latestVer = pkg['dist-tags'].latest\n\n      // deleting dist tags associated to version\n      Object.keys(pkg['dist-tags']).forEach(tag => {\n        if (pkg['dist-tags'][tag] === version) {\n          delete pkg['dist-tags'][tag]\n        }\n      })\n\n      if (latestVer === version) {\n        pkg['dist-tags'].latest = Object.keys(\n          allVersions\n        ).sort(semver.compareLoose).pop()\n      }\n\n      delete pkg._revisions\n      delete pkg._attachments\n\n      // Update packument with removed versions\n      await npmFetch(`${pkgUri}/-rev/${pkg._rev}`, {\n        ...opts,\n        method: 'PUT',\n        body: pkg,\n        ignoreBody: true,\n      })\n\n      // Remove the tarball itself\n      const { _rev } = await npmFetch.json(pkgUri, {\n        ...opts,\n        query: { write: true },\n      })\n      const tarballUrl = getPathname(dist.tarball, opts.registry)\n      await npmFetch(`${tarballUrl}/-rev/${_rev}`, {\n        ...opts,\n        method: 'DELETE',\n        ignoreBody: true,\n      })\n      return true\n    }\n  } catch (err) {\n    if (err.code !== 'E404') {\n      throw err\n    }\n\n    return true\n  }\n}\n\nmodule.exports = unpublish\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}