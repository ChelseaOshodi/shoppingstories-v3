{"ast":null,"code":"// if the thing isn't there, skip it\n// if there's a non-symlink there already, eexist\n// if there's a symlink already, pointing somewhere else, eexist\n// if there's a symlink already, pointing into our pkg, remove it first\n// then create the symlink\nconst {\n  promisify\n} = require('util');\n\nconst {\n  resolve,\n  dirname\n} = require('path');\n\nconst mkdirp = require('mkdirp-infer-owner');\n\nconst fs = require('fs');\n\nconst symlink = promisify(fs.symlink);\nconst readlink = promisify(fs.readlink);\nconst lstat = promisify(fs.lstat);\n\nconst throwNonEnoent = er => {\n  if (er.code !== 'ENOENT') {\n    throw er;\n  }\n}; // even in --force mode, we never create a link over a link we've\n// already created.  you can have multiple packages in a tree trying\n// to contend for the same bin, or the same manpage listed multiple times,\n// which creates a race condition and nondeterminism.\n\n\nconst seen = new Set(); // disable glob in our rimraf calls\n\nconst rimraf = promisify(require('rimraf'));\n\nconst rm = path => rimraf(path, {\n  glob: false\n});\n\nconst SKIP = Symbol('skip - missing or already installed');\nconst CLOBBER = Symbol('clobber - ours or in forceful mode');\n\nconst linkGently = async _ref => {\n  let {\n    path,\n    to,\n    from,\n    absFrom,\n    force\n  } = _ref;\n\n  if (seen.has(to)) {\n    return true;\n  }\n\n  seen.add(to); // if the script or manpage isn't there, just ignore it.\n  // this arguably *should* be an install error of some sort,\n  // or at least a warning, but npm has always behaved this\n  // way in the past, so it'd be a breaking change\n\n  return Promise.all([lstat(absFrom).catch(throwNonEnoent), lstat(to).catch(throwNonEnoent)]).then(_ref2 => {\n    let [stFrom, stTo] = _ref2;\n\n    // not present in package, skip it\n    if (!stFrom) {\n      return SKIP;\n    } // exists! maybe clobber if we can\n\n\n    if (stTo) {\n      if (!stTo.isSymbolicLink()) {\n        return force && rm(to).then(() => CLOBBER);\n      }\n\n      return readlink(to).then(target => {\n        if (target === from) {\n          return SKIP;\n        } // skip it, already set up like we want it.\n\n\n        target = resolve(dirname(to), target);\n\n        if (target.indexOf(path) === 0 || force) {\n          return rm(to).then(() => CLOBBER);\n        }\n      });\n    } else {\n      // doesn't exist, dir might not either\n      return mkdirp(dirname(to));\n    }\n  }).then(skipOrClobber => {\n    if (skipOrClobber === SKIP) {\n      return false;\n    }\n\n    return symlink(from, to, 'file').catch(er => {\n      if (skipOrClobber === CLOBBER || force) {\n        return rm(to).then(() => symlink(from, to, 'file'));\n      }\n\n      throw er;\n    }).then(() => true);\n  });\n};\n\nconst resetSeen = () => {\n  for (const p of seen) {\n    seen.delete(p);\n  }\n};\n\nmodule.exports = Object.assign(linkGently, {\n  resetSeen\n});","map":{"version":3,"names":["promisify","require","resolve","dirname","mkdirp","fs","symlink","readlink","lstat","throwNonEnoent","er","code","seen","Set","rimraf","rm","path","glob","SKIP","Symbol","CLOBBER","linkGently","to","from","absFrom","force","has","add","Promise","all","catch","then","stFrom","stTo","isSymbolicLink","target","indexOf","skipOrClobber","resetSeen","p","delete","module","exports","Object","assign"],"sources":["/Users/chelsea/Documents/0_AllCoding/shoppingstories-v3/node_modules/npm/node_modules/bin-links/lib/link-gently.js"],"sourcesContent":["// if the thing isn't there, skip it\n// if there's a non-symlink there already, eexist\n// if there's a symlink already, pointing somewhere else, eexist\n// if there's a symlink already, pointing into our pkg, remove it first\n// then create the symlink\n\nconst { promisify } = require('util')\nconst { resolve, dirname } = require('path')\nconst mkdirp = require('mkdirp-infer-owner')\nconst fs = require('fs')\nconst symlink = promisify(fs.symlink)\nconst readlink = promisify(fs.readlink)\nconst lstat = promisify(fs.lstat)\nconst throwNonEnoent = er => {\n  if (er.code !== 'ENOENT') {\n    throw er\n  }\n}\n\n// even in --force mode, we never create a link over a link we've\n// already created.  you can have multiple packages in a tree trying\n// to contend for the same bin, or the same manpage listed multiple times,\n// which creates a race condition and nondeterminism.\nconst seen = new Set()\n\n// disable glob in our rimraf calls\nconst rimraf = promisify(require('rimraf'))\nconst rm = path => rimraf(path, { glob: false })\n\nconst SKIP = Symbol('skip - missing or already installed')\nconst CLOBBER = Symbol('clobber - ours or in forceful mode')\n\nconst linkGently = async ({ path, to, from, absFrom, force }) => {\n  if (seen.has(to)) {\n    return true\n  }\n  seen.add(to)\n\n  // if the script or manpage isn't there, just ignore it.\n  // this arguably *should* be an install error of some sort,\n  // or at least a warning, but npm has always behaved this\n  // way in the past, so it'd be a breaking change\n  return Promise.all([\n    lstat(absFrom).catch(throwNonEnoent),\n    lstat(to).catch(throwNonEnoent),\n  ]).then(([stFrom, stTo]) => {\n    // not present in package, skip it\n    if (!stFrom) {\n      return SKIP\n    }\n\n    // exists! maybe clobber if we can\n    if (stTo) {\n      if (!stTo.isSymbolicLink()) {\n        return force && rm(to).then(() => CLOBBER)\n      }\n\n      return readlink(to).then(target => {\n        if (target === from) {\n          return SKIP\n        } // skip it, already set up like we want it.\n\n        target = resolve(dirname(to), target)\n        if (target.indexOf(path) === 0 || force) {\n          return rm(to).then(() => CLOBBER)\n        }\n      })\n    } else {\n      // doesn't exist, dir might not either\n      return mkdirp(dirname(to))\n    }\n  })\n    .then(skipOrClobber => {\n      if (skipOrClobber === SKIP) {\n        return false\n      }\n      return symlink(from, to, 'file').catch(er => {\n        if (skipOrClobber === CLOBBER || force) {\n          return rm(to).then(() => symlink(from, to, 'file'))\n        }\n        throw er\n      }).then(() => true)\n    })\n}\n\nconst resetSeen = () => {\n  for (const p of seen) {\n    seen.delete(p)\n  }\n}\n\nmodule.exports = Object.assign(linkGently, { resetSeen })\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}