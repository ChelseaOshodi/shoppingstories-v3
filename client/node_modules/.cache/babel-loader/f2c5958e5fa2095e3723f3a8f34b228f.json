{"ast":null,"code":"const log = require('../utils/log-shim.js');\n\nconst replaceInfo = require('../utils/replace-info.js');\n\nconst BaseCommand = require('../base-command.js');\n\nconst authTypes = {\n  legacy: require('../auth/legacy.js'),\n  web: require('../auth/legacy.js'),\n  webauthn: require('../auth/legacy.js'),\n  oauth: require('../auth/oauth.js'),\n  saml: require('../auth/saml.js'),\n  sso: require('../auth/sso.js')\n};\n\nclass AddUser extends BaseCommand {\n  static description = 'Add a registry user account';\n  static name = 'adduser';\n  static params = ['registry', 'scope', 'auth-type'];\n  static ignoreImplicitWorkspace = true;\n\n  async exec(args) {\n    const {\n      scope\n    } = this.npm.flatOptions;\n    const registry = this.getRegistry(this.npm.flatOptions);\n    const auth = this.getAuthType(this.npm.flatOptions);\n    const creds = this.npm.config.getCredentialsByURI(registry);\n    log.disableProgress();\n    log.warn('adduser', '`adduser` will be split into `login` and `register` in a future version.' + ' `adduser` will become an alias of `register`.' + ' `login` (currently an alias) will become its own command.');\n    log.notice('', `Log in on ${replaceInfo(registry)}`);\n    const {\n      message,\n      newCreds\n    } = await auth(this.npm, { ...this.npm.flatOptions,\n      creds,\n      registry,\n      scope\n    });\n    await this.updateConfig({\n      newCreds,\n      registry,\n      scope\n    });\n    this.npm.output(message);\n  }\n\n  getRegistry(_ref) {\n    let {\n      scope,\n      registry\n    } = _ref;\n\n    if (scope) {\n      const scopedRegistry = this.npm.config.get(`${scope}:registry`);\n      const cliRegistry = this.npm.config.get('registry', 'cli');\n\n      if (scopedRegistry && !cliRegistry) {\n        return scopedRegistry;\n      }\n    }\n\n    return registry;\n  }\n\n  getAuthType(_ref2) {\n    let {\n      authType\n    } = _ref2;\n    const type = authTypes[authType];\n\n    if (!type) {\n      throw new Error('no such auth module');\n    }\n\n    return type;\n  }\n\n  async updateConfig(_ref3) {\n    let {\n      newCreds,\n      registry,\n      scope\n    } = _ref3;\n    this.npm.config.delete('_token', 'user'); // prevent legacy pollution\n\n    this.npm.config.setCredentialsByURI(registry, newCreds);\n\n    if (scope) {\n      this.npm.config.set(scope + ':registry', registry, 'user');\n    }\n\n    await this.npm.config.save('user');\n  }\n\n}\n\nmodule.exports = AddUser;","map":{"version":3,"names":["log","require","replaceInfo","BaseCommand","authTypes","legacy","web","webauthn","oauth","saml","sso","AddUser","description","name","params","ignoreImplicitWorkspace","exec","args","scope","npm","flatOptions","registry","getRegistry","auth","getAuthType","creds","config","getCredentialsByURI","disableProgress","warn","notice","message","newCreds","updateConfig","output","scopedRegistry","get","cliRegistry","authType","type","Error","delete","setCredentialsByURI","set","save","module","exports"],"sources":["/Users/chelsea/Documents/0_AllCoding/shoppingstories-v3/node_modules/npm/lib/commands/adduser.js"],"sourcesContent":["const log = require('../utils/log-shim.js')\nconst replaceInfo = require('../utils/replace-info.js')\nconst BaseCommand = require('../base-command.js')\nconst authTypes = {\n  legacy: require('../auth/legacy.js'),\n  web: require('../auth/legacy.js'),\n  webauthn: require('../auth/legacy.js'),\n  oauth: require('../auth/oauth.js'),\n  saml: require('../auth/saml.js'),\n  sso: require('../auth/sso.js'),\n}\n\nclass AddUser extends BaseCommand {\n  static description = 'Add a registry user account'\n  static name = 'adduser'\n  static params = [\n    'registry',\n    'scope',\n    'auth-type',\n  ]\n\n  static ignoreImplicitWorkspace = true\n\n  async exec (args) {\n    const { scope } = this.npm.flatOptions\n    const registry = this.getRegistry(this.npm.flatOptions)\n    const auth = this.getAuthType(this.npm.flatOptions)\n    const creds = this.npm.config.getCredentialsByURI(registry)\n\n    log.disableProgress()\n\n    log.warn('adduser',\n      '`adduser` will be split into `login` and `register` in a future version.'\n      + ' `adduser` will become an alias of `register`.'\n      + ' `login` (currently an alias) will become its own command.')\n    log.notice('', `Log in on ${replaceInfo(registry)}`)\n\n    const { message, newCreds } = await auth(this.npm, {\n      ...this.npm.flatOptions,\n      creds,\n      registry,\n      scope,\n    })\n\n    await this.updateConfig({\n      newCreds,\n      registry,\n      scope,\n    })\n\n    this.npm.output(message)\n  }\n\n  getRegistry ({ scope, registry }) {\n    if (scope) {\n      const scopedRegistry = this.npm.config.get(`${scope}:registry`)\n      const cliRegistry = this.npm.config.get('registry', 'cli')\n      if (scopedRegistry && !cliRegistry) {\n        return scopedRegistry\n      }\n    }\n    return registry\n  }\n\n  getAuthType ({ authType }) {\n    const type = authTypes[authType]\n\n    if (!type) {\n      throw new Error('no such auth module')\n    }\n\n    return type\n  }\n\n  async updateConfig ({ newCreds, registry, scope }) {\n    this.npm.config.delete('_token', 'user') // prevent legacy pollution\n    this.npm.config.setCredentialsByURI(registry, newCreds)\n    if (scope) {\n      this.npm.config.set(scope + ':registry', registry, 'user')\n    }\n    await this.npm.config.save('user')\n  }\n}\nmodule.exports = AddUser\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}