{"ast":null,"code":"const fetch = require('npm-registry-fetch');\n\nconst log = require('../utils/log-shim');\n\nconst getIdentity = require('../utils/get-identity.js');\n\nconst BaseCommand = require('../base-command.js');\n\nclass Stars extends BaseCommand {\n  static description = 'View packages marked as favorites';\n  static name = 'stars';\n  static usage = ['[<user>]'];\n  static params = ['registry'];\n  static ignoreImplicitWorkspace = false;\n\n  async exec(_ref) {\n    let [user] = _ref;\n\n    try {\n      if (!user) {\n        user = await getIdentity(this.npm, this.npm.flatOptions);\n      }\n\n      const {\n        rows\n      } = await fetch.json('/-/_view/starredByUser', { ...this.npm.flatOptions,\n        query: {\n          key: `\"${user}\"`\n        }\n      });\n\n      if (rows.length === 0) {\n        log.warn('stars', 'user has not starred any packages');\n      }\n\n      for (const row of rows) {\n        this.npm.output(row.value);\n      }\n    } catch (err) {\n      if (err.code === 'ENEEDAUTH') {\n        log.warn('stars', 'auth is required to look up your username');\n      }\n\n      throw err;\n    }\n  }\n\n}\n\nmodule.exports = Stars;","map":{"version":3,"names":["fetch","require","log","getIdentity","BaseCommand","Stars","description","name","usage","params","ignoreImplicitWorkspace","exec","user","npm","flatOptions","rows","json","query","key","length","warn","row","output","value","err","code","module","exports"],"sources":["/Users/chelsea/Documents/0_AllCoding/shoppingstories-v3/node_modules/npm/lib/commands/stars.js"],"sourcesContent":["const fetch = require('npm-registry-fetch')\nconst log = require('../utils/log-shim')\nconst getIdentity = require('../utils/get-identity.js')\n\nconst BaseCommand = require('../base-command.js')\nclass Stars extends BaseCommand {\n  static description = 'View packages marked as favorites'\n  static name = 'stars'\n  static usage = ['[<user>]']\n  static params = ['registry']\n  static ignoreImplicitWorkspace = false\n\n  async exec ([user]) {\n    try {\n      if (!user) {\n        user = await getIdentity(this.npm, this.npm.flatOptions)\n      }\n\n      const { rows } = await fetch.json('/-/_view/starredByUser', {\n        ...this.npm.flatOptions,\n        query: { key: `\"${user}\"` },\n      })\n      if (rows.length === 0) {\n        log.warn('stars', 'user has not starred any packages')\n      }\n\n      for (const row of rows) {\n        this.npm.output(row.value)\n      }\n    } catch (err) {\n      if (err.code === 'ENEEDAUTH') {\n        log.warn('stars', 'auth is required to look up your username')\n      }\n      throw err\n    }\n  }\n}\nmodule.exports = Stars\n"],"mappings":"AAAA,MAAMA,KAAK,GAAGC,OAAO,CAAC,oBAAD,CAArB;;AACA,MAAMC,GAAG,GAAGD,OAAO,CAAC,mBAAD,CAAnB;;AACA,MAAME,WAAW,GAAGF,OAAO,CAAC,0BAAD,CAA3B;;AAEA,MAAMG,WAAW,GAAGH,OAAO,CAAC,oBAAD,CAA3B;;AACA,MAAMI,KAAN,SAAoBD,WAApB,CAAgC;EACZ,OAAXE,WAAW,GAAG,mCAAH;EACP,OAAJC,IAAI,GAAG,OAAH;EACC,OAALC,KAAK,GAAG,CAAC,UAAD,CAAH;EACC,OAANC,MAAM,GAAG,CAAC,UAAD,CAAH;EACiB,OAAvBC,uBAAuB,GAAG,KAAH;;EAEpB,MAAJC,IAAI,OAAU;IAAA,IAAR,CAACC,IAAD,CAAQ;;IAClB,IAAI;MACF,IAAI,CAACA,IAAL,EAAW;QACTA,IAAI,GAAG,MAAMT,WAAW,CAAC,KAAKU,GAAN,EAAW,KAAKA,GAAL,CAASC,WAApB,CAAxB;MACD;;MAED,MAAM;QAAEC;MAAF,IAAW,MAAMf,KAAK,CAACgB,IAAN,CAAW,wBAAX,EAAqC,EAC1D,GAAG,KAAKH,GAAL,CAASC,WAD8C;QAE1DG,KAAK,EAAE;UAAEC,GAAG,EAAG,IAAGN,IAAK;QAAhB;MAFmD,CAArC,CAAvB;;MAIA,IAAIG,IAAI,CAACI,MAAL,KAAgB,CAApB,EAAuB;QACrBjB,GAAG,CAACkB,IAAJ,CAAS,OAAT,EAAkB,mCAAlB;MACD;;MAED,KAAK,MAAMC,GAAX,IAAkBN,IAAlB,EAAwB;QACtB,KAAKF,GAAL,CAASS,MAAT,CAAgBD,GAAG,CAACE,KAApB;MACD;IACF,CAhBD,CAgBE,OAAOC,GAAP,EAAY;MACZ,IAAIA,GAAG,CAACC,IAAJ,KAAa,WAAjB,EAA8B;QAC5BvB,GAAG,CAACkB,IAAJ,CAAS,OAAT,EAAkB,2CAAlB;MACD;;MACD,MAAMI,GAAN;IACD;EACF;;AA9B6B;;AAgChCE,MAAM,CAACC,OAAP,GAAiBtB,KAAjB"},"metadata":{},"sourceType":"script"}