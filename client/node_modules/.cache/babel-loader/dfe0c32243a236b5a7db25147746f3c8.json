{"ast":null,"code":"const {\n  resolve,\n  relative\n} = require('path');\n\nconst mapWorkspaces = require('@npmcli/map-workspaces');\n\nconst minimatch = require('minimatch');\n\nconst rpj = require('read-package-json-fast'); // minimatch wants forward slashes only for glob patterns\n\n\nconst globify = pattern => pattern.split('\\\\').join('/'); // Returns an Map of paths to workspaces indexed by workspace name\n// { foo => '/path/to/foo' }\n\n\nconst getWorkspaces = async (filters, _ref) => {\n  let {\n    path,\n    includeWorkspaceRoot,\n    relativeFrom\n  } = _ref;\n  // TODO we need a better error to be bubbled up here if this rpj call fails\n  const pkg = await rpj(resolve(path, 'package.json'));\n  const workspaces = await mapWorkspaces({\n    cwd: path,\n    pkg\n  });\n  let res = new Map();\n\n  if (includeWorkspaceRoot) {\n    res.set(pkg.name, path);\n  }\n\n  if (!filters.length) {\n    res = new Map([...res, ...workspaces]);\n  }\n\n  for (const filterArg of filters) {\n    for (const [workspaceName, workspacePath] of workspaces.entries()) {\n      let relativePath = relative(relativeFrom, workspacePath);\n\n      if (filterArg.startsWith('./')) {\n        relativePath = `./${relativePath}`;\n      }\n\n      const relativeFilter = relative(path, filterArg);\n\n      if (filterArg === workspaceName || resolve(relativeFrom, filterArg) === workspacePath || minimatch(relativePath, `${globify(relativeFilter)}/*`) || minimatch(relativePath, `${globify(filterArg)}/*`)) {\n        res.set(workspaceName, workspacePath);\n      }\n    }\n  }\n\n  if (!res.size) {\n    let msg = '!';\n\n    if (filters.length) {\n      msg = `:\\n ${filters.reduce((res, filterArg) => `${res} --workspace=${filterArg}`, '')}`;\n    }\n\n    throw new Error(`No workspaces found${msg}`);\n  }\n\n  return res;\n};\n\nmodule.exports = getWorkspaces;","map":{"version":3,"names":["resolve","relative","require","mapWorkspaces","minimatch","rpj","globify","pattern","split","join","getWorkspaces","filters","path","includeWorkspaceRoot","relativeFrom","pkg","workspaces","cwd","res","Map","set","name","length","filterArg","workspaceName","workspacePath","entries","relativePath","startsWith","relativeFilter","size","msg","reduce","Error","module","exports"],"sources":["/Users/chelsea/Documents/0_AllCoding/shoppingstories-v3/node_modules/npm/lib/workspaces/get-workspaces.js"],"sourcesContent":["const { resolve, relative } = require('path')\nconst mapWorkspaces = require('@npmcli/map-workspaces')\nconst minimatch = require('minimatch')\nconst rpj = require('read-package-json-fast')\n\n// minimatch wants forward slashes only for glob patterns\nconst globify = pattern => pattern.split('\\\\').join('/')\n\n// Returns an Map of paths to workspaces indexed by workspace name\n// { foo => '/path/to/foo' }\nconst getWorkspaces = async (filters, { path, includeWorkspaceRoot, relativeFrom }) => {\n  // TODO we need a better error to be bubbled up here if this rpj call fails\n  const pkg = await rpj(resolve(path, 'package.json'))\n  const workspaces = await mapWorkspaces({ cwd: path, pkg })\n  let res = new Map()\n  if (includeWorkspaceRoot) {\n    res.set(pkg.name, path)\n  }\n\n  if (!filters.length) {\n    res = new Map([...res, ...workspaces])\n  }\n\n  for (const filterArg of filters) {\n    for (const [workspaceName, workspacePath] of workspaces.entries()) {\n      let relativePath = relative(relativeFrom, workspacePath)\n      if (filterArg.startsWith('./')) {\n        relativePath = `./${relativePath}`\n      }\n      const relativeFilter = relative(path, filterArg)\n      if (filterArg === workspaceName\n        || resolve(relativeFrom, filterArg) === workspacePath\n        || minimatch(relativePath, `${globify(relativeFilter)}/*`)\n        || minimatch(relativePath, `${globify(filterArg)}/*`)\n      ) {\n        res.set(workspaceName, workspacePath)\n      }\n    }\n  }\n\n  if (!res.size) {\n    let msg = '!'\n    if (filters.length) {\n      msg = `:\\n ${filters.reduce(\n        (res, filterArg) => `${res} --workspace=${filterArg}`, '')}`\n    }\n\n    throw new Error(`No workspaces found${msg}`)\n  }\n\n  return res\n}\n\nmodule.exports = getWorkspaces\n"],"mappings":"AAAA,MAAM;EAAEA,OAAF;EAAWC;AAAX,IAAwBC,OAAO,CAAC,MAAD,CAArC;;AACA,MAAMC,aAAa,GAAGD,OAAO,CAAC,wBAAD,CAA7B;;AACA,MAAME,SAAS,GAAGF,OAAO,CAAC,WAAD,CAAzB;;AACA,MAAMG,GAAG,GAAGH,OAAO,CAAC,wBAAD,CAAnB,C,CAEA;;;AACA,MAAMI,OAAO,GAAGC,OAAO,IAAIA,OAAO,CAACC,KAAR,CAAc,IAAd,EAAoBC,IAApB,CAAyB,GAAzB,CAA3B,C,CAEA;AACA;;;AACA,MAAMC,aAAa,GAAG,OAAOC,OAAP,WAAiE;EAAA,IAAjD;IAAEC,IAAF;IAAQC,oBAAR;IAA8BC;EAA9B,CAAiD;EACrF;EACA,MAAMC,GAAG,GAAG,MAAMV,GAAG,CAACL,OAAO,CAACY,IAAD,EAAO,cAAP,CAAR,CAArB;EACA,MAAMI,UAAU,GAAG,MAAMb,aAAa,CAAC;IAAEc,GAAG,EAAEL,IAAP;IAAaG;EAAb,CAAD,CAAtC;EACA,IAAIG,GAAG,GAAG,IAAIC,GAAJ,EAAV;;EACA,IAAIN,oBAAJ,EAA0B;IACxBK,GAAG,CAACE,GAAJ,CAAQL,GAAG,CAACM,IAAZ,EAAkBT,IAAlB;EACD;;EAED,IAAI,CAACD,OAAO,CAACW,MAAb,EAAqB;IACnBJ,GAAG,GAAG,IAAIC,GAAJ,CAAQ,CAAC,GAAGD,GAAJ,EAAS,GAAGF,UAAZ,CAAR,CAAN;EACD;;EAED,KAAK,MAAMO,SAAX,IAAwBZ,OAAxB,EAAiC;IAC/B,KAAK,MAAM,CAACa,aAAD,EAAgBC,aAAhB,CAAX,IAA6CT,UAAU,CAACU,OAAX,EAA7C,EAAmE;MACjE,IAAIC,YAAY,GAAG1B,QAAQ,CAACa,YAAD,EAAeW,aAAf,CAA3B;;MACA,IAAIF,SAAS,CAACK,UAAV,CAAqB,IAArB,CAAJ,EAAgC;QAC9BD,YAAY,GAAI,KAAIA,YAAa,EAAjC;MACD;;MACD,MAAME,cAAc,GAAG5B,QAAQ,CAACW,IAAD,EAAOW,SAAP,CAA/B;;MACA,IAAIA,SAAS,KAAKC,aAAd,IACCxB,OAAO,CAACc,YAAD,EAAeS,SAAf,CAAP,KAAqCE,aADtC,IAECrB,SAAS,CAACuB,YAAD,EAAgB,GAAErB,OAAO,CAACuB,cAAD,CAAiB,IAA1C,CAFV,IAGCzB,SAAS,CAACuB,YAAD,EAAgB,GAAErB,OAAO,CAACiB,SAAD,CAAY,IAArC,CAHd,EAIE;QACAL,GAAG,CAACE,GAAJ,CAAQI,aAAR,EAAuBC,aAAvB;MACD;IACF;EACF;;EAED,IAAI,CAACP,GAAG,CAACY,IAAT,EAAe;IACb,IAAIC,GAAG,GAAG,GAAV;;IACA,IAAIpB,OAAO,CAACW,MAAZ,EAAoB;MAClBS,GAAG,GAAI,OAAMpB,OAAO,CAACqB,MAAR,CACX,CAACd,GAAD,EAAMK,SAAN,KAAqB,GAAEL,GAAI,gBAAeK,SAAU,EADzC,EAC4C,EAD5C,CACgD,EAD7D;IAED;;IAED,MAAM,IAAIU,KAAJ,CAAW,sBAAqBF,GAAI,EAApC,CAAN;EACD;;EAED,OAAOb,GAAP;AACD,CAzCD;;AA2CAgB,MAAM,CAACC,OAAP,GAAiBzB,aAAjB"},"metadata":{},"sourceType":"script"}