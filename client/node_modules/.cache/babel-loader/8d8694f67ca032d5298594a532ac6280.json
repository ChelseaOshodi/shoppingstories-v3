{"ast":null,"code":"const ansi = require('ansi-styles');\n\nconst colors = {\n  removed: ansi.red,\n  added: ansi.green,\n  header: ansi.yellow,\n  section: ansi.magenta\n};\n\nfunction colorize(str, opts) {\n  let headerLength = (opts || {}).headerLength;\n\n  if (typeof headerLength !== 'number' || Number.isNaN(headerLength)) {\n    headerLength = 2;\n  }\n\n  const color = (colorStr, colorId) => {\n    const {\n      open,\n      close\n    } = colors[colorId]; // avoid highlighting the \"\\n\" (would highlight till the end of the line)\n\n    return colorStr.replace(/[^\\n\\r]+/g, open + '$&' + close);\n  }; // this RegExp will include all the `\\n` chars into the lines, easier to join\n\n\n  const lines = (typeof str === 'string' && str || '').split(/^/m);\n  const start = color(lines.slice(0, headerLength).join(''), 'header');\n  const end = lines.slice(headerLength).join('').replace(/^-.*/gm, color('$&', 'removed')).replace(/^\\+.*/gm, color('$&', 'added')).replace(/^@@.+@@/gm, color('$&', 'section'));\n  return start + end;\n}\n\nmodule.exports = colorize;","map":{"version":3,"names":["ansi","require","colors","removed","red","added","green","header","yellow","section","magenta","colorize","str","opts","headerLength","Number","isNaN","color","colorStr","colorId","open","close","replace","lines","split","start","slice","join","end","module","exports"],"sources":["/Users/chelsea/Documents/0_AllCoding/shoppingstories-v3/node_modules/npm/node_modules/@npmcli/disparity-colors/lib/index.js"],"sourcesContent":["const ansi = require('ansi-styles')\n\nconst colors = {\n  removed: ansi.red,\n  added: ansi.green,\n  header: ansi.yellow,\n  section: ansi.magenta,\n}\n\nfunction colorize (str, opts) {\n  let headerLength = (opts || {}).headerLength\n  if (typeof headerLength !== 'number' || Number.isNaN(headerLength)) {\n    headerLength = 2\n  }\n\n  const color = (colorStr, colorId) => {\n    const { open, close } = colors[colorId]\n    // avoid highlighting the \"\\n\" (would highlight till the end of the line)\n    return colorStr.replace(/[^\\n\\r]+/g, open + '$&' + close)\n  }\n\n  // this RegExp will include all the `\\n` chars into the lines, easier to join\n  const lines = ((typeof str === 'string' && str) || '').split(/^/m)\n\n  const start = color(lines.slice(0, headerLength).join(''), 'header')\n  const end = lines.slice(headerLength).join('')\n    .replace(/^-.*/gm, color('$&', 'removed'))\n    .replace(/^\\+.*/gm, color('$&', 'added'))\n    .replace(/^@@.+@@/gm, color('$&', 'section'))\n\n  return start + end\n}\n\nmodule.exports = colorize\n"],"mappings":"AAAA,MAAMA,IAAI,GAAGC,OAAO,CAAC,aAAD,CAApB;;AAEA,MAAMC,MAAM,GAAG;EACbC,OAAO,EAAEH,IAAI,CAACI,GADD;EAEbC,KAAK,EAAEL,IAAI,CAACM,KAFC;EAGbC,MAAM,EAAEP,IAAI,CAACQ,MAHA;EAIbC,OAAO,EAAET,IAAI,CAACU;AAJD,CAAf;;AAOA,SAASC,QAAT,CAAmBC,GAAnB,EAAwBC,IAAxB,EAA8B;EAC5B,IAAIC,YAAY,GAAG,CAACD,IAAI,IAAI,EAAT,EAAaC,YAAhC;;EACA,IAAI,OAAOA,YAAP,KAAwB,QAAxB,IAAoCC,MAAM,CAACC,KAAP,CAAaF,YAAb,CAAxC,EAAoE;IAClEA,YAAY,GAAG,CAAf;EACD;;EAED,MAAMG,KAAK,GAAG,CAACC,QAAD,EAAWC,OAAX,KAAuB;IACnC,MAAM;MAAEC,IAAF;MAAQC;IAAR,IAAkBnB,MAAM,CAACiB,OAAD,CAA9B,CADmC,CAEnC;;IACA,OAAOD,QAAQ,CAACI,OAAT,CAAiB,WAAjB,EAA8BF,IAAI,GAAG,IAAP,GAAcC,KAA5C,CAAP;EACD,CAJD,CAN4B,CAY5B;;;EACA,MAAME,KAAK,GAAG,CAAE,OAAOX,GAAP,KAAe,QAAf,IAA2BA,GAA5B,IAAoC,EAArC,EAAyCY,KAAzC,CAA+C,IAA/C,CAAd;EAEA,MAAMC,KAAK,GAAGR,KAAK,CAACM,KAAK,CAACG,KAAN,CAAY,CAAZ,EAAeZ,YAAf,EAA6Ba,IAA7B,CAAkC,EAAlC,CAAD,EAAwC,QAAxC,CAAnB;EACA,MAAMC,GAAG,GAAGL,KAAK,CAACG,KAAN,CAAYZ,YAAZ,EAA0Ba,IAA1B,CAA+B,EAA/B,EACTL,OADS,CACD,QADC,EACSL,KAAK,CAAC,IAAD,EAAO,SAAP,CADd,EAETK,OAFS,CAED,SAFC,EAEUL,KAAK,CAAC,IAAD,EAAO,OAAP,CAFf,EAGTK,OAHS,CAGD,WAHC,EAGYL,KAAK,CAAC,IAAD,EAAO,SAAP,CAHjB,CAAZ;EAKA,OAAOQ,KAAK,GAAGG,GAAf;AACD;;AAEDC,MAAM,CAACC,OAAP,GAAiBnB,QAAjB"},"metadata":{},"sourceType":"script"}