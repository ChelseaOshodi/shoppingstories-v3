{"ast":null,"code":"const fs = require('fs');\n\nconst path = require('path');\n\nconst chalk = require('chalk');\n\nconst {\n  promisify\n} = require('util');\n\nconst glob = promisify(require('glob'));\nconst readFile = promisify(fs.readFile);\n\nconst BaseCommand = require('../base-command.js');\n\nconst globify = pattern => pattern.split('\\\\').join('/');\n\nclass HelpSearch extends BaseCommand {\n  static description = 'Search npm help documentation';\n  static name = 'help-search';\n  static usage = ['<text>'];\n  static params = ['long'];\n  static ignoreImplicitWorkspace = true;\n\n  async exec(args) {\n    if (!args.length) {\n      throw this.usageError();\n    }\n\n    const docPath = path.resolve(__dirname, '..', '..', 'docs/content');\n    const files = await glob(`${globify(docPath)}/*/*.md`);\n    const data = await this.readFiles(files);\n    const results = await this.searchFiles(args, data, files);\n    const formatted = this.formatResults(args, results);\n\n    if (!formatted.trim()) {\n      this.npm.output(`No matches in help for: ${args.join(' ')}\\n`);\n    } else {\n      this.npm.output(formatted);\n    }\n  }\n\n  async readFiles(files) {\n    const res = {};\n    await Promise.all(files.map(async file => {\n      res[file] = (await readFile(file, 'utf8')).replace(/^---\\n(.*\\n)*?---\\n/, '').trim();\n    }));\n    return res;\n  }\n\n  async searchFiles(args, data, files) {\n    const results = [];\n\n    for (const [file, content] of Object.entries(data)) {\n      const lowerCase = content.toLowerCase(); // skip if no matches at all\n\n      if (!args.some(a => lowerCase.includes(a.toLowerCase()))) {\n        continue;\n      }\n\n      const lines = content.split(/\\n+/); // if a line has a search term, then skip it and the next line.\n      // if the next line has a search term, then skip all 3\n      // otherwise, set the line to null.  then remove the nulls.\n\n      for (let i = 0; i < lines.length; i++) {\n        const line = lines[i];\n        const nextLine = lines[i + 1];\n        let match = false;\n\n        if (nextLine) {\n          match = args.some(a => nextLine.toLowerCase().includes(a.toLowerCase()));\n\n          if (match) {\n            // skip over the next line, and the line after it.\n            i += 2;\n            continue;\n          }\n        }\n\n        match = args.some(a => line.toLowerCase().includes(a.toLowerCase()));\n\n        if (match) {\n          // skip over the next line\n          i++;\n          continue;\n        }\n\n        lines[i] = null;\n      } // now squish any string of nulls into a single null\n\n\n      const pruned = lines.reduce((l, r) => {\n        if (!(r === null && l[l.length - 1] === null)) {\n          l.push(r);\n        }\n\n        return l;\n      }, []);\n\n      if (pruned[pruned.length - 1] === null) {\n        pruned.pop();\n      }\n\n      if (pruned[0] === null) {\n        pruned.shift();\n      } // now count how many args were found\n\n\n      const found = {};\n      let totalHits = 0;\n\n      for (const line of pruned) {\n        for (const arg of args) {\n          const hit = (line || '').toLowerCase().split(arg.toLowerCase()).length - 1;\n\n          if (hit > 0) {\n            found[arg] = (found[arg] || 0) + hit;\n            totalHits += hit;\n          }\n        }\n      }\n\n      const cmd = 'npm help ' + path.basename(file, '.md').replace(/^npm-/, '');\n      results.push({\n        file,\n        cmd,\n        lines: pruned,\n        found: Object.keys(found),\n        hits: found,\n        totalHits\n      });\n    } // sort results by number of results found, then by number of hits\n    // then by number of matching lines\n    // coverage is ignored here because the contents of results are\n    // nondeterministic due to either glob or readFiles or Object.entries\n\n\n    return results.sort(\n    /* istanbul ignore next */\n    (a, b) => a.found.length > b.found.length ? -1 : a.found.length < b.found.length ? 1 : a.totalHits > b.totalHits ? -1 : a.totalHits < b.totalHits ? 1 : a.lines.length > b.lines.length ? -1 : a.lines.length < b.lines.length ? 1 : 0).slice(0, 10);\n  }\n\n  formatResults(args, results) {\n    const cols = Math.min(process.stdout.columns || Infinity, 80) + 1;\n    const out = results.map(res => {\n      const out = [res.cmd];\n      const r = Object.keys(res.hits).map(k => `${k}:${res.hits[k]}`).sort((a, b) => a > b ? 1 : -1).join(' ');\n      out.push(' '.repeat(Math.max(1, cols - out.join(' ').length - r.length - 1)));\n      out.push(r);\n\n      if (!this.npm.config.get('long')) {\n        return out.join('');\n      }\n\n      out.unshift('\\n\\n');\n      out.push('\\n');\n      out.push('-'.repeat(cols - 1) + '\\n');\n      res.lines.forEach((line, i) => {\n        if (line === null || i > 3) {\n          return;\n        }\n\n        if (!this.npm.color) {\n          out.push(line + '\\n');\n          return;\n        }\n\n        const hilitLine = [];\n\n        for (const arg of args) {\n          const finder = line.toLowerCase().split(arg.toLowerCase());\n          let p = 0;\n\n          for (const f of finder) {\n            hilitLine.push(line.slice(p, p + f.length));\n            const word = line.slice(p + f.length, p + f.length + arg.length);\n            const hilit = chalk.bgBlack.red(word);\n            hilitLine.push(hilit);\n            p += f.length + arg.length;\n          }\n        }\n\n        out.push(hilitLine.join('') + '\\n');\n      });\n      return out.join('');\n    }).join('\\n');\n    const finalOut = results.length && !this.npm.config.get('long') ? 'Top hits for ' + args.map(JSON.stringify).join(' ') + '\\n' + '—'.repeat(cols - 1) + '\\n' + out + '\\n' + '—'.repeat(cols - 1) + '\\n' + '(run with -l or --long to see more context)' : out;\n    return finalOut.trim();\n  }\n\n}\n\nmodule.exports = HelpSearch;","map":{"version":3,"names":["fs","require","path","chalk","promisify","glob","readFile","BaseCommand","globify","pattern","split","join","HelpSearch","description","name","usage","params","ignoreImplicitWorkspace","exec","args","length","usageError","docPath","resolve","__dirname","files","data","readFiles","results","searchFiles","formatted","formatResults","trim","npm","output","res","Promise","all","map","file","replace","content","Object","entries","lowerCase","toLowerCase","some","a","includes","lines","i","line","nextLine","match","pruned","reduce","l","r","push","pop","shift","found","totalHits","arg","hit","cmd","basename","keys","hits","sort","b","slice","cols","Math","min","process","stdout","columns","Infinity","out","k","repeat","max","config","get","unshift","forEach","color","hilitLine","finder","p","f","word","hilit","bgBlack","red","finalOut","JSON","stringify","module","exports"],"sources":["/Users/chelsea/Documents/0_AllCoding/shoppingstories-v3/node_modules/npm/lib/commands/help-search.js"],"sourcesContent":["const fs = require('fs')\nconst path = require('path')\nconst chalk = require('chalk')\nconst { promisify } = require('util')\nconst glob = promisify(require('glob'))\nconst readFile = promisify(fs.readFile)\nconst BaseCommand = require('../base-command.js')\n\nconst globify = pattern => pattern.split('\\\\').join('/')\n\nclass HelpSearch extends BaseCommand {\n  static description = 'Search npm help documentation'\n  static name = 'help-search'\n  static usage = ['<text>']\n  static params = ['long']\n  static ignoreImplicitWorkspace = true\n\n  async exec (args) {\n    if (!args.length) {\n      throw this.usageError()\n    }\n\n    const docPath = path.resolve(__dirname, '..', '..', 'docs/content')\n    const files = await glob(`${globify(docPath)}/*/*.md`)\n    const data = await this.readFiles(files)\n    const results = await this.searchFiles(args, data, files)\n    const formatted = this.formatResults(args, results)\n    if (!formatted.trim()) {\n      this.npm.output(`No matches in help for: ${args.join(' ')}\\n`)\n    } else {\n      this.npm.output(formatted)\n    }\n  }\n\n  async readFiles (files) {\n    const res = {}\n    await Promise.all(files.map(async file => {\n      res[file] = (await readFile(file, 'utf8'))\n        .replace(/^---\\n(.*\\n)*?---\\n/, '').trim()\n    }))\n    return res\n  }\n\n  async searchFiles (args, data, files) {\n    const results = []\n    for (const [file, content] of Object.entries(data)) {\n      const lowerCase = content.toLowerCase()\n      // skip if no matches at all\n      if (!args.some(a => lowerCase.includes(a.toLowerCase()))) {\n        continue\n      }\n\n      const lines = content.split(/\\n+/)\n\n      // if a line has a search term, then skip it and the next line.\n      // if the next line has a search term, then skip all 3\n      // otherwise, set the line to null.  then remove the nulls.\n      for (let i = 0; i < lines.length; i++) {\n        const line = lines[i]\n        const nextLine = lines[i + 1]\n        let match = false\n        if (nextLine) {\n          match = args.some(a =>\n            nextLine.toLowerCase().includes(a.toLowerCase()))\n          if (match) {\n            // skip over the next line, and the line after it.\n            i += 2\n            continue\n          }\n        }\n\n        match = args.some(a => line.toLowerCase().includes(a.toLowerCase()))\n\n        if (match) {\n          // skip over the next line\n          i++\n          continue\n        }\n\n        lines[i] = null\n      }\n\n      // now squish any string of nulls into a single null\n      const pruned = lines.reduce((l, r) => {\n        if (!(r === null && l[l.length - 1] === null)) {\n          l.push(r)\n        }\n\n        return l\n      }, [])\n\n      if (pruned[pruned.length - 1] === null) {\n        pruned.pop()\n      }\n\n      if (pruned[0] === null) {\n        pruned.shift()\n      }\n\n      // now count how many args were found\n      const found = {}\n      let totalHits = 0\n      for (const line of pruned) {\n        for (const arg of args) {\n          const hit = (line || '').toLowerCase()\n            .split(arg.toLowerCase()).length - 1\n\n          if (hit > 0) {\n            found[arg] = (found[arg] || 0) + hit\n            totalHits += hit\n          }\n        }\n      }\n\n      const cmd = 'npm help ' +\n        path.basename(file, '.md').replace(/^npm-/, '')\n      results.push({\n        file,\n        cmd,\n        lines: pruned,\n        found: Object.keys(found),\n        hits: found,\n        totalHits,\n      })\n    }\n\n    // sort results by number of results found, then by number of hits\n    // then by number of matching lines\n\n    // coverage is ignored here because the contents of results are\n    // nondeterministic due to either glob or readFiles or Object.entries\n    return results.sort(/* istanbul ignore next */ (a, b) =>\n      a.found.length > b.found.length ? -1\n      : a.found.length < b.found.length ? 1\n      : a.totalHits > b.totalHits ? -1\n      : a.totalHits < b.totalHits ? 1\n      : a.lines.length > b.lines.length ? -1\n      : a.lines.length < b.lines.length ? 1\n      : 0).slice(0, 10)\n  }\n\n  formatResults (args, results) {\n    const cols = Math.min(process.stdout.columns || Infinity, 80) + 1\n\n    const out = results.map(res => {\n      const out = [res.cmd]\n      const r = Object.keys(res.hits)\n        .map(k => `${k}:${res.hits[k]}`)\n        .sort((a, b) => a > b ? 1 : -1)\n        .join(' ')\n\n      out.push(' '.repeat((Math.max(1, cols - out.join(' ').length - r.length - 1))))\n      out.push(r)\n\n      if (!this.npm.config.get('long')) {\n        return out.join('')\n      }\n\n      out.unshift('\\n\\n')\n      out.push('\\n')\n      out.push('-'.repeat(cols - 1) + '\\n')\n      res.lines.forEach((line, i) => {\n        if (line === null || i > 3) {\n          return\n        }\n\n        if (!this.npm.color) {\n          out.push(line + '\\n')\n          return\n        }\n        const hilitLine = []\n        for (const arg of args) {\n          const finder = line.toLowerCase().split(arg.toLowerCase())\n          let p = 0\n          for (const f of finder) {\n            hilitLine.push(line.slice(p, p + f.length))\n            const word = line.slice(p + f.length, p + f.length + arg.length)\n            const hilit = chalk.bgBlack.red(word)\n            hilitLine.push(hilit)\n            p += f.length + arg.length\n          }\n        }\n        out.push(hilitLine.join('') + '\\n')\n      })\n\n      return out.join('')\n    }).join('\\n')\n\n    const finalOut = results.length && !this.npm.config.get('long')\n      ? 'Top hits for ' + (args.map(JSON.stringify).join(' ')) + '\\n' +\n      '—'.repeat(cols - 1) + '\\n' +\n      out + '\\n' +\n      '—'.repeat(cols - 1) + '\\n' +\n      '(run with -l or --long to see more context)'\n      : out\n\n    return finalOut.trim()\n  }\n}\nmodule.exports = HelpSearch\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}