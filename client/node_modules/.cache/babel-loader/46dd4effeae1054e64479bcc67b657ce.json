{"ast":null,"code":"/* eslint node/no-deprecated-api: \"off\" */\nconst semver = require('semver');\n\nconst {\n  basename\n} = require('path');\n\nconst {\n  parse\n} = require('url');\n\nmodule.exports = (name, tgz) => {\n  const base = basename(tgz);\n\n  if (!base.endsWith('.tgz')) {\n    return null;\n  }\n\n  const u = parse(tgz);\n\n  if (/^https?:/.test(u.protocol)) {\n    // registry url?  check for most likely pattern.\n    // either /@foo/bar/-/bar-1.2.3.tgz or\n    // /foo/-/foo-1.2.3.tgz, and fall through to\n    // basename checking.  Note that registries can\n    // be mounted below the root url, so /a/b/-/x/y/foo/-/foo-1.2.3.tgz\n    // is a potential option.\n    const tfsplit = u.path.slice(1).split('/-/');\n\n    if (tfsplit.length > 1) {\n      const afterTF = tfsplit.pop();\n\n      if (afterTF === base) {\n        const pre = tfsplit.pop();\n        const preSplit = pre.split(/\\/|%2f/i);\n        const project = preSplit.pop();\n        const scope = preSplit.pop();\n        return versionFromBaseScopeName(base, scope, project);\n      }\n    }\n  }\n\n  const split = name.split(/\\/|%2f/i);\n  const project = split.pop();\n  const scope = split.pop();\n  return versionFromBaseScopeName(base, scope, project);\n};\n\nconst versionFromBaseScopeName = (base, scope, name) => {\n  if (!base.startsWith(name + '-')) {\n    return null;\n  }\n\n  const parsed = semver.parse(base.substring(name.length + 1, base.length - 4));\n  return parsed ? {\n    name: scope && scope.charAt(0) === '@' ? `${scope}/${name}` : name,\n    version: parsed.version\n  } : null;\n};","map":{"version":3,"names":["semver","require","basename","parse","module","exports","name","tgz","base","endsWith","u","test","protocol","tfsplit","path","slice","split","length","afterTF","pop","pre","preSplit","project","scope","versionFromBaseScopeName","startsWith","parsed","substring","charAt","version"],"sources":["/Users/chelsea/Documents/0_AllCoding/shoppingstories-v3/node_modules/npm/node_modules/@npmcli/arborist/lib/version-from-tgz.js"],"sourcesContent":["/* eslint node/no-deprecated-api: \"off\" */\nconst semver = require('semver')\nconst { basename } = require('path')\nconst { parse } = require('url')\nmodule.exports = (name, tgz) => {\n  const base = basename(tgz)\n  if (!base.endsWith('.tgz')) {\n    return null\n  }\n\n  const u = parse(tgz)\n  if (/^https?:/.test(u.protocol)) {\n    // registry url?  check for most likely pattern.\n    // either /@foo/bar/-/bar-1.2.3.tgz or\n    // /foo/-/foo-1.2.3.tgz, and fall through to\n    // basename checking.  Note that registries can\n    // be mounted below the root url, so /a/b/-/x/y/foo/-/foo-1.2.3.tgz\n    // is a potential option.\n    const tfsplit = u.path.slice(1).split('/-/')\n    if (tfsplit.length > 1) {\n      const afterTF = tfsplit.pop()\n      if (afterTF === base) {\n        const pre = tfsplit.pop()\n        const preSplit = pre.split(/\\/|%2f/i)\n        const project = preSplit.pop()\n        const scope = preSplit.pop()\n        return versionFromBaseScopeName(base, scope, project)\n      }\n    }\n  }\n\n  const split = name.split(/\\/|%2f/i)\n  const project = split.pop()\n  const scope = split.pop()\n  return versionFromBaseScopeName(base, scope, project)\n}\n\nconst versionFromBaseScopeName = (base, scope, name) => {\n  if (!base.startsWith(name + '-')) {\n    return null\n  }\n\n  const parsed = semver.parse(base.substring(name.length + 1, base.length - 4))\n  return parsed ? {\n    name: scope && scope.charAt(0) === '@' ? `${scope}/${name}` : name,\n    version: parsed.version,\n  } : null\n}\n"],"mappings":"AAAA;AACA,MAAMA,MAAM,GAAGC,OAAO,CAAC,QAAD,CAAtB;;AACA,MAAM;EAAEC;AAAF,IAAeD,OAAO,CAAC,MAAD,CAA5B;;AACA,MAAM;EAAEE;AAAF,IAAYF,OAAO,CAAC,KAAD,CAAzB;;AACAG,MAAM,CAACC,OAAP,GAAiB,CAACC,IAAD,EAAOC,GAAP,KAAe;EAC9B,MAAMC,IAAI,GAAGN,QAAQ,CAACK,GAAD,CAArB;;EACA,IAAI,CAACC,IAAI,CAACC,QAAL,CAAc,MAAd,CAAL,EAA4B;IAC1B,OAAO,IAAP;EACD;;EAED,MAAMC,CAAC,GAAGP,KAAK,CAACI,GAAD,CAAf;;EACA,IAAI,WAAWI,IAAX,CAAgBD,CAAC,CAACE,QAAlB,CAAJ,EAAiC;IAC/B;IACA;IACA;IACA;IACA;IACA;IACA,MAAMC,OAAO,GAAGH,CAAC,CAACI,IAAF,CAAOC,KAAP,CAAa,CAAb,EAAgBC,KAAhB,CAAsB,KAAtB,CAAhB;;IACA,IAAIH,OAAO,CAACI,MAAR,GAAiB,CAArB,EAAwB;MACtB,MAAMC,OAAO,GAAGL,OAAO,CAACM,GAAR,EAAhB;;MACA,IAAID,OAAO,KAAKV,IAAhB,EAAsB;QACpB,MAAMY,GAAG,GAAGP,OAAO,CAACM,GAAR,EAAZ;QACA,MAAME,QAAQ,GAAGD,GAAG,CAACJ,KAAJ,CAAU,SAAV,CAAjB;QACA,MAAMM,OAAO,GAAGD,QAAQ,CAACF,GAAT,EAAhB;QACA,MAAMI,KAAK,GAAGF,QAAQ,CAACF,GAAT,EAAd;QACA,OAAOK,wBAAwB,CAAChB,IAAD,EAAOe,KAAP,EAAcD,OAAd,CAA/B;MACD;IACF;EACF;;EAED,MAAMN,KAAK,GAAGV,IAAI,CAACU,KAAL,CAAW,SAAX,CAAd;EACA,MAAMM,OAAO,GAAGN,KAAK,CAACG,GAAN,EAAhB;EACA,MAAMI,KAAK,GAAGP,KAAK,CAACG,GAAN,EAAd;EACA,OAAOK,wBAAwB,CAAChB,IAAD,EAAOe,KAAP,EAAcD,OAAd,CAA/B;AACD,CA/BD;;AAiCA,MAAME,wBAAwB,GAAG,CAAChB,IAAD,EAAOe,KAAP,EAAcjB,IAAd,KAAuB;EACtD,IAAI,CAACE,IAAI,CAACiB,UAAL,CAAgBnB,IAAI,GAAG,GAAvB,CAAL,EAAkC;IAChC,OAAO,IAAP;EACD;;EAED,MAAMoB,MAAM,GAAG1B,MAAM,CAACG,KAAP,CAAaK,IAAI,CAACmB,SAAL,CAAerB,IAAI,CAACW,MAAL,GAAc,CAA7B,EAAgCT,IAAI,CAACS,MAAL,GAAc,CAA9C,CAAb,CAAf;EACA,OAAOS,MAAM,GAAG;IACdpB,IAAI,EAAEiB,KAAK,IAAIA,KAAK,CAACK,MAAN,CAAa,CAAb,MAAoB,GAA7B,GAAoC,GAAEL,KAAM,IAAGjB,IAAK,EAApD,GAAwDA,IADhD;IAEduB,OAAO,EAAEH,MAAM,CAACG;EAFF,CAAH,GAGT,IAHJ;AAID,CAVD"},"metadata":{},"sourceType":"script"}