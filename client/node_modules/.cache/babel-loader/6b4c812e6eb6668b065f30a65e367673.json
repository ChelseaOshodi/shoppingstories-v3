{"ast":null,"code":"const fs = require('fs');\n\nconst {\n  relative,\n  resolve\n} = require('path');\n\nconst mkdirp = require('mkdirp-infer-owner');\n\nconst initJson = require('init-package-json');\n\nconst npa = require('npm-package-arg');\n\nconst rpj = require('read-package-json-fast');\n\nconst libexec = require('libnpmexec');\n\nconst mapWorkspaces = require('@npmcli/map-workspaces');\n\nconst PackageJson = require('@npmcli/package-json');\n\nconst log = require('../utils/log-shim.js');\n\nconst updateWorkspaces = require('../workspaces/update-workspaces.js');\n\nconst BaseCommand = require('../base-command.js');\n\nclass Init extends BaseCommand {\n  static description = 'Create a package.json file';\n  static params = ['yes', 'force', 'scope', 'workspace', 'workspaces', 'workspaces-update', 'include-workspace-root'];\n  static name = 'init';\n  static usage = ['<package-spec> (same as `npx <package-spec>)', '<@scope> (same as `npx <@scope>/create`)'];\n  static ignoreImplicitWorkspace = false;\n\n  async exec(args) {\n    // npm exec style\n    if (args.length) {\n      return await this.execCreate({\n        args,\n        path: process.cwd()\n      });\n    } // no args, uses classic init-package-json boilerplate\n\n\n    await this.template();\n  }\n\n  async execWorkspaces(args, filters) {\n    // if the root package is uninitiated, take care of it first\n    if (this.npm.flatOptions.includeWorkspaceRoot) {\n      await this.exec(args);\n    } // reads package.json for the top-level folder first, by doing this we\n    // ensure the command throw if no package.json is found before trying\n    // to create a workspace package.json file or its folders\n\n\n    const pkg = await rpj(resolve(this.npm.localPrefix, 'package.json'));\n\n    const wPath = filterArg => resolve(this.npm.localPrefix, filterArg);\n\n    const workspacesPaths = []; // npm-exec style, runs in the context of each workspace filter\n\n    if (args.length) {\n      for (const filterArg of filters) {\n        const path = wPath(filterArg);\n        await mkdirp(path);\n        workspacesPaths.push(path);\n        await this.execCreate({\n          args,\n          path\n        });\n        await this.setWorkspace({\n          pkg,\n          workspacePath: path\n        });\n      }\n\n      return;\n    } // no args, uses classic init-package-json boilerplate\n\n\n    for (const filterArg of filters) {\n      const path = wPath(filterArg);\n      await mkdirp(path);\n      workspacesPaths.push(path);\n      await this.template(path);\n      await this.setWorkspace({\n        pkg,\n        workspacePath: path\n      });\n    } // reify packages once all workspaces have been initialized\n\n\n    await this.update(workspacesPaths);\n  }\n\n  async execCreate(_ref) {\n    let {\n      args,\n      path\n    } = _ref;\n    const [initerName, ...otherArgs] = args;\n    let packageName = initerName; // Only a scope, possibly with a version\n\n    if (/^@[^/]+$/.test(initerName)) {\n      const [, scope, version] = initerName.split('@');\n      packageName = `@${scope}/create`;\n\n      if (version) {\n        packageName = `${packageName}@${version}`;\n      }\n    } else {\n      const req = npa(initerName);\n\n      if (req.type === 'git' && req.hosted) {\n        const {\n          user,\n          project\n        } = req.hosted;\n        packageName = initerName.replace(user + '/' + project, user + '/create-' + project);\n      } else if (req.registry) {\n        packageName = req.name.replace(/^(@[^/]+\\/)?/, '$1create-');\n\n        if (req.rawSpec) {\n          packageName += '@' + req.rawSpec;\n        }\n      } else {\n        throw Object.assign(new Error('Unrecognized initializer: ' + initerName + '\\nFor more package binary executing power check out `npx`:' + '\\nhttps://www.npmjs.com/package/npx'), {\n          code: 'EUNSUPPORTED'\n        });\n      }\n    }\n\n    const newArgs = [packageName, ...otherArgs];\n    const {\n      color\n    } = this.npm.flatOptions;\n    const {\n      flatOptions,\n      localBin,\n      globalBin\n    } = this.npm;\n    const output = this.npm.output.bind(this.npm);\n    const runPath = path;\n    const scriptShell = this.npm.config.get('script-shell') || undefined;\n    const yes = this.npm.config.get('yes');\n    await libexec({ ...flatOptions,\n      args: newArgs,\n      color,\n      localBin,\n      globalBin,\n      output,\n      path,\n      runPath,\n      scriptShell,\n      yes\n    });\n  }\n\n  async template() {\n    let path = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : process.cwd();\n    log.pause();\n    log.disableProgress();\n    const initFile = this.npm.config.get('init-module');\n\n    if (!this.npm.config.get('yes') && !this.npm.config.get('force')) {\n      this.npm.output(['This utility will walk you through creating a package.json file.', 'It only covers the most common items, and tries to guess sensible defaults.', '', 'See `npm help init` for definitive documentation on these fields', 'and exactly what they do.', '', 'Use `npm install <pkg>` afterwards to install a package and', 'save it as a dependency in the package.json file.', '', 'Press ^C at any time to quit.'].join('\\n'));\n    } // XXX promisify init-package-json\n\n\n    await new Promise((res, rej) => {\n      initJson(path, initFile, this.npm.config, (er, data) => {\n        log.resume();\n        log.enableProgress();\n        log.silly('package data', data);\n\n        if (er && er.message === 'canceled') {\n          log.warn('init', 'canceled');\n          return res();\n        }\n\n        if (er) {\n          rej(er);\n        } else {\n          log.info('init', 'written successfully');\n          res(data);\n        }\n      });\n    });\n  }\n\n  async setWorkspace(_ref2) {\n    let {\n      pkg,\n      workspacePath\n    } = _ref2;\n    const workspaces = await mapWorkspaces({\n      cwd: this.npm.localPrefix,\n      pkg\n    }); // skip setting workspace if current package.json glob already satisfies it\n\n    for (const wPath of workspaces.values()) {\n      if (wPath === workspacePath) {\n        return;\n      }\n    } // if a create-pkg didn't generate a package.json at the workspace\n    // folder level, it might not be recognized as a workspace by\n    // mapWorkspaces, so we're just going to avoid touching the\n    // top-level package.json\n\n\n    try {\n      fs.statSync(resolve(workspacePath, 'package.json'));\n    } catch (err) {\n      return;\n    }\n\n    const pkgJson = await PackageJson.load(this.npm.localPrefix);\n    pkgJson.update({\n      workspaces: [...(pkgJson.content.workspaces || []), relative(this.npm.localPrefix, workspacePath)]\n    });\n    await pkgJson.save();\n  }\n\n  async update(workspacesPaths) {\n    // translate workspaces paths into an array containing workspaces names\n    const workspaces = [];\n\n    for (const path of workspacesPaths) {\n      const pkgPath = resolve(path, 'package.json');\n      const {\n        name\n      } = await rpj(pkgPath).catch(() => ({}));\n\n      if (name) {\n        workspaces.push(name);\n      }\n    }\n\n    const {\n      config,\n      flatOptions,\n      localPrefix\n    } = this.npm;\n    await updateWorkspaces({\n      config,\n      flatOptions,\n      localPrefix,\n      npm: this.npm,\n      workspaces\n    });\n  }\n\n}\n\nmodule.exports = Init;","map":{"version":3,"names":["fs","require","relative","resolve","mkdirp","initJson","npa","rpj","libexec","mapWorkspaces","PackageJson","log","updateWorkspaces","BaseCommand","Init","description","params","name","usage","ignoreImplicitWorkspace","exec","args","length","execCreate","path","process","cwd","template","execWorkspaces","filters","npm","flatOptions","includeWorkspaceRoot","pkg","localPrefix","wPath","filterArg","workspacesPaths","push","setWorkspace","workspacePath","update","initerName","otherArgs","packageName","test","scope","version","split","req","type","hosted","user","project","replace","registry","rawSpec","Object","assign","Error","code","newArgs","color","localBin","globalBin","output","bind","runPath","scriptShell","config","get","undefined","yes","pause","disableProgress","initFile","join","Promise","res","rej","er","data","resume","enableProgress","silly","message","warn","info","workspaces","values","statSync","err","pkgJson","load","content","save","pkgPath","catch","module","exports"],"sources":["/Users/chelsea/Documents/0_AllCoding/shoppingstories-v3/node_modules/npm/lib/commands/init.js"],"sourcesContent":["const fs = require('fs')\nconst { relative, resolve } = require('path')\nconst mkdirp = require('mkdirp-infer-owner')\nconst initJson = require('init-package-json')\nconst npa = require('npm-package-arg')\nconst rpj = require('read-package-json-fast')\nconst libexec = require('libnpmexec')\nconst mapWorkspaces = require('@npmcli/map-workspaces')\nconst PackageJson = require('@npmcli/package-json')\nconst log = require('../utils/log-shim.js')\nconst updateWorkspaces = require('../workspaces/update-workspaces.js')\n\nconst BaseCommand = require('../base-command.js')\n\nclass Init extends BaseCommand {\n  static description = 'Create a package.json file'\n  static params = [\n    'yes',\n    'force',\n    'scope',\n    'workspace',\n    'workspaces',\n    'workspaces-update',\n    'include-workspace-root',\n  ]\n\n  static name = 'init'\n  static usage = [\n    '<package-spec> (same as `npx <package-spec>)',\n    '<@scope> (same as `npx <@scope>/create`)',\n  ]\n\n  static ignoreImplicitWorkspace = false\n\n  async exec (args) {\n    // npm exec style\n    if (args.length) {\n      return (await this.execCreate({ args, path: process.cwd() }))\n    }\n\n    // no args, uses classic init-package-json boilerplate\n    await this.template()\n  }\n\n  async execWorkspaces (args, filters) {\n    // if the root package is uninitiated, take care of it first\n    if (this.npm.flatOptions.includeWorkspaceRoot) {\n      await this.exec(args)\n    }\n\n    // reads package.json for the top-level folder first, by doing this we\n    // ensure the command throw if no package.json is found before trying\n    // to create a workspace package.json file or its folders\n    const pkg = await rpj(resolve(this.npm.localPrefix, 'package.json'))\n    const wPath = filterArg => resolve(this.npm.localPrefix, filterArg)\n\n    const workspacesPaths = []\n    // npm-exec style, runs in the context of each workspace filter\n    if (args.length) {\n      for (const filterArg of filters) {\n        const path = wPath(filterArg)\n        await mkdirp(path)\n        workspacesPaths.push(path)\n        await this.execCreate({ args, path })\n        await this.setWorkspace({ pkg, workspacePath: path })\n      }\n      return\n    }\n\n    // no args, uses classic init-package-json boilerplate\n    for (const filterArg of filters) {\n      const path = wPath(filterArg)\n      await mkdirp(path)\n      workspacesPaths.push(path)\n      await this.template(path)\n      await this.setWorkspace({ pkg, workspacePath: path })\n    }\n\n    // reify packages once all workspaces have been initialized\n    await this.update(workspacesPaths)\n  }\n\n  async execCreate ({ args, path }) {\n    const [initerName, ...otherArgs] = args\n    let packageName = initerName\n\n    // Only a scope, possibly with a version\n    if (/^@[^/]+$/.test(initerName)) {\n      const [, scope, version] = initerName.split('@')\n      packageName = `@${scope}/create`\n      if (version) {\n        packageName = `${packageName}@${version}`\n      }\n    } else {\n      const req = npa(initerName)\n      if (req.type === 'git' && req.hosted) {\n        const { user, project } = req.hosted\n        packageName = initerName\n          .replace(user + '/' + project, user + '/create-' + project)\n      } else if (req.registry) {\n        packageName = req.name.replace(/^(@[^/]+\\/)?/, '$1create-')\n        if (req.rawSpec) {\n          packageName += '@' + req.rawSpec\n        }\n      } else {\n        throw Object.assign(new Error(\n          'Unrecognized initializer: ' + initerName +\n          '\\nFor more package binary executing power check out `npx`:' +\n          '\\nhttps://www.npmjs.com/package/npx'\n        ), { code: 'EUNSUPPORTED' })\n      }\n    }\n\n    const newArgs = [packageName, ...otherArgs]\n    const { color } = this.npm.flatOptions\n    const {\n      flatOptions,\n      localBin,\n      globalBin,\n    } = this.npm\n    const output = this.npm.output.bind(this.npm)\n    const runPath = path\n    const scriptShell = this.npm.config.get('script-shell') || undefined\n    const yes = this.npm.config.get('yes')\n\n    await libexec({\n      ...flatOptions,\n      args: newArgs,\n      color,\n      localBin,\n      globalBin,\n      output,\n      path,\n      runPath,\n      scriptShell,\n      yes,\n    })\n  }\n\n  async template (path = process.cwd()) {\n    log.pause()\n    log.disableProgress()\n\n    const initFile = this.npm.config.get('init-module')\n    if (!this.npm.config.get('yes') && !this.npm.config.get('force')) {\n      this.npm.output([\n        'This utility will walk you through creating a package.json file.',\n        'It only covers the most common items, and tries to guess sensible defaults.',\n        '',\n        'See `npm help init` for definitive documentation on these fields',\n        'and exactly what they do.',\n        '',\n        'Use `npm install <pkg>` afterwards to install a package and',\n        'save it as a dependency in the package.json file.',\n        '',\n        'Press ^C at any time to quit.',\n      ].join('\\n'))\n    }\n\n    // XXX promisify init-package-json\n    await new Promise((res, rej) => {\n      initJson(path, initFile, this.npm.config, (er, data) => {\n        log.resume()\n        log.enableProgress()\n        log.silly('package data', data)\n        if (er && er.message === 'canceled') {\n          log.warn('init', 'canceled')\n          return res()\n        }\n        if (er) {\n          rej(er)\n        } else {\n          log.info('init', 'written successfully')\n          res(data)\n        }\n      })\n    })\n  }\n\n  async setWorkspace ({ pkg, workspacePath }) {\n    const workspaces = await mapWorkspaces({ cwd: this.npm.localPrefix, pkg })\n\n    // skip setting workspace if current package.json glob already satisfies it\n    for (const wPath of workspaces.values()) {\n      if (wPath === workspacePath) {\n        return\n      }\n    }\n\n    // if a create-pkg didn't generate a package.json at the workspace\n    // folder level, it might not be recognized as a workspace by\n    // mapWorkspaces, so we're just going to avoid touching the\n    // top-level package.json\n    try {\n      fs.statSync(resolve(workspacePath, 'package.json'))\n    } catch (err) {\n      return\n    }\n\n    const pkgJson = await PackageJson.load(this.npm.localPrefix)\n\n    pkgJson.update({\n      workspaces: [\n        ...(pkgJson.content.workspaces || []),\n        relative(this.npm.localPrefix, workspacePath),\n      ],\n    })\n\n    await pkgJson.save()\n  }\n\n  async update (workspacesPaths) {\n    // translate workspaces paths into an array containing workspaces names\n    const workspaces = []\n    for (const path of workspacesPaths) {\n      const pkgPath = resolve(path, 'package.json')\n      const { name } = await rpj(pkgPath)\n        .catch(() => ({}))\n\n      if (name) {\n        workspaces.push(name)\n      }\n    }\n\n    const {\n      config,\n      flatOptions,\n      localPrefix,\n    } = this.npm\n\n    await updateWorkspaces({\n      config,\n      flatOptions,\n      localPrefix,\n      npm: this.npm,\n      workspaces,\n    })\n  }\n}\n\nmodule.exports = Init\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}