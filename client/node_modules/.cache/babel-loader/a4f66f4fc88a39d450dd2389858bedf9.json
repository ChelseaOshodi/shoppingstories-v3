{"ast":null,"code":"const Minipass = require('minipass');\n\nconst Pipeline = require('minipass-pipeline');\n\nconst libSearch = require('libnpmsearch');\n\nconst log = require('../utils/log-shim.js');\n\nconst formatSearchStream = require('../utils/format-search-stream.js');\n\nfunction filter(data, include, exclude) {\n  const words = [data.name].concat(data.maintainers.map(m => `=${m.username}`)).concat(data.keywords || []).map(f => f && f.trim && f.trim()).filter(f => f).join(' ').toLowerCase();\n\n  if (exclude.find(e => match(words, e))) {\n    return false;\n  }\n\n  return true;\n}\n\nfunction match(words, pattern) {\n  if (pattern.startsWith('/')) {\n    if (pattern.endsWith('/')) {\n      pattern = pattern.slice(0, -1);\n    }\n\n    pattern = new RegExp(pattern.slice(1));\n    return words.match(pattern);\n  }\n\n  return words.indexOf(pattern) !== -1;\n}\n\nconst BaseCommand = require('../base-command.js');\n\nclass Search extends BaseCommand {\n  static description = 'Search for packages';\n  static name = 'search';\n  static params = ['long', 'json', 'color', 'parseable', 'description', 'searchopts', 'searchexclude', 'registry', 'prefer-online', 'prefer-offline', 'offline'];\n  static usage = ['[search terms ...]'];\n  static ignoreImplicitWorkspace = true;\n\n  async exec(args) {\n    const opts = { ...this.npm.flatOptions,\n      ...this.npm.flatOptions.search,\n      include: args.map(s => s.toLowerCase()).filter(s => s),\n      exclude: this.npm.flatOptions.search.exclude.split(/\\s+/)\n    };\n\n    if (opts.include.length === 0) {\n      throw new Error('search must be called with arguments');\n    } // Used later to figure out whether we had any packages go out\n\n\n    let anyOutput = false;\n\n    class FilterStream extends Minipass {\n      write(pkg) {\n        if (filter(pkg, opts.include, opts.exclude)) {\n          super.write(pkg);\n        }\n      }\n\n    }\n\n    const filterStream = new FilterStream(); // Grab a configured output stream that will spit out packages in the\n    // desired format.\n\n    const outputStream = formatSearchStream({\n      args,\n      // --searchinclude options are not highlighted\n      ...opts\n    });\n    log.silly('search', 'searching packages');\n    const p = new Pipeline(libSearch.stream(opts.include, opts), filterStream, outputStream);\n    p.on('data', chunk => {\n      if (!anyOutput) {\n        anyOutput = true;\n      }\n\n      this.npm.output(chunk.toString('utf8'));\n    });\n    await p.promise();\n\n    if (!anyOutput && !this.npm.config.get('json') && !this.npm.config.get('parseable')) {\n      this.npm.output('No matches found for ' + args.map(JSON.stringify).join(' '));\n    }\n\n    log.silly('search', 'search completed');\n    log.clearProgress();\n  }\n\n}\n\nmodule.exports = Search;","map":{"version":3,"names":["Minipass","require","Pipeline","libSearch","log","formatSearchStream","filter","data","include","exclude","words","name","concat","maintainers","map","m","username","keywords","f","trim","join","toLowerCase","find","e","match","pattern","startsWith","endsWith","slice","RegExp","indexOf","BaseCommand","Search","description","params","usage","ignoreImplicitWorkspace","exec","args","opts","npm","flatOptions","search","s","split","length","Error","anyOutput","FilterStream","write","pkg","filterStream","outputStream","silly","p","stream","on","chunk","output","toString","promise","config","get","JSON","stringify","clearProgress","module","exports"],"sources":["/Users/chelsea/Documents/0_AllCoding/shoppingstories-v3/node_modules/npm/lib/commands/search.js"],"sourcesContent":["const Minipass = require('minipass')\nconst Pipeline = require('minipass-pipeline')\nconst libSearch = require('libnpmsearch')\nconst log = require('../utils/log-shim.js')\n\nconst formatSearchStream = require('../utils/format-search-stream.js')\n\nfunction filter (data, include, exclude) {\n  const words = [data.name]\n    .concat(data.maintainers.map(m => `=${m.username}`))\n    .concat(data.keywords || [])\n    .map(f => f && f.trim && f.trim())\n    .filter(f => f)\n    .join(' ')\n    .toLowerCase()\n\n  if (exclude.find(e => match(words, e))) {\n    return false\n  }\n\n  return true\n}\n\nfunction match (words, pattern) {\n  if (pattern.startsWith('/')) {\n    if (pattern.endsWith('/')) {\n      pattern = pattern.slice(0, -1)\n    }\n    pattern = new RegExp(pattern.slice(1))\n    return words.match(pattern)\n  }\n  return words.indexOf(pattern) !== -1\n}\n\nconst BaseCommand = require('../base-command.js')\nclass Search extends BaseCommand {\n  static description = 'Search for packages'\n  static name = 'search'\n  static params = [\n    'long',\n    'json',\n    'color',\n    'parseable',\n    'description',\n    'searchopts',\n    'searchexclude',\n    'registry',\n    'prefer-online',\n    'prefer-offline',\n    'offline',\n  ]\n\n  static usage = ['[search terms ...]']\n  static ignoreImplicitWorkspace = true\n\n  async exec (args) {\n    const opts = {\n      ...this.npm.flatOptions,\n      ...this.npm.flatOptions.search,\n      include: args.map(s => s.toLowerCase()).filter(s => s),\n      exclude: this.npm.flatOptions.search.exclude.split(/\\s+/),\n    }\n\n    if (opts.include.length === 0) {\n      throw new Error('search must be called with arguments')\n    }\n\n    // Used later to figure out whether we had any packages go out\n    let anyOutput = false\n\n    class FilterStream extends Minipass {\n      write (pkg) {\n        if (filter(pkg, opts.include, opts.exclude)) {\n          super.write(pkg)\n        }\n      }\n    }\n\n    const filterStream = new FilterStream()\n\n    // Grab a configured output stream that will spit out packages in the\n    // desired format.\n    const outputStream = formatSearchStream({\n      args, // --searchinclude options are not highlighted\n      ...opts,\n    })\n\n    log.silly('search', 'searching packages')\n    const p = new Pipeline(\n      libSearch.stream(opts.include, opts),\n      filterStream,\n      outputStream\n    )\n\n    p.on('data', chunk => {\n      if (!anyOutput) {\n        anyOutput = true\n      }\n      this.npm.output(chunk.toString('utf8'))\n    })\n\n    await p.promise()\n    if (!anyOutput && !this.npm.config.get('json') && !this.npm.config.get('parseable')) {\n      this.npm.output('No matches found for ' + (args.map(JSON.stringify).join(' ')))\n    }\n\n    log.silly('search', 'search completed')\n    log.clearProgress()\n  }\n}\nmodule.exports = Search\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}