{"ast":null,"code":"const tar = require('tar');\n\nconst ssri = require('ssri');\n\nconst log = require('./log-shim');\n\nconst formatBytes = require('./format-bytes.js');\n\nconst columnify = require('columnify');\n\nconst localeCompare = require('@isaacs/string-locale-compare')('en', {\n  sensitivity: 'case',\n  numeric: true\n});\n\nconst logTar = function (tarball) {\n  let opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  const {\n    unicode = false\n  } = opts;\n  log.notice('');\n  log.notice('', `${unicode ? 'ðŸ“¦ ' : 'package:'} ${tarball.name}@${tarball.version}`);\n  log.notice('=== Tarball Contents ===');\n\n  if (tarball.files.length) {\n    log.notice('', columnify(tarball.files.map(f => {\n      const bytes = formatBytes(f.size, false);\n      return /^node_modules\\//.test(f.path) ? null : {\n        path: f.path,\n        size: `${bytes}`\n      };\n    }).filter(f => f), {\n      include: ['size', 'path'],\n      showHeaders: false\n    }));\n  }\n\n  if (tarball.bundled.length) {\n    log.notice('=== Bundled Dependencies ===');\n    tarball.bundled.forEach(name => log.notice('', name));\n  }\n\n  log.notice('=== Tarball Details ===');\n  log.notice('', columnify([{\n    name: 'name:',\n    value: tarball.name\n  }, {\n    name: 'version:',\n    value: tarball.version\n  }, tarball.filename && {\n    name: 'filename:',\n    value: tarball.filename\n  }, {\n    name: 'package size:',\n    value: formatBytes(tarball.size)\n  }, {\n    name: 'unpacked size:',\n    value: formatBytes(tarball.unpackedSize)\n  }, {\n    name: 'shasum:',\n    value: tarball.shasum\n  }, {\n    name: 'integrity:',\n    value: tarball.integrity.toString().slice(0, 20) + '[...]' + tarball.integrity.toString().slice(80)\n  }, tarball.bundled.length && {\n    name: 'bundled deps:',\n    value: tarball.bundled.length\n  }, tarball.bundled.length && {\n    name: 'bundled files:',\n    value: tarball.entryCount - tarball.files.length\n  }, tarball.bundled.length && {\n    name: 'own files:',\n    value: tarball.files.length\n  }, {\n    name: 'total files:',\n    value: tarball.entryCount\n  }].filter(x => x), {\n    include: ['name', 'value'],\n    showHeaders: false\n  }));\n  log.notice('', '');\n};\n\nconst getContents = async (manifest, tarball) => {\n  const files = [];\n  const bundled = new Set();\n  let totalEntries = 0;\n  let totalEntrySize = 0; // reads contents of tarball\n\n  const stream = tar.t({\n    onentry(entry) {\n      totalEntries++;\n      totalEntrySize += entry.size;\n      const p = entry.path;\n\n      if (p.startsWith('package/node_modules/')) {\n        const name = p.match(/^package\\/node_modules\\/((?:@[^/]+\\/)?[^/]+)/)[1];\n        bundled.add(name);\n      }\n\n      files.push({\n        path: entry.path.replace(/^package\\//, ''),\n        size: entry.size,\n        mode: entry.mode\n      });\n    }\n\n  });\n  stream.end(tarball);\n  const integrity = await ssri.fromData(tarball, {\n    algorithms: ['sha1', 'sha512']\n  });\n\n  const comparator = (_ref, _ref2) => {\n    let {\n      path: a\n    } = _ref;\n    let {\n      path: b\n    } = _ref2;\n    return localeCompare(a, b);\n  };\n\n  const isUpper = str => {\n    const ch = str.charAt(0);\n    return ch === ch.toUpperCase();\n  };\n\n  const uppers = files.filter(file => isUpper(file.path));\n  const others = files.filter(file => !isUpper(file.path));\n  uppers.sort(comparator);\n  others.sort(comparator);\n  const shasum = integrity.sha1[0].hexDigest();\n  return {\n    id: manifest._id || `${manifest.name}@${manifest.version}`,\n    name: manifest.name,\n    version: manifest.version,\n    size: tarball.length,\n    unpackedSize: totalEntrySize,\n    shasum,\n    integrity: ssri.parse(integrity.sha512[0]),\n    filename: `${manifest.name}-${manifest.version}.tgz`,\n    files: uppers.concat(others),\n    entryCount: totalEntries,\n    bundled: Array.from(bundled)\n  };\n};\n\nmodule.exports = {\n  logTar,\n  getContents\n};","map":{"version":3,"names":["tar","require","ssri","log","formatBytes","columnify","localeCompare","sensitivity","numeric","logTar","tarball","opts","unicode","notice","name","version","files","length","map","f","bytes","size","test","path","filter","include","showHeaders","bundled","forEach","value","filename","unpackedSize","shasum","integrity","toString","slice","entryCount","x","getContents","manifest","Set","totalEntries","totalEntrySize","stream","t","onentry","entry","p","startsWith","match","add","push","replace","mode","end","fromData","algorithms","comparator","a","b","isUpper","str","ch","charAt","toUpperCase","uppers","file","others","sort","sha1","hexDigest","id","_id","parse","sha512","concat","Array","from","module","exports"],"sources":["/Users/chelsea/Documents/0_AllCoding/shoppingstories-v3/node_modules/npm/lib/utils/tar.js"],"sourcesContent":["const tar = require('tar')\nconst ssri = require('ssri')\nconst log = require('./log-shim')\nconst formatBytes = require('./format-bytes.js')\nconst columnify = require('columnify')\nconst localeCompare = require('@isaacs/string-locale-compare')('en', {\n  sensitivity: 'case',\n  numeric: true,\n})\n\nconst logTar = (tarball, opts = {}) => {\n  const { unicode = false } = opts\n  log.notice('')\n  log.notice('', `${unicode ? 'ðŸ“¦ ' : 'package:'} ${tarball.name}@${tarball.version}`)\n  log.notice('=== Tarball Contents ===')\n  if (tarball.files.length) {\n    log.notice(\n      '',\n      columnify(\n        tarball.files\n          .map(f => {\n            const bytes = formatBytes(f.size, false)\n            return /^node_modules\\//.test(f.path) ? null : { path: f.path, size: `${bytes}` }\n          })\n          .filter(f => f),\n        {\n          include: ['size', 'path'],\n          showHeaders: false,\n        }\n      )\n    )\n  }\n  if (tarball.bundled.length) {\n    log.notice('=== Bundled Dependencies ===')\n    tarball.bundled.forEach(name => log.notice('', name))\n  }\n  log.notice('=== Tarball Details ===')\n  log.notice(\n    '',\n    columnify(\n      [\n        { name: 'name:', value: tarball.name },\n        { name: 'version:', value: tarball.version },\n        tarball.filename && { name: 'filename:', value: tarball.filename },\n        { name: 'package size:', value: formatBytes(tarball.size) },\n        { name: 'unpacked size:', value: formatBytes(tarball.unpackedSize) },\n        { name: 'shasum:', value: tarball.shasum },\n        {\n          name: 'integrity:',\n          value:\n            tarball.integrity.toString().slice(0, 20) +\n            '[...]' +\n            tarball.integrity.toString().slice(80),\n        },\n        tarball.bundled.length && { name: 'bundled deps:', value: tarball.bundled.length },\n        tarball.bundled.length && {\n          name: 'bundled files:',\n          value: tarball.entryCount - tarball.files.length,\n        },\n        tarball.bundled.length && { name: 'own files:', value: tarball.files.length },\n        { name: 'total files:', value: tarball.entryCount },\n      ].filter(x => x),\n      {\n        include: ['name', 'value'],\n        showHeaders: false,\n      }\n    )\n  )\n  log.notice('', '')\n}\n\nconst getContents = async (manifest, tarball) => {\n  const files = []\n  const bundled = new Set()\n  let totalEntries = 0\n  let totalEntrySize = 0\n\n  // reads contents of tarball\n  const stream = tar.t({\n    onentry (entry) {\n      totalEntries++\n      totalEntrySize += entry.size\n      const p = entry.path\n      if (p.startsWith('package/node_modules/')) {\n        const name = p.match(/^package\\/node_modules\\/((?:@[^/]+\\/)?[^/]+)/)[1]\n        bundled.add(name)\n      }\n      files.push({\n        path: entry.path.replace(/^package\\//, ''),\n        size: entry.size,\n        mode: entry.mode,\n      })\n    },\n  })\n  stream.end(tarball)\n\n  const integrity = await ssri.fromData(tarball, {\n    algorithms: ['sha1', 'sha512'],\n  })\n\n  const comparator = ({ path: a }, { path: b }) => localeCompare(a, b)\n\n  const isUpper = str => {\n    const ch = str.charAt(0)\n    return ch === ch.toUpperCase()\n  }\n\n  const uppers = files.filter(file => isUpper(file.path))\n  const others = files.filter(file => !isUpper(file.path))\n\n  uppers.sort(comparator)\n  others.sort(comparator)\n\n  const shasum = integrity.sha1[0].hexDigest()\n  return {\n    id: manifest._id || `${manifest.name}@${manifest.version}`,\n    name: manifest.name,\n    version: manifest.version,\n    size: tarball.length,\n    unpackedSize: totalEntrySize,\n    shasum,\n    integrity: ssri.parse(integrity.sha512[0]),\n    filename: `${manifest.name}-${manifest.version}.tgz`,\n    files: uppers.concat(others),\n    entryCount: totalEntries,\n    bundled: Array.from(bundled),\n  }\n}\n\nmodule.exports = { logTar, getContents }\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}