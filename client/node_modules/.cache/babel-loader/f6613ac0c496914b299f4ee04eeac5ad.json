{"ast":null,"code":"const util = require('util');\n\nconst Arborist = require('@npmcli/arborist');\n\nconst rimraf = util.promisify(require('rimraf'));\n\nconst reifyFinish = require('../utils/reify-finish.js');\n\nconst runScript = require('@npmcli/run-script');\n\nconst fs = require('fs');\n\nconst readdir = util.promisify(fs.readdir);\n\nconst log = require('../utils/log-shim.js');\n\nconst validateLockfile = require('../utils/validate-lockfile.js');\n\nconst ArboristWorkspaceCmd = require('../arborist-cmd.js');\n\nconst Install = require('./install.js');\n\nclass CI extends ArboristWorkspaceCmd {\n  static description = 'Clean install a project';\n  static name = 'ci';\n  static params = Install.params;\n\n  async exec() {\n    if (this.npm.global) {\n      throw Object.assign(new Error('`npm ci` does not work for global packages'), {\n        code: 'ECIGLOBAL'\n      });\n    }\n\n    const where = this.npm.prefix;\n    const opts = { ...this.npm.flatOptions,\n      packageLock: true,\n      // npm ci should never skip lock files\n      path: where,\n      save: false,\n      // npm ci should never modify the lockfile or package.json\n      workspaces: this.workspaceNames\n    };\n    const arb = new Arborist(opts);\n    await arb.loadVirtual().catch(er => {\n      log.verbose('loadVirtual', er.stack);\n      const msg = 'The `npm ci` command can only install with an existing package-lock.json or\\n' + 'npm-shrinkwrap.json with lockfileVersion >= 1. Run an install with npm@5 or\\n' + 'later to generate a package-lock.json file, then try again.';\n      throw this.usageError(msg);\n    }); // retrieves inventory of packages from loaded virtual tree (lock file)\n\n    const virtualInventory = new Map(arb.virtualTree.inventory); // build ideal tree step needs to come right after retrieving the virtual\n    // inventory since it's going to erase the previous ref to virtualTree\n\n    await arb.buildIdealTree(); // verifies that the packages from the ideal tree will match\n    // the same versions that are present in the virtual tree (lock file)\n    // throws a validation error in case of mismatches\n\n    const errors = validateLockfile(virtualInventory, arb.idealTree.inventory);\n\n    if (errors.length) {\n      throw this.usageError('`npm ci` can only install packages when your package.json and ' + 'package-lock.json or npm-shrinkwrap.json are in sync. Please ' + 'update your lock file with `npm install` ' + 'before continuing.\\n\\n' + errors.join('\\n'));\n    } // Only remove node_modules after we've successfully loaded the virtual\n    // tree and validated the lockfile\n\n\n    await this.npm.time('npm-ci:rm', async () => {\n      const path = `${where}/node_modules`; // get the list of entries so we can skip the glob for performance\n\n      const entries = await readdir(path, null).catch(er => []);\n      return Promise.all(entries.map(f => rimraf(`${path}/${f}`, {\n        glob: false\n      })));\n    });\n    await arb.reify(opts);\n    const ignoreScripts = this.npm.config.get('ignore-scripts'); // run the same set of scripts that `npm install` runs.\n\n    if (!ignoreScripts) {\n      const scripts = ['preinstall', 'install', 'postinstall', 'prepublish', // XXX should we remove this finally??\n      'preprepare', 'prepare', 'postprepare'];\n      const scriptShell = this.npm.config.get('script-shell') || undefined;\n\n      for (const event of scripts) {\n        await runScript({\n          path: where,\n          args: [],\n          scriptShell,\n          stdio: 'inherit',\n          stdioString: true,\n          banner: !this.npm.silent,\n          event\n        });\n      }\n    }\n\n    await reifyFinish(this.npm, arb);\n  }\n\n}\n\nmodule.exports = CI;","map":{"version":3,"names":["util","require","Arborist","rimraf","promisify","reifyFinish","runScript","fs","readdir","log","validateLockfile","ArboristWorkspaceCmd","Install","CI","description","name","params","exec","npm","global","Object","assign","Error","code","where","prefix","opts","flatOptions","packageLock","path","save","workspaces","workspaceNames","arb","loadVirtual","catch","er","verbose","stack","msg","usageError","virtualInventory","Map","virtualTree","inventory","buildIdealTree","errors","idealTree","length","join","time","entries","Promise","all","map","f","glob","reify","ignoreScripts","config","get","scripts","scriptShell","undefined","event","args","stdio","stdioString","banner","silent","module","exports"],"sources":["/Users/chelsea/Documents/0_AllCoding/shoppingstories-v3/node_modules/npm/lib/commands/ci.js"],"sourcesContent":["const util = require('util')\nconst Arborist = require('@npmcli/arborist')\nconst rimraf = util.promisify(require('rimraf'))\nconst reifyFinish = require('../utils/reify-finish.js')\nconst runScript = require('@npmcli/run-script')\nconst fs = require('fs')\nconst readdir = util.promisify(fs.readdir)\nconst log = require('../utils/log-shim.js')\nconst validateLockfile = require('../utils/validate-lockfile.js')\n\nconst ArboristWorkspaceCmd = require('../arborist-cmd.js')\nconst Install = require('./install.js')\n\nclass CI extends ArboristWorkspaceCmd {\n  static description = 'Clean install a project'\n  static name = 'ci'\n\n  static params = Install.params\n\n  async exec () {\n    if (this.npm.global) {\n      throw Object.assign(new Error('`npm ci` does not work for global packages'), {\n        code: 'ECIGLOBAL',\n      })\n    }\n\n    const where = this.npm.prefix\n    const opts = {\n      ...this.npm.flatOptions,\n      packageLock: true, // npm ci should never skip lock files\n      path: where,\n      save: false, // npm ci should never modify the lockfile or package.json\n      workspaces: this.workspaceNames,\n    }\n\n    const arb = new Arborist(opts)\n    await arb.loadVirtual().catch(er => {\n      log.verbose('loadVirtual', er.stack)\n      const msg =\n        'The `npm ci` command can only install with an existing package-lock.json or\\n' +\n        'npm-shrinkwrap.json with lockfileVersion >= 1. Run an install with npm@5 or\\n' +\n        'later to generate a package-lock.json file, then try again.'\n      throw this.usageError(msg)\n    })\n\n    // retrieves inventory of packages from loaded virtual tree (lock file)\n    const virtualInventory = new Map(arb.virtualTree.inventory)\n\n    // build ideal tree step needs to come right after retrieving the virtual\n    // inventory since it's going to erase the previous ref to virtualTree\n    await arb.buildIdealTree()\n\n    // verifies that the packages from the ideal tree will match\n    // the same versions that are present in the virtual tree (lock file)\n    // throws a validation error in case of mismatches\n    const errors = validateLockfile(virtualInventory, arb.idealTree.inventory)\n    if (errors.length) {\n      throw this.usageError(\n        '`npm ci` can only install packages when your package.json and ' +\n        'package-lock.json or npm-shrinkwrap.json are in sync. Please ' +\n        'update your lock file with `npm install` ' +\n        'before continuing.\\n\\n' +\n        errors.join('\\n')\n      )\n    }\n\n    // Only remove node_modules after we've successfully loaded the virtual\n    // tree and validated the lockfile\n    await this.npm.time('npm-ci:rm', async () => {\n      const path = `${where}/node_modules`\n      // get the list of entries so we can skip the glob for performance\n      const entries = await readdir(path, null).catch(er => [])\n      return Promise.all(entries.map(f => rimraf(`${path}/${f}`, { glob: false })))\n    })\n\n    await arb.reify(opts)\n\n    const ignoreScripts = this.npm.config.get('ignore-scripts')\n    // run the same set of scripts that `npm install` runs.\n    if (!ignoreScripts) {\n      const scripts = [\n        'preinstall',\n        'install',\n        'postinstall',\n        'prepublish', // XXX should we remove this finally??\n        'preprepare',\n        'prepare',\n        'postprepare',\n      ]\n      const scriptShell = this.npm.config.get('script-shell') || undefined\n      for (const event of scripts) {\n        await runScript({\n          path: where,\n          args: [],\n          scriptShell,\n          stdio: 'inherit',\n          stdioString: true,\n          banner: !this.npm.silent,\n          event,\n        })\n      }\n    }\n    await reifyFinish(this.npm, arb)\n  }\n}\n\nmodule.exports = CI\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}