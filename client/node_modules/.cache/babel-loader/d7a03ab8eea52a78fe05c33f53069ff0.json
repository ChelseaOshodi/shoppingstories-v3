{"ast":null,"code":"// TODO: set the scope config from package.json or explicit cli config\nconst walkUp = require('walk-up-path');\n\nconst ini = require('ini');\n\nconst nopt = require('nopt');\n\nconst mkdirp = require('mkdirp-infer-owner');\n\nconst mapWorkspaces = require('@npmcli/map-workspaces');\n\nconst rpj = require('read-package-json-fast');\n\nconst log = require('proc-log');\n/* istanbul ignore next */\n\n\nconst myUid = process.getuid && process.getuid();\n/* istanbul ignore next */\n\nconst myGid = process.getgid && process.getgid();\n\nconst {\n  resolve,\n  dirname,\n  join\n} = require('path');\n\nconst {\n  homedir\n} = require('os');\n\nconst {\n  promisify\n} = require('util');\n\nconst fs = require('fs');\n\nconst readFile = promisify(fs.readFile);\nconst writeFile = promisify(fs.writeFile);\nconst chmod = promisify(fs.chmod);\nconst chown = promisify(fs.chown);\nconst unlink = promisify(fs.unlink);\nconst stat = promisify(fs.stat);\n\nconst hasOwnProperty = (obj, key) => Object.prototype.hasOwnProperty.call(obj, key); // define a custom getter, but turn into a normal prop\n// if we set it.  otherwise it can't be set on child objects\n\n\nconst settableGetter = (obj, key, get) => {\n  Object.defineProperty(obj, key, {\n    get,\n\n    set(value) {\n      Object.defineProperty(obj, key, {\n        value,\n        configurable: true,\n        writable: true,\n        enumerable: true\n      });\n    },\n\n    configurable: true,\n    enumerable: true\n  });\n};\n\nconst typeDefs = require('./type-defs.js');\n\nconst nerfDart = require('./nerf-dart.js');\n\nconst envReplace = require('./env-replace.js');\n\nconst parseField = require('./parse-field.js');\n\nconst typeDescription = require('./type-description.js');\n\nconst setEnvs = require('./set-envs.js'); // types that can be saved back to\n\n\nconst confFileTypes = new Set(['global', 'user', 'project']);\nconst confTypes = new Set(['default', 'builtin', ...confFileTypes, 'env', 'cli']);\n\nconst _loaded = Symbol('loaded');\n\nconst _get = Symbol('get');\n\nconst _find = Symbol('find');\n\nconst _loadObject = Symbol('loadObject');\n\nconst _loadFile = Symbol('loadFile');\n\nconst _checkDeprecated = Symbol('checkDeprecated');\n\nconst _flatten = Symbol('flatten');\n\nconst _flatOptions = Symbol('flatOptions');\n\nclass Config {\n  static get typeDefs() {\n    return typeDefs;\n  }\n\n  constructor(_ref) {\n    let {\n      definitions,\n      shorthands,\n      flatten,\n      npmPath,\n      // options just to override in tests, mostly\n      env = process.env,\n      argv = process.argv,\n      platform = process.platform,\n      execPath = process.execPath,\n      cwd = process.cwd()\n    } = _ref;\n    // turn the definitions into nopt's weirdo syntax\n    this.definitions = definitions;\n    const types = {};\n    const defaults = {};\n    this.deprecated = {};\n\n    for (const [key, def] of Object.entries(definitions)) {\n      defaults[key] = def.default;\n      types[key] = def.type;\n\n      if (def.deprecated) {\n        this.deprecated[key] = def.deprecated.trim().replace(/\\n +/, '\\n');\n      }\n    } // populated the first time we flatten the object\n\n\n    this[_flatOptions] = null;\n    this[_flatten] = flatten;\n    this.types = types;\n    this.shorthands = shorthands;\n    this.defaults = defaults;\n    this.npmPath = npmPath;\n    this.argv = argv;\n    this.env = env;\n    this.execPath = execPath;\n    this.platform = platform;\n    this.cwd = cwd; // set when we load configs\n\n    this.globalPrefix = null;\n    this.localPrefix = null; // defaults to env.HOME, but will always be *something*\n\n    this.home = null; // set up the prototype chain of config objects\n\n    const wheres = [...confTypes];\n    this.data = new Map();\n    let parent = null;\n\n    for (const where of wheres) {\n      this.data.set(where, parent = new ConfigData(parent));\n    }\n\n    this.data.set = () => {\n      throw new Error('cannot change internal config data structure');\n    };\n\n    this.data.delete = () => {\n      throw new Error('cannot change internal config data structure');\n    };\n\n    this.sources = new Map([]);\n    this.list = [];\n\n    for (const {\n      data\n    } of this.data.values()) {\n      this.list.unshift(data);\n    }\n\n    Object.freeze(this.list);\n    this[_loaded] = false;\n  }\n\n  get loaded() {\n    return this[_loaded];\n  }\n\n  get prefix() {\n    return this[_get]('global') ? this.globalPrefix : this.localPrefix;\n  } // return the location where key is found.\n\n\n  find(key) {\n    if (!this.loaded) {\n      throw new Error('call config.load() before reading values');\n    }\n\n    return this[_find](key);\n  }\n\n  [_find](key) {\n    // have to look in reverse order\n    const entries = [...this.data.entries()];\n\n    for (let i = entries.length - 1; i > -1; i--) {\n      const [where, {\n        data\n      }] = entries[i];\n\n      if (hasOwnProperty(data, key)) {\n        return where;\n      }\n    }\n\n    return null;\n  }\n\n  get(key, where) {\n    if (!this.loaded) {\n      throw new Error('call config.load() before reading values');\n    }\n\n    return this[_get](key, where);\n  } // we need to get values sometimes, so use this internal one to do so\n  // while in the process of loading.\n\n\n  [_get](key) {\n    let where = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n\n    if (where !== null && !confTypes.has(where)) {\n      throw new Error('invalid config location param: ' + where);\n    }\n\n    const {\n      data\n    } = this.data.get(where || 'cli');\n    return where === null || hasOwnProperty(data, key) ? data[key] : undefined;\n  }\n\n  set(key, val) {\n    let where = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 'cli';\n\n    if (!this.loaded) {\n      throw new Error('call config.load() before setting values');\n    }\n\n    if (!confTypes.has(where)) {\n      throw new Error('invalid config location param: ' + where);\n    }\n\n    this[_checkDeprecated](key);\n\n    const {\n      data\n    } = this.data.get(where);\n    data[key] = val; // this is now dirty, the next call to this.valid will have to check it\n\n    this.data.get(where)[_valid] = null; // the flat options are invalidated, regenerate next time they're needed\n\n    this[_flatOptions] = null;\n  }\n\n  get flat() {\n    if (this[_flatOptions]) {\n      return this[_flatOptions];\n    } // create the object for flat options passed to deps\n\n\n    process.emit('time', 'config:load:flatten');\n    this[_flatOptions] = {}; // walk from least priority to highest\n\n    for (const {\n      data\n    } of this.data.values()) {\n      this[_flatten](data, this[_flatOptions]);\n    }\n\n    process.emit('timeEnd', 'config:load:flatten');\n    return this[_flatOptions];\n  }\n\n  delete(key) {\n    let where = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'cli';\n\n    if (!this.loaded) {\n      throw new Error('call config.load() before deleting values');\n    }\n\n    if (!confTypes.has(where)) {\n      throw new Error('invalid config location param: ' + where);\n    }\n\n    delete this.data.get(where).data[key];\n  }\n\n  async load() {\n    if (this.loaded) {\n      throw new Error('attempting to load npm config multiple times');\n    }\n\n    process.emit('time', 'config:load'); // first load the defaults, which sets the global prefix\n\n    process.emit('time', 'config:load:defaults');\n    this.loadDefaults();\n    process.emit('timeEnd', 'config:load:defaults'); // next load the builtin config, as this sets new effective defaults\n\n    process.emit('time', 'config:load:builtin');\n    await this.loadBuiltinConfig();\n    process.emit('timeEnd', 'config:load:builtin'); // cli and env are not async, and can set the prefix, relevant to project\n\n    process.emit('time', 'config:load:cli');\n    this.loadCLI();\n    process.emit('timeEnd', 'config:load:cli');\n    process.emit('time', 'config:load:env');\n    this.loadEnv();\n    process.emit('timeEnd', 'config:load:env'); // next project config, which can affect userconfig location\n\n    process.emit('time', 'config:load:project');\n    await this.loadProjectConfig();\n    process.emit('timeEnd', 'config:load:project'); // then user config, which can affect globalconfig location\n\n    process.emit('time', 'config:load:user');\n    await this.loadUserConfig();\n    process.emit('timeEnd', 'config:load:user'); // last but not least, global config file\n\n    process.emit('time', 'config:load:global');\n    await this.loadGlobalConfig();\n    process.emit('timeEnd', 'config:load:global'); // warn if anything is not valid\n\n    process.emit('time', 'config:load:validate');\n    this.validate();\n    process.emit('timeEnd', 'config:load:validate'); // set this before calling setEnvs, so that we don't have to share\n    // symbols, as that module also does a bunch of get operations\n\n    this[_loaded] = true;\n    process.emit('time', 'config:load:credentials');\n    const reg = this.get('registry');\n    const creds = this.getCredentialsByURI(reg); // ignore this error because a failed set will strip out anything that\n    // might be a security hazard, which was the intention.\n\n    try {\n      this.setCredentialsByURI(reg, creds); // eslint-disable-next-line no-empty\n    } catch (_) {}\n\n    process.emit('timeEnd', 'config:load:credentials'); // set proper globalPrefix now that everything is loaded\n\n    this.globalPrefix = this.get('prefix');\n    process.emit('time', 'config:load:setEnvs');\n    this.setEnvs();\n    process.emit('timeEnd', 'config:load:setEnvs');\n    process.emit('timeEnd', 'config:load');\n  }\n\n  loadDefaults() {\n    this.loadGlobalPrefix();\n    this.loadHome();\n\n    this[_loadObject]({ ...this.defaults,\n      prefix: this.globalPrefix\n    }, 'default', 'default values');\n\n    const {\n      data\n    } = this.data.get('default'); // the metrics-registry defaults to the current resolved value of\n    // the registry, unless overridden somewhere else.\n\n    settableGetter(data, 'metrics-registry', () => this[_get]('registry')); // if the prefix is set on cli, env, or userconfig, then we need to\n    // default the globalconfig file to that location, instead of the default\n    // global prefix.  It's weird that `npm get globalconfig --prefix=/foo`\n    // returns `/foo/etc/npmrc`, but better to not change it at this point.\n\n    settableGetter(data, 'globalconfig', () => resolve(this[_get]('prefix'), 'etc/npmrc'));\n  }\n\n  loadHome() {\n    if (this.env.HOME) {\n      return this.home = this.env.HOME;\n    }\n\n    this.home = homedir();\n  }\n\n  loadGlobalPrefix() {\n    if (this.globalPrefix) {\n      throw new Error('cannot load default global prefix more than once');\n    }\n\n    if (this.env.PREFIX) {\n      this.globalPrefix = this.env.PREFIX;\n    } else if (this.platform === 'win32') {\n      // c:\\node\\node.exe --> prefix=c:\\node\\\n      this.globalPrefix = dirname(this.execPath);\n    } else {\n      // /usr/local/bin/node --> prefix=/usr/local\n      this.globalPrefix = dirname(dirname(this.execPath)); // destdir only is respected on Unix\n\n      if (this.env.DESTDIR) {\n        this.globalPrefix = join(this.env.DESTDIR, this.globalPrefix);\n      }\n    }\n  }\n\n  loadEnv() {\n    const conf = Object.create(null);\n\n    for (const [envKey, envVal] of Object.entries(this.env)) {\n      if (!/^npm_config_/i.test(envKey) || envVal === '') {\n        continue;\n      }\n\n      let key = envKey.slice('npm_config_'.length);\n\n      if (!key.startsWith('//')) {\n        // don't normalize nerf-darted keys\n        key = key.replace(/(?!^)_/g, '-') // don't replace _ at the start of the key\n        .toLowerCase();\n      }\n\n      conf[key] = envVal;\n    }\n\n    this[_loadObject](conf, 'env', 'environment');\n  }\n\n  loadCLI() {\n    nopt.invalidHandler = (k, val, type) => this.invalidHandler(k, val, type, 'command line options', 'cli');\n\n    const conf = nopt(this.types, this.shorthands, this.argv);\n    nopt.invalidHandler = null;\n    this.parsedArgv = conf.argv;\n    delete conf.argv;\n\n    this[_loadObject](conf, 'cli', 'command line options');\n  }\n\n  get valid() {\n    for (const [where, {\n      valid\n    }] of this.data.entries()) {\n      if (valid === false || valid === null && !this.validate(where)) {\n        return false;\n      }\n    }\n\n    return true;\n  }\n\n  validate(where) {\n    if (!where) {\n      let valid = true;\n\n      for (const [entryWhere] of this.data.entries()) {\n        // no need to validate our defaults, we know they're fine\n        // cli was already validated when parsed the first time\n        if (entryWhere === 'default' || entryWhere === 'builtin' || entryWhere === 'cli') {\n          continue;\n        }\n\n        const ret = this.validate(entryWhere);\n        valid = valid && ret;\n      }\n\n      return valid;\n    } else {\n      const obj = this.data.get(where);\n      obj[_valid] = true;\n\n      nopt.invalidHandler = (k, val, type) => this.invalidHandler(k, val, type, obj.source, where);\n\n      nopt.clean(obj.data, this.types, this.typeDefs);\n      nopt.invalidHandler = null;\n      return obj[_valid];\n    }\n  } // Returns true if the value is coming directly from the source defined\n  // in default definitions, if the current value for the key config is\n  // coming from any other different source, returns false\n\n\n  isDefault(key) {\n    const [defaultType, ...types] = [...confTypes];\n    const defaultData = this.data.get(defaultType).data;\n    return hasOwnProperty(defaultData, key) && types.every(type => {\n      const typeData = this.data.get(type).data;\n      return !hasOwnProperty(typeData, key);\n    });\n  }\n\n  invalidHandler(k, val, type, source, where) {\n    log.warn('invalid config', k + '=' + JSON.stringify(val), `set in ${source}`);\n    this.data.get(where)[_valid] = false;\n\n    if (Array.isArray(type)) {\n      if (type.includes(typeDefs.url.type)) {\n        type = typeDefs.url.type;\n      } else {\n        /* istanbul ignore if - no actual configs matching this, but\n         * path types SHOULD be handled this way, like URLs, for the\n         * same reason */\n        if (type.includes(typeDefs.path.type)) {\n          type = typeDefs.path.type;\n        }\n      }\n    }\n\n    const typeDesc = typeDescription(type);\n    const oneOrMore = typeDesc.indexOf(Array) !== -1;\n    const mustBe = typeDesc.filter(m => m !== undefined && m !== Array);\n    const oneOf = mustBe.length === 1 && oneOrMore ? ' one or more' : mustBe.length > 1 && oneOrMore ? ' one or more of:' : mustBe.length > 1 ? ' one of:' : '';\n    const msg = 'Must be' + oneOf;\n    const desc = mustBe.length === 1 ? mustBe[0] : mustBe.filter(m => m !== Array).map(n => typeof n === 'string' ? n : JSON.stringify(n)).join(', ');\n    log.warn('invalid config', msg, desc);\n  }\n\n  [_loadObject](obj, where, source) {\n    let er = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : null;\n    const conf = this.data.get(where);\n\n    if (conf.source) {\n      const m = `double-loading \"${where}\" configs from ${source}, ` + `previously loaded from ${conf.source}`;\n      throw new Error(m);\n    }\n\n    if (this.sources.has(source)) {\n      const m = `double-loading config \"${source}\" as \"${where}\", ` + `previously loaded as \"${this.sources.get(source)}\"`;\n      throw new Error(m);\n    }\n\n    conf.source = source;\n    this.sources.set(source, where);\n\n    if (er) {\n      conf.loadError = er;\n\n      if (er.code !== 'ENOENT') {\n        log.verbose('config', `error loading ${where} config`, er);\n      }\n    } else {\n      conf.raw = obj;\n\n      for (const [key, value] of Object.entries(obj)) {\n        const k = envReplace(key, this.env);\n        const v = this.parseField(value, k);\n\n        if (where !== 'default') {\n          this[_checkDeprecated](k, where, obj, [key, value]);\n        }\n\n        conf.data[k] = v;\n      }\n    }\n  }\n\n  [_checkDeprecated](key, where, obj, kv) {\n    // XXX(npm9+) make this throw an error\n    if (this.deprecated[key]) {\n      log.warn('config', key, this.deprecated[key]);\n    }\n  } // Parse a field, coercing it to the best type available.\n\n\n  parseField(f, key) {\n    let listElement = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n    return parseField(f, key, this, listElement);\n  }\n\n  async [_loadFile](file, type) {\n    process.emit('time', 'config:load:file:' + file); // only catch the error from readFile, not from the loadObject call\n\n    await readFile(file, 'utf8').then(data => this[_loadObject](ini.parse(data), type, file), er => this[_loadObject](null, type, file, er));\n    process.emit('timeEnd', 'config:load:file:' + file);\n  }\n\n  loadBuiltinConfig() {\n    return this[_loadFile](resolve(this.npmPath, 'npmrc'), 'builtin');\n  }\n\n  async loadProjectConfig() {\n    // the localPrefix can be set by the CLI config, but otherwise is\n    // found by walking up the folder tree. either way, we load it before\n    // we return to make sure localPrefix is set\n    await this.loadLocalPrefix();\n\n    if (this[_get]('global') === true || this[_get]('location') === 'global') {\n      this.data.get('project').source = '(global mode enabled, ignored)';\n      this.sources.set(this.data.get('project').source, 'project');\n      return;\n    }\n\n    const projectFile = resolve(this.localPrefix, '.npmrc'); // if we're in the ~ directory, and there happens to be a node_modules\n    // folder (which is not TOO uncommon, it turns out), then we can end\n    // up loading the \"project\" config where the \"userconfig\" will be,\n    // which causes some calamaties.  So, we only load project config if\n    // it doesn't match what the userconfig will be.\n\n    if (projectFile !== this[_get]('userconfig')) {\n      return this[_loadFile](projectFile, 'project');\n    } else {\n      this.data.get('project').source = '(same as \"user\" config, ignored)';\n      this.sources.set(this.data.get('project').source, 'project');\n    }\n  }\n\n  async loadLocalPrefix() {\n    const cliPrefix = this[_get]('prefix', 'cli');\n\n    if (cliPrefix) {\n      this.localPrefix = cliPrefix;\n      return;\n    }\n\n    const cliWorkspaces = this[_get]('workspaces', 'cli');\n\n    const isGlobal = this[_get]('global') || this[_get]('location') === 'global';\n\n    for (const p of walkUp(this.cwd)) {\n      const hasNodeModules = await stat(resolve(p, 'node_modules')).then(st => st.isDirectory()).catch(() => false);\n      const hasPackageJson = await stat(resolve(p, 'package.json')).then(st => st.isFile()).catch(() => false);\n\n      if (!this.localPrefix && (hasNodeModules || hasPackageJson)) {\n        this.localPrefix = p; // if workspaces are disabled, or we're in global mode, return now\n\n        if (cliWorkspaces === false || isGlobal) {\n          return;\n        } // otherwise, continue the loop\n\n\n        continue;\n      }\n\n      if (this.localPrefix && hasPackageJson) {\n        // if we already set localPrefix but this dir has a package.json\n        // then we need to see if `p` is a workspace root by reading its package.json\n        // however, if reading it fails then we should just move on\n        const pkg = await rpj(resolve(p, 'package.json')).catch(() => false);\n\n        if (!pkg) {\n          continue;\n        }\n\n        const workspaces = await mapWorkspaces({\n          cwd: p,\n          pkg\n        });\n\n        for (const w of workspaces.values()) {\n          if (w === this.localPrefix) {\n            // see if there's a .npmrc file in the workspace, if so log a warning\n            const hasNpmrc = await stat(resolve(this.localPrefix, '.npmrc')).then(st => st.isFile()).catch(() => false);\n\n            if (hasNpmrc) {\n              log.warn(`ignoring workspace config at ${this.localPrefix}/.npmrc`);\n            } // set the workspace in the default layer, which allows it to be overridden easily\n\n\n            const {\n              data\n            } = this.data.get('default');\n            data.workspace = [this.localPrefix];\n            this.localPrefix = p;\n            log.info(`found workspace root at ${this.localPrefix}`); // we found a root, so we return now\n\n            return;\n          }\n        }\n      }\n    }\n\n    if (!this.localPrefix) {\n      this.localPrefix = this.cwd;\n    }\n  }\n\n  loadUserConfig() {\n    return this[_loadFile](this[_get]('userconfig'), 'user');\n  }\n\n  loadGlobalConfig() {\n    return this[_loadFile](this[_get]('globalconfig'), 'global');\n  }\n\n  async save(where) {\n    if (!this.loaded) {\n      throw new Error('call config.load() before saving');\n    }\n\n    if (!confFileTypes.has(where)) {\n      throw new Error('invalid config location param: ' + where);\n    }\n\n    const conf = this.data.get(where);\n    conf[_raw] = { ...conf.data\n    };\n    conf[_loadError] = null; // upgrade auth configs to more secure variants before saving\n\n    if (where === 'user') {\n      const reg = this.get('registry');\n      const creds = this.getCredentialsByURI(reg); // we ignore this error because the failed set already removed\n      // anything that might be a security hazard, and it won't be\n      // saved back to the .npmrc file, so we're good.\n\n      try {\n        this.setCredentialsByURI(reg, creds); // eslint-disable-next-line no-empty\n      } catch (_) {}\n    }\n\n    const iniData = ini.stringify(conf.data).trim() + '\\n';\n\n    if (!iniData.trim()) {\n      // ignore the unlink error (eg, if file doesn't exist)\n      await unlink(conf.source).catch(er => {});\n      return;\n    }\n\n    const dir = dirname(conf.source);\n    await mkdirp(dir);\n    await writeFile(conf.source, iniData, 'utf8'); // don't leave a root-owned config file lying around\n\n    /* istanbul ignore if - this is best-effort and a pita to test */\n\n    if (myUid === 0) {\n      const st = await stat(dir).catch(() => null);\n\n      if (st && (st.uid !== myUid || st.gid !== myGid)) {\n        await chown(conf.source, st.uid, st.gid).catch(() => {});\n      }\n    }\n\n    const mode = where === 'user' ? 0o600 : 0o666;\n    await chmod(conf.source, mode);\n  }\n\n  clearCredentialsByURI(uri) {\n    const nerfed = nerfDart(uri);\n    const def = nerfDart(this.get('registry'));\n\n    if (def === nerfed) {\n      // do not delete email, that shouldn't be nerfed any more.\n      // just delete the nerfed copy, if one exists.\n      this.delete(`-authtoken`, 'user');\n      this.delete(`_authToken`, 'user');\n      this.delete(`_authtoken`, 'user');\n      this.delete(`_auth`, 'user');\n      this.delete(`_password`, 'user');\n      this.delete(`username`, 'user');\n    }\n\n    this.delete(`${nerfed}:_authToken`, 'user');\n    this.delete(`${nerfed}:_auth`, 'user');\n    this.delete(`${nerfed}:_password`, 'user');\n    this.delete(`${nerfed}:username`, 'user');\n    this.delete(`${nerfed}:email`, 'user');\n    this.delete(`${nerfed}:certfile`, 'user');\n    this.delete(`${nerfed}:keyfile`, 'user');\n  }\n\n  setCredentialsByURI(uri, _ref2) {\n    let {\n      token,\n      username,\n      password,\n      email,\n      certfile,\n      keyfile\n    } = _ref2;\n    const nerfed = nerfDart(uri);\n    const def = nerfDart(this.get('registry'));\n\n    if (def === nerfed) {\n      // remove old style auth info not limited to a single registry\n      this.delete('_password', 'user');\n      this.delete('username', 'user');\n      this.delete('_auth', 'user');\n      this.delete('_authtoken', 'user');\n      this.delete('-authtoken', 'user');\n      this.delete('_authToken', 'user');\n    } // email used to be nerfed always.  if we're using the default\n    // registry, de-nerf it.\n\n\n    if (nerfed === def) {\n      email = email || this.get('email', 'user') || this.get(`${nerfed}:email`, 'user');\n\n      if (email) {\n        this.set('email', email, 'user');\n      }\n    } // field that hasn't been used as documented for a LONG time,\n    // and as of npm 7.10.0, isn't used at all.  We just always\n    // send auth if we have it, only to the URIs under the nerf dart.\n\n\n    this.delete(`${nerfed}:always-auth`, 'user');\n    this.delete(`${nerfed}:email`, 'user');\n\n    if (certfile && keyfile) {\n      this.set(`${nerfed}:certfile`, certfile, 'user');\n      this.set(`${nerfed}:keyfile`, keyfile, 'user'); // cert/key may be used in conjunction with other credentials, thus no `else`\n    }\n\n    if (token) {\n      this.set(`${nerfed}:_authToken`, token, 'user');\n      this.delete(`${nerfed}:_password`, 'user');\n      this.delete(`${nerfed}:username`, 'user');\n    } else if (username || password) {\n      if (!username) {\n        throw new Error('must include username');\n      }\n\n      if (!password) {\n        throw new Error('must include password');\n      }\n\n      this.delete(`${nerfed}:_authToken`, 'user');\n      this.set(`${nerfed}:username`, username, 'user'); // note: not encrypted, no idea why we bothered to do this, but oh well\n      // protects against shoulder-hacks if password is memorable, I guess?\n\n      const encoded = Buffer.from(password, 'utf8').toString('base64');\n      this.set(`${nerfed}:_password`, encoded, 'user');\n    } else if (!certfile || !keyfile) {\n      throw new Error('No credentials to set.');\n    }\n  } // this has to be a bit more complicated to support legacy data of all forms\n\n\n  getCredentialsByURI(uri) {\n    const nerfed = nerfDart(uri);\n    const creds = {};\n    const email = this.get(`${nerfed}:email`) || this.get('email');\n\n    if (email) {\n      creds.email = email;\n    }\n\n    const certfileReg = this.get(`${nerfed}:certfile`);\n    const keyfileReg = this.get(`${nerfed}:keyfile`);\n\n    if (certfileReg && keyfileReg) {\n      creds.certfile = certfileReg;\n      creds.keyfile = keyfileReg; // cert/key may be used in conjunction with other credentials, thus no `return`\n    }\n\n    const tokenReg = this.get(`${nerfed}:_authToken`) || nerfed === nerfDart(this.get('registry')) && this.get('_authToken');\n\n    if (tokenReg) {\n      creds.token = tokenReg;\n      return creds;\n    }\n\n    const userReg = this.get(`${nerfed}:username`);\n    const passReg = this.get(`${nerfed}:_password`);\n\n    if (userReg && passReg) {\n      creds.username = userReg;\n      creds.password = Buffer.from(passReg, 'base64').toString('utf8');\n      const auth = `${creds.username}:${creds.password}`;\n      creds.auth = Buffer.from(auth, 'utf8').toString('base64');\n      return creds;\n    }\n\n    const authReg = this.get(`${nerfed}:_auth`);\n\n    if (authReg) {\n      const authDecode = Buffer.from(authReg, 'base64').toString('utf8');\n      const authSplit = authDecode.split(':');\n      creds.username = authSplit.shift();\n      creds.password = authSplit.join(':');\n      creds.auth = authReg;\n      return creds;\n    } // at this point, we can only use the values if the URI is the\n    // default registry.\n\n\n    const defaultNerf = nerfDart(this.get('registry'));\n\n    if (nerfed !== defaultNerf) {\n      return creds;\n    }\n\n    const userDef = this.get('username');\n    const passDef = this.get('_password');\n\n    if (userDef && passDef) {\n      creds.username = userDef;\n      creds.password = Buffer.from(passDef, 'base64').toString('utf8');\n      const auth = `${creds.username}:${creds.password}`;\n      creds.auth = Buffer.from(auth, 'utf8').toString('base64');\n      return creds;\n    } // Handle the old-style _auth=<base64> style for the default\n    // registry, if set.\n\n\n    const auth = this.get('_auth');\n\n    if (!auth) {\n      return creds;\n    }\n\n    const authDecode = Buffer.from(auth, 'base64').toString('utf8');\n    const authSplit = authDecode.split(':');\n    creds.username = authSplit.shift();\n    creds.password = authSplit.join(':');\n    creds.auth = auth;\n    return creds;\n  } // set up the environment object we have with npm_config_* environs\n  // for all configs that are different from their default values, and\n  // set EDITOR and HOME.\n\n\n  setEnvs() {\n    setEnvs(this);\n  }\n\n}\n\nconst _data = Symbol('data');\n\nconst _raw = Symbol('raw');\n\nconst _loadError = Symbol('loadError');\n\nconst _source = Symbol('source');\n\nconst _valid = Symbol('valid');\n\nclass ConfigData {\n  constructor(parent) {\n    this[_data] = Object.create(parent && parent.data);\n    this[_source] = null;\n    this[_loadError] = null;\n    this[_raw] = null;\n    this[_valid] = true;\n  }\n\n  get data() {\n    return this[_data];\n  }\n\n  get valid() {\n    return this[_valid];\n  }\n\n  set source(s) {\n    if (this[_source]) {\n      throw new Error('cannot set ConfigData source more than once');\n    }\n\n    this[_source] = s;\n  }\n\n  get source() {\n    return this[_source];\n  }\n\n  set loadError(e) {\n    if (this[_loadError] || this[_raw]) {\n      throw new Error('cannot set ConfigData loadError after load');\n    }\n\n    this[_loadError] = e;\n  }\n\n  get loadError() {\n    return this[_loadError];\n  }\n\n  set raw(r) {\n    if (this[_raw] || this[_loadError]) {\n      throw new Error('cannot set ConfigData raw after load');\n    }\n\n    this[_raw] = r;\n  }\n\n  get raw() {\n    return this[_raw];\n  }\n\n}\n\nmodule.exports = Config;","map":{"version":3,"names":["walkUp","require","ini","nopt","mkdirp","mapWorkspaces","rpj","log","myUid","process","getuid","myGid","getgid","resolve","dirname","join","homedir","promisify","fs","readFile","writeFile","chmod","chown","unlink","stat","hasOwnProperty","obj","key","Object","prototype","call","settableGetter","get","defineProperty","set","value","configurable","writable","enumerable","typeDefs","nerfDart","envReplace","parseField","typeDescription","setEnvs","confFileTypes","Set","confTypes","_loaded","Symbol","_get","_find","_loadObject","_loadFile","_checkDeprecated","_flatten","_flatOptions","Config","constructor","definitions","shorthands","flatten","npmPath","env","argv","platform","execPath","cwd","types","defaults","deprecated","def","entries","default","type","trim","replace","globalPrefix","localPrefix","home","wheres","data","Map","parent","where","ConfigData","Error","delete","sources","list","values","unshift","freeze","loaded","prefix","find","i","length","has","undefined","val","_valid","flat","emit","load","loadDefaults","loadBuiltinConfig","loadCLI","loadEnv","loadProjectConfig","loadUserConfig","loadGlobalConfig","validate","reg","creds","getCredentialsByURI","setCredentialsByURI","_","loadGlobalPrefix","loadHome","HOME","PREFIX","DESTDIR","conf","create","envKey","envVal","test","slice","startsWith","toLowerCase","invalidHandler","k","parsedArgv","valid","entryWhere","ret","source","clean","isDefault","defaultType","defaultData","every","typeData","warn","JSON","stringify","Array","isArray","includes","url","path","typeDesc","oneOrMore","indexOf","mustBe","filter","m","oneOf","msg","desc","map","n","er","loadError","code","verbose","raw","v","kv","f","listElement","file","then","parse","loadLocalPrefix","projectFile","cliPrefix","cliWorkspaces","isGlobal","p","hasNodeModules","st","isDirectory","catch","hasPackageJson","isFile","pkg","workspaces","w","hasNpmrc","workspace","info","save","_raw","_loadError","iniData","dir","uid","gid","mode","clearCredentialsByURI","uri","nerfed","token","username","password","email","certfile","keyfile","encoded","Buffer","from","toString","certfileReg","keyfileReg","tokenReg","userReg","passReg","auth","authReg","authDecode","authSplit","split","shift","defaultNerf","userDef","passDef","_data","_source","s","e","r","module","exports"],"sources":["/Users/chelsea/Documents/0_AllCoding/shoppingstories-v3/node_modules/npm/node_modules/@npmcli/config/lib/index.js"],"sourcesContent":["// TODO: set the scope config from package.json or explicit cli config\nconst walkUp = require('walk-up-path')\nconst ini = require('ini')\nconst nopt = require('nopt')\nconst mkdirp = require('mkdirp-infer-owner')\nconst mapWorkspaces = require('@npmcli/map-workspaces')\nconst rpj = require('read-package-json-fast')\nconst log = require('proc-log')\n\n/* istanbul ignore next */\nconst myUid = process.getuid && process.getuid()\n/* istanbul ignore next */\nconst myGid = process.getgid && process.getgid()\n\nconst { resolve, dirname, join } = require('path')\nconst { homedir } = require('os')\nconst { promisify } = require('util')\nconst fs = require('fs')\nconst readFile = promisify(fs.readFile)\nconst writeFile = promisify(fs.writeFile)\nconst chmod = promisify(fs.chmod)\nconst chown = promisify(fs.chown)\nconst unlink = promisify(fs.unlink)\nconst stat = promisify(fs.stat)\n\nconst hasOwnProperty = (obj, key) =>\n  Object.prototype.hasOwnProperty.call(obj, key)\n\n// define a custom getter, but turn into a normal prop\n// if we set it.  otherwise it can't be set on child objects\nconst settableGetter = (obj, key, get) => {\n  Object.defineProperty(obj, key, {\n    get,\n    set (value) {\n      Object.defineProperty(obj, key, {\n        value,\n        configurable: true,\n        writable: true,\n        enumerable: true,\n      })\n    },\n    configurable: true,\n    enumerable: true,\n  })\n}\n\nconst typeDefs = require('./type-defs.js')\nconst nerfDart = require('./nerf-dart.js')\nconst envReplace = require('./env-replace.js')\nconst parseField = require('./parse-field.js')\nconst typeDescription = require('./type-description.js')\nconst setEnvs = require('./set-envs.js')\n\n// types that can be saved back to\nconst confFileTypes = new Set([\n  'global',\n  'user',\n  'project',\n])\n\nconst confTypes = new Set([\n  'default',\n  'builtin',\n  ...confFileTypes,\n  'env',\n  'cli',\n])\n\nconst _loaded = Symbol('loaded')\nconst _get = Symbol('get')\nconst _find = Symbol('find')\nconst _loadObject = Symbol('loadObject')\nconst _loadFile = Symbol('loadFile')\nconst _checkDeprecated = Symbol('checkDeprecated')\nconst _flatten = Symbol('flatten')\nconst _flatOptions = Symbol('flatOptions')\n\nclass Config {\n  static get typeDefs () {\n    return typeDefs\n  }\n\n  constructor ({\n    definitions,\n    shorthands,\n    flatten,\n    npmPath,\n\n    // options just to override in tests, mostly\n    env = process.env,\n    argv = process.argv,\n    platform = process.platform,\n    execPath = process.execPath,\n    cwd = process.cwd(),\n  }) {\n    // turn the definitions into nopt's weirdo syntax\n    this.definitions = definitions\n    const types = {}\n    const defaults = {}\n    this.deprecated = {}\n    for (const [key, def] of Object.entries(definitions)) {\n      defaults[key] = def.default\n      types[key] = def.type\n      if (def.deprecated) {\n        this.deprecated[key] = def.deprecated.trim().replace(/\\n +/, '\\n')\n      }\n    }\n\n    // populated the first time we flatten the object\n    this[_flatOptions] = null\n    this[_flatten] = flatten\n    this.types = types\n    this.shorthands = shorthands\n    this.defaults = defaults\n\n    this.npmPath = npmPath\n    this.argv = argv\n    this.env = env\n    this.execPath = execPath\n    this.platform = platform\n    this.cwd = cwd\n\n    // set when we load configs\n    this.globalPrefix = null\n    this.localPrefix = null\n\n    // defaults to env.HOME, but will always be *something*\n    this.home = null\n\n    // set up the prototype chain of config objects\n    const wheres = [...confTypes]\n    this.data = new Map()\n    let parent = null\n    for (const where of wheres) {\n      this.data.set(where, parent = new ConfigData(parent))\n    }\n\n    this.data.set = () => {\n      throw new Error('cannot change internal config data structure')\n    }\n    this.data.delete = () => {\n      throw new Error('cannot change internal config data structure')\n    }\n\n    this.sources = new Map([])\n\n    this.list = []\n    for (const { data } of this.data.values()) {\n      this.list.unshift(data)\n    }\n    Object.freeze(this.list)\n\n    this[_loaded] = false\n  }\n\n  get loaded () {\n    return this[_loaded]\n  }\n\n  get prefix () {\n    return this[_get]('global') ? this.globalPrefix : this.localPrefix\n  }\n\n  // return the location where key is found.\n  find (key) {\n    if (!this.loaded) {\n      throw new Error('call config.load() before reading values')\n    }\n    return this[_find](key)\n  }\n\n  [_find] (key) {\n    // have to look in reverse order\n    const entries = [...this.data.entries()]\n    for (let i = entries.length - 1; i > -1; i--) {\n      const [where, { data }] = entries[i]\n      if (hasOwnProperty(data, key)) {\n        return where\n      }\n    }\n    return null\n  }\n\n  get (key, where) {\n    if (!this.loaded) {\n      throw new Error('call config.load() before reading values')\n    }\n    return this[_get](key, where)\n  }\n\n  // we need to get values sometimes, so use this internal one to do so\n  // while in the process of loading.\n  [_get] (key, where = null) {\n    if (where !== null && !confTypes.has(where)) {\n      throw new Error('invalid config location param: ' + where)\n    }\n    const { data } = this.data.get(where || 'cli')\n    return where === null || hasOwnProperty(data, key) ? data[key] : undefined\n  }\n\n  set (key, val, where = 'cli') {\n    if (!this.loaded) {\n      throw new Error('call config.load() before setting values')\n    }\n    if (!confTypes.has(where)) {\n      throw new Error('invalid config location param: ' + where)\n    }\n    this[_checkDeprecated](key)\n    const { data } = this.data.get(where)\n    data[key] = val\n\n    // this is now dirty, the next call to this.valid will have to check it\n    this.data.get(where)[_valid] = null\n\n    // the flat options are invalidated, regenerate next time they're needed\n    this[_flatOptions] = null\n  }\n\n  get flat () {\n    if (this[_flatOptions]) {\n      return this[_flatOptions]\n    }\n\n    // create the object for flat options passed to deps\n    process.emit('time', 'config:load:flatten')\n    this[_flatOptions] = {}\n    // walk from least priority to highest\n    for (const { data } of this.data.values()) {\n      this[_flatten](data, this[_flatOptions])\n    }\n    process.emit('timeEnd', 'config:load:flatten')\n\n    return this[_flatOptions]\n  }\n\n  delete (key, where = 'cli') {\n    if (!this.loaded) {\n      throw new Error('call config.load() before deleting values')\n    }\n    if (!confTypes.has(where)) {\n      throw new Error('invalid config location param: ' + where)\n    }\n    delete this.data.get(where).data[key]\n  }\n\n  async load () {\n    if (this.loaded) {\n      throw new Error('attempting to load npm config multiple times')\n    }\n\n    process.emit('time', 'config:load')\n    // first load the defaults, which sets the global prefix\n    process.emit('time', 'config:load:defaults')\n    this.loadDefaults()\n    process.emit('timeEnd', 'config:load:defaults')\n\n    // next load the builtin config, as this sets new effective defaults\n    process.emit('time', 'config:load:builtin')\n    await this.loadBuiltinConfig()\n    process.emit('timeEnd', 'config:load:builtin')\n\n    // cli and env are not async, and can set the prefix, relevant to project\n    process.emit('time', 'config:load:cli')\n    this.loadCLI()\n    process.emit('timeEnd', 'config:load:cli')\n    process.emit('time', 'config:load:env')\n    this.loadEnv()\n    process.emit('timeEnd', 'config:load:env')\n\n    // next project config, which can affect userconfig location\n    process.emit('time', 'config:load:project')\n    await this.loadProjectConfig()\n    process.emit('timeEnd', 'config:load:project')\n    // then user config, which can affect globalconfig location\n    process.emit('time', 'config:load:user')\n    await this.loadUserConfig()\n    process.emit('timeEnd', 'config:load:user')\n    // last but not least, global config file\n    process.emit('time', 'config:load:global')\n    await this.loadGlobalConfig()\n    process.emit('timeEnd', 'config:load:global')\n\n    // warn if anything is not valid\n    process.emit('time', 'config:load:validate')\n    this.validate()\n    process.emit('timeEnd', 'config:load:validate')\n\n    // set this before calling setEnvs, so that we don't have to share\n    // symbols, as that module also does a bunch of get operations\n    this[_loaded] = true\n\n    process.emit('time', 'config:load:credentials')\n    const reg = this.get('registry')\n    const creds = this.getCredentialsByURI(reg)\n    // ignore this error because a failed set will strip out anything that\n    // might be a security hazard, which was the intention.\n    try {\n      this.setCredentialsByURI(reg, creds)\n    // eslint-disable-next-line no-empty\n    } catch (_) {}\n    process.emit('timeEnd', 'config:load:credentials')\n\n    // set proper globalPrefix now that everything is loaded\n    this.globalPrefix = this.get('prefix')\n\n    process.emit('time', 'config:load:setEnvs')\n    this.setEnvs()\n    process.emit('timeEnd', 'config:load:setEnvs')\n\n    process.emit('timeEnd', 'config:load')\n  }\n\n  loadDefaults () {\n    this.loadGlobalPrefix()\n    this.loadHome()\n\n    this[_loadObject]({\n      ...this.defaults,\n      prefix: this.globalPrefix,\n    }, 'default', 'default values')\n\n    const { data } = this.data.get('default')\n\n    // the metrics-registry defaults to the current resolved value of\n    // the registry, unless overridden somewhere else.\n    settableGetter(data, 'metrics-registry', () => this[_get]('registry'))\n\n    // if the prefix is set on cli, env, or userconfig, then we need to\n    // default the globalconfig file to that location, instead of the default\n    // global prefix.  It's weird that `npm get globalconfig --prefix=/foo`\n    // returns `/foo/etc/npmrc`, but better to not change it at this point.\n    settableGetter(data, 'globalconfig', () =>\n      resolve(this[_get]('prefix'), 'etc/npmrc'))\n  }\n\n  loadHome () {\n    if (this.env.HOME) {\n      return this.home = this.env.HOME\n    }\n    this.home = homedir()\n  }\n\n  loadGlobalPrefix () {\n    if (this.globalPrefix) {\n      throw new Error('cannot load default global prefix more than once')\n    }\n\n    if (this.env.PREFIX) {\n      this.globalPrefix = this.env.PREFIX\n    } else if (this.platform === 'win32') {\n    // c:\\node\\node.exe --> prefix=c:\\node\\\n      this.globalPrefix = dirname(this.execPath)\n    } else {\n      // /usr/local/bin/node --> prefix=/usr/local\n      this.globalPrefix = dirname(dirname(this.execPath))\n\n      // destdir only is respected on Unix\n      if (this.env.DESTDIR) {\n        this.globalPrefix = join(this.env.DESTDIR, this.globalPrefix)\n      }\n    }\n  }\n\n  loadEnv () {\n    const conf = Object.create(null)\n    for (const [envKey, envVal] of Object.entries(this.env)) {\n      if (!/^npm_config_/i.test(envKey) || envVal === '') {\n        continue\n      }\n      let key = envKey.slice('npm_config_'.length)\n      if (!key.startsWith('//')) { // don't normalize nerf-darted keys\n        key = key.replace(/(?!^)_/g, '-') // don't replace _ at the start of the key\n          .toLowerCase()\n      }\n      conf[key] = envVal\n    }\n    this[_loadObject](conf, 'env', 'environment')\n  }\n\n  loadCLI () {\n    nopt.invalidHandler = (k, val, type) =>\n      this.invalidHandler(k, val, type, 'command line options', 'cli')\n    const conf = nopt(this.types, this.shorthands, this.argv)\n    nopt.invalidHandler = null\n    this.parsedArgv = conf.argv\n    delete conf.argv\n    this[_loadObject](conf, 'cli', 'command line options')\n  }\n\n  get valid () {\n    for (const [where, { valid }] of this.data.entries()) {\n      if (valid === false || valid === null && !this.validate(where)) {\n        return false\n      }\n    }\n    return true\n  }\n\n  validate (where) {\n    if (!where) {\n      let valid = true\n      for (const [entryWhere] of this.data.entries()) {\n        // no need to validate our defaults, we know they're fine\n        // cli was already validated when parsed the first time\n        if (entryWhere === 'default' || entryWhere === 'builtin' || entryWhere === 'cli') {\n          continue\n        }\n        const ret = this.validate(entryWhere)\n        valid = valid && ret\n      }\n      return valid\n    } else {\n      const obj = this.data.get(where)\n      obj[_valid] = true\n\n      nopt.invalidHandler = (k, val, type) =>\n        this.invalidHandler(k, val, type, obj.source, where)\n\n      nopt.clean(obj.data, this.types, this.typeDefs)\n\n      nopt.invalidHandler = null\n      return obj[_valid]\n    }\n  }\n\n  // Returns true if the value is coming directly from the source defined\n  // in default definitions, if the current value for the key config is\n  // coming from any other different source, returns false\n  isDefault (key) {\n    const [defaultType, ...types] = [...confTypes]\n    const defaultData = this.data.get(defaultType).data\n\n    return hasOwnProperty(defaultData, key)\n      && types.every(type => {\n        const typeData = this.data.get(type).data\n        return !hasOwnProperty(typeData, key)\n      })\n  }\n\n  invalidHandler (k, val, type, source, where) {\n    log.warn(\n      'invalid config',\n      k + '=' + JSON.stringify(val),\n      `set in ${source}`\n    )\n    this.data.get(where)[_valid] = false\n\n    if (Array.isArray(type)) {\n      if (type.includes(typeDefs.url.type)) {\n        type = typeDefs.url.type\n      } else {\n        /* istanbul ignore if - no actual configs matching this, but\n         * path types SHOULD be handled this way, like URLs, for the\n         * same reason */\n        if (type.includes(typeDefs.path.type)) {\n          type = typeDefs.path.type\n        }\n      }\n    }\n\n    const typeDesc = typeDescription(type)\n    const oneOrMore = typeDesc.indexOf(Array) !== -1\n    const mustBe = typeDesc\n      .filter(m => m !== undefined && m !== Array)\n    const oneOf = mustBe.length === 1 && oneOrMore ? ' one or more'\n      : mustBe.length > 1 && oneOrMore ? ' one or more of:'\n      : mustBe.length > 1 ? ' one of:'\n      : ''\n    const msg = 'Must be' + oneOf\n    const desc = mustBe.length === 1 ? mustBe[0]\n      : mustBe.filter(m => m !== Array)\n        .map(n => typeof n === 'string' ? n : JSON.stringify(n))\n        .join(', ')\n    log.warn('invalid config', msg, desc)\n  }\n\n  [_loadObject] (obj, where, source, er = null) {\n    const conf = this.data.get(where)\n    if (conf.source) {\n      const m = `double-loading \"${where}\" configs from ${source}, ` +\n        `previously loaded from ${conf.source}`\n      throw new Error(m)\n    }\n\n    if (this.sources.has(source)) {\n      const m = `double-loading config \"${source}\" as \"${where}\", ` +\n        `previously loaded as \"${this.sources.get(source)}\"`\n      throw new Error(m)\n    }\n\n    conf.source = source\n    this.sources.set(source, where)\n    if (er) {\n      conf.loadError = er\n      if (er.code !== 'ENOENT') {\n        log.verbose('config', `error loading ${where} config`, er)\n      }\n    } else {\n      conf.raw = obj\n      for (const [key, value] of Object.entries(obj)) {\n        const k = envReplace(key, this.env)\n        const v = this.parseField(value, k)\n        if (where !== 'default') {\n          this[_checkDeprecated](k, where, obj, [key, value])\n        }\n        conf.data[k] = v\n      }\n    }\n  }\n\n  [_checkDeprecated] (key, where, obj, kv) {\n    // XXX(npm9+) make this throw an error\n    if (this.deprecated[key]) {\n      log.warn('config', key, this.deprecated[key])\n    }\n  }\n\n  // Parse a field, coercing it to the best type available.\n  parseField (f, key, listElement = false) {\n    return parseField(f, key, this, listElement)\n  }\n\n  async [_loadFile] (file, type) {\n    process.emit('time', 'config:load:file:' + file)\n    // only catch the error from readFile, not from the loadObject call\n    await readFile(file, 'utf8').then(\n      data => this[_loadObject](ini.parse(data), type, file),\n      er => this[_loadObject](null, type, file, er)\n    )\n    process.emit('timeEnd', 'config:load:file:' + file)\n  }\n\n  loadBuiltinConfig () {\n    return this[_loadFile](resolve(this.npmPath, 'npmrc'), 'builtin')\n  }\n\n  async loadProjectConfig () {\n    // the localPrefix can be set by the CLI config, but otherwise is\n    // found by walking up the folder tree. either way, we load it before\n    // we return to make sure localPrefix is set\n    await this.loadLocalPrefix()\n\n    if (this[_get]('global') === true || this[_get]('location') === 'global') {\n      this.data.get('project').source = '(global mode enabled, ignored)'\n      this.sources.set(this.data.get('project').source, 'project')\n      return\n    }\n\n    const projectFile = resolve(this.localPrefix, '.npmrc')\n    // if we're in the ~ directory, and there happens to be a node_modules\n    // folder (which is not TOO uncommon, it turns out), then we can end\n    // up loading the \"project\" config where the \"userconfig\" will be,\n    // which causes some calamaties.  So, we only load project config if\n    // it doesn't match what the userconfig will be.\n    if (projectFile !== this[_get]('userconfig')) {\n      return this[_loadFile](projectFile, 'project')\n    } else {\n      this.data.get('project').source = '(same as \"user\" config, ignored)'\n      this.sources.set(this.data.get('project').source, 'project')\n    }\n  }\n\n  async loadLocalPrefix () {\n    const cliPrefix = this[_get]('prefix', 'cli')\n    if (cliPrefix) {\n      this.localPrefix = cliPrefix\n      return\n    }\n\n    const cliWorkspaces = this[_get]('workspaces', 'cli')\n    const isGlobal = this[_get]('global') || this[_get]('location') === 'global'\n\n    for (const p of walkUp(this.cwd)) {\n      const hasNodeModules = await stat(resolve(p, 'node_modules'))\n        .then((st) => st.isDirectory())\n        .catch(() => false)\n\n      const hasPackageJson = await stat(resolve(p, 'package.json'))\n        .then((st) => st.isFile())\n        .catch(() => false)\n\n      if (!this.localPrefix && (hasNodeModules || hasPackageJson)) {\n        this.localPrefix = p\n\n        // if workspaces are disabled, or we're in global mode, return now\n        if (cliWorkspaces === false || isGlobal) {\n          return\n        }\n\n        // otherwise, continue the loop\n        continue\n      }\n\n      if (this.localPrefix && hasPackageJson) {\n        // if we already set localPrefix but this dir has a package.json\n        // then we need to see if `p` is a workspace root by reading its package.json\n        // however, if reading it fails then we should just move on\n        const pkg = await rpj(resolve(p, 'package.json')).catch(() => false)\n        if (!pkg) {\n          continue\n        }\n\n        const workspaces = await mapWorkspaces({ cwd: p, pkg })\n        for (const w of workspaces.values()) {\n          if (w === this.localPrefix) {\n            // see if there's a .npmrc file in the workspace, if so log a warning\n            const hasNpmrc = await stat(resolve(this.localPrefix, '.npmrc'))\n              .then((st) => st.isFile())\n              .catch(() => false)\n\n            if (hasNpmrc) {\n              log.warn(`ignoring workspace config at ${this.localPrefix}/.npmrc`)\n            }\n\n            // set the workspace in the default layer, which allows it to be overridden easily\n            const { data } = this.data.get('default')\n            data.workspace = [this.localPrefix]\n            this.localPrefix = p\n            log.info(`found workspace root at ${this.localPrefix}`)\n            // we found a root, so we return now\n            return\n          }\n        }\n      }\n    }\n\n    if (!this.localPrefix) {\n      this.localPrefix = this.cwd\n    }\n  }\n\n  loadUserConfig () {\n    return this[_loadFile](this[_get]('userconfig'), 'user')\n  }\n\n  loadGlobalConfig () {\n    return this[_loadFile](this[_get]('globalconfig'), 'global')\n  }\n\n  async save (where) {\n    if (!this.loaded) {\n      throw new Error('call config.load() before saving')\n    }\n    if (!confFileTypes.has(where)) {\n      throw new Error('invalid config location param: ' + where)\n    }\n    const conf = this.data.get(where)\n    conf[_raw] = { ...conf.data }\n    conf[_loadError] = null\n\n    // upgrade auth configs to more secure variants before saving\n    if (where === 'user') {\n      const reg = this.get('registry')\n      const creds = this.getCredentialsByURI(reg)\n      // we ignore this error because the failed set already removed\n      // anything that might be a security hazard, and it won't be\n      // saved back to the .npmrc file, so we're good.\n      try {\n        this.setCredentialsByURI(reg, creds)\n      // eslint-disable-next-line no-empty\n      } catch (_) {}\n    }\n\n    const iniData = ini.stringify(conf.data).trim() + '\\n'\n    if (!iniData.trim()) {\n      // ignore the unlink error (eg, if file doesn't exist)\n      await unlink(conf.source).catch(er => {})\n      return\n    }\n    const dir = dirname(conf.source)\n    await mkdirp(dir)\n    await writeFile(conf.source, iniData, 'utf8')\n    // don't leave a root-owned config file lying around\n    /* istanbul ignore if - this is best-effort and a pita to test */\n    if (myUid === 0) {\n      const st = await stat(dir).catch(() => null)\n      if (st && (st.uid !== myUid || st.gid !== myGid)) {\n        await chown(conf.source, st.uid, st.gid).catch(() => {})\n      }\n    }\n    const mode = where === 'user' ? 0o600 : 0o666\n    await chmod(conf.source, mode)\n  }\n\n  clearCredentialsByURI (uri) {\n    const nerfed = nerfDart(uri)\n    const def = nerfDart(this.get('registry'))\n    if (def === nerfed) {\n      // do not delete email, that shouldn't be nerfed any more.\n      // just delete the nerfed copy, if one exists.\n      this.delete(`-authtoken`, 'user')\n      this.delete(`_authToken`, 'user')\n      this.delete(`_authtoken`, 'user')\n      this.delete(`_auth`, 'user')\n      this.delete(`_password`, 'user')\n      this.delete(`username`, 'user')\n    }\n    this.delete(`${nerfed}:_authToken`, 'user')\n    this.delete(`${nerfed}:_auth`, 'user')\n    this.delete(`${nerfed}:_password`, 'user')\n    this.delete(`${nerfed}:username`, 'user')\n    this.delete(`${nerfed}:email`, 'user')\n    this.delete(`${nerfed}:certfile`, 'user')\n    this.delete(`${nerfed}:keyfile`, 'user')\n  }\n\n  setCredentialsByURI (uri, { token, username, password, email, certfile, keyfile }) {\n    const nerfed = nerfDart(uri)\n    const def = nerfDart(this.get('registry'))\n\n    if (def === nerfed) {\n      // remove old style auth info not limited to a single registry\n      this.delete('_password', 'user')\n      this.delete('username', 'user')\n      this.delete('_auth', 'user')\n      this.delete('_authtoken', 'user')\n      this.delete('-authtoken', 'user')\n      this.delete('_authToken', 'user')\n    }\n\n    // email used to be nerfed always.  if we're using the default\n    // registry, de-nerf it.\n    if (nerfed === def) {\n      email = email ||\n        this.get('email', 'user') ||\n        this.get(`${nerfed}:email`, 'user')\n      if (email) {\n        this.set('email', email, 'user')\n      }\n    }\n\n    // field that hasn't been used as documented for a LONG time,\n    // and as of npm 7.10.0, isn't used at all.  We just always\n    // send auth if we have it, only to the URIs under the nerf dart.\n    this.delete(`${nerfed}:always-auth`, 'user')\n\n    this.delete(`${nerfed}:email`, 'user')\n    if (certfile && keyfile) {\n      this.set(`${nerfed}:certfile`, certfile, 'user')\n      this.set(`${nerfed}:keyfile`, keyfile, 'user')\n      // cert/key may be used in conjunction with other credentials, thus no `else`\n    }\n    if (token) {\n      this.set(`${nerfed}:_authToken`, token, 'user')\n      this.delete(`${nerfed}:_password`, 'user')\n      this.delete(`${nerfed}:username`, 'user')\n    } else if (username || password) {\n      if (!username) {\n        throw new Error('must include username')\n      }\n      if (!password) {\n        throw new Error('must include password')\n      }\n      this.delete(`${nerfed}:_authToken`, 'user')\n      this.set(`${nerfed}:username`, username, 'user')\n      // note: not encrypted, no idea why we bothered to do this, but oh well\n      // protects against shoulder-hacks if password is memorable, I guess?\n      const encoded = Buffer.from(password, 'utf8').toString('base64')\n      this.set(`${nerfed}:_password`, encoded, 'user')\n    } else if (!certfile || !keyfile) {\n      throw new Error('No credentials to set.')\n    }\n  }\n\n  // this has to be a bit more complicated to support legacy data of all forms\n  getCredentialsByURI (uri) {\n    const nerfed = nerfDart(uri)\n    const creds = {}\n\n    const email = this.get(`${nerfed}:email`) || this.get('email')\n    if (email) {\n      creds.email = email\n    }\n\n    const certfileReg = this.get(`${nerfed}:certfile`)\n    const keyfileReg = this.get(`${nerfed}:keyfile`)\n    if (certfileReg && keyfileReg) {\n      creds.certfile = certfileReg\n      creds.keyfile = keyfileReg\n      // cert/key may be used in conjunction with other credentials, thus no `return`\n    }\n\n    const tokenReg = this.get(`${nerfed}:_authToken`) ||\n      nerfed === nerfDart(this.get('registry')) && this.get('_authToken')\n\n    if (tokenReg) {\n      creds.token = tokenReg\n      return creds\n    }\n\n    const userReg = this.get(`${nerfed}:username`)\n    const passReg = this.get(`${nerfed}:_password`)\n    if (userReg && passReg) {\n      creds.username = userReg\n      creds.password = Buffer.from(passReg, 'base64').toString('utf8')\n      const auth = `${creds.username}:${creds.password}`\n      creds.auth = Buffer.from(auth, 'utf8').toString('base64')\n      return creds\n    }\n\n    const authReg = this.get(`${nerfed}:_auth`)\n    if (authReg) {\n      const authDecode = Buffer.from(authReg, 'base64').toString('utf8')\n      const authSplit = authDecode.split(':')\n      creds.username = authSplit.shift()\n      creds.password = authSplit.join(':')\n      creds.auth = authReg\n      return creds\n    }\n\n    // at this point, we can only use the values if the URI is the\n    // default registry.\n    const defaultNerf = nerfDart(this.get('registry'))\n    if (nerfed !== defaultNerf) {\n      return creds\n    }\n\n    const userDef = this.get('username')\n    const passDef = this.get('_password')\n    if (userDef && passDef) {\n      creds.username = userDef\n      creds.password = Buffer.from(passDef, 'base64').toString('utf8')\n      const auth = `${creds.username}:${creds.password}`\n      creds.auth = Buffer.from(auth, 'utf8').toString('base64')\n      return creds\n    }\n\n    // Handle the old-style _auth=<base64> style for the default\n    // registry, if set.\n    const auth = this.get('_auth')\n    if (!auth) {\n      return creds\n    }\n\n    const authDecode = Buffer.from(auth, 'base64').toString('utf8')\n    const authSplit = authDecode.split(':')\n    creds.username = authSplit.shift()\n    creds.password = authSplit.join(':')\n    creds.auth = auth\n    return creds\n  }\n\n  // set up the environment object we have with npm_config_* environs\n  // for all configs that are different from their default values, and\n  // set EDITOR and HOME.\n  setEnvs () {\n    setEnvs(this)\n  }\n}\n\nconst _data = Symbol('data')\nconst _raw = Symbol('raw')\nconst _loadError = Symbol('loadError')\nconst _source = Symbol('source')\nconst _valid = Symbol('valid')\nclass ConfigData {\n  constructor (parent) {\n    this[_data] = Object.create(parent && parent.data)\n    this[_source] = null\n    this[_loadError] = null\n    this[_raw] = null\n    this[_valid] = true\n  }\n\n  get data () {\n    return this[_data]\n  }\n\n  get valid () {\n    return this[_valid]\n  }\n\n  set source (s) {\n    if (this[_source]) {\n      throw new Error('cannot set ConfigData source more than once')\n    }\n    this[_source] = s\n  }\n\n  get source () {\n    return this[_source]\n  }\n\n  set loadError (e) {\n    if (this[_loadError] || this[_raw]) {\n      throw new Error('cannot set ConfigData loadError after load')\n    }\n    this[_loadError] = e\n  }\n\n  get loadError () {\n    return this[_loadError]\n  }\n\n  set raw (r) {\n    if (this[_raw] || this[_loadError]) {\n      throw new Error('cannot set ConfigData raw after load')\n    }\n    this[_raw] = r\n  }\n\n  get raw () {\n    return this[_raw]\n  }\n}\n\nmodule.exports = Config\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}