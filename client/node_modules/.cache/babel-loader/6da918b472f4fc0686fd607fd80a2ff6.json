{"ast":null,"code":"'use strict';\n\nconst events = require('events');\n\nconst util = require('util');\n\nconst contentPath = require('./path');\n\nconst fixOwner = require('../util/fix-owner');\n\nconst fs = require('@npmcli/fs');\n\nconst moveFile = require('../util/move-file');\n\nconst Minipass = require('minipass');\n\nconst Pipeline = require('minipass-pipeline');\n\nconst Flush = require('minipass-flush');\n\nconst path = require('path');\n\nconst rimraf = util.promisify(require('rimraf'));\n\nconst ssri = require('ssri');\n\nconst uniqueFilename = require('unique-filename');\n\nconst fsm = require('fs-minipass');\n\nmodule.exports = write;\n\nasync function write(cache, data) {\n  let opts = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  const {\n    algorithms,\n    size,\n    integrity\n  } = opts;\n\n  if (algorithms && algorithms.length > 1) {\n    throw new Error('opts.algorithms only supports a single algorithm for now');\n  }\n\n  if (typeof size === 'number' && data.length !== size) {\n    throw sizeError(size, data.length);\n  }\n\n  const sri = ssri.fromData(data, algorithms ? {\n    algorithms\n  } : {});\n\n  if (integrity && !ssri.checkData(data, integrity, opts)) {\n    throw checksumError(integrity, sri);\n  }\n\n  const tmp = await makeTmp(cache, opts);\n\n  try {\n    await fs.writeFile(tmp.target, data, {\n      flag: 'wx'\n    });\n    await moveToDestination(tmp, cache, sri, opts);\n    return {\n      integrity: sri,\n      size: data.length\n    };\n  } finally {\n    if (!tmp.moved) {\n      await rimraf(tmp.target);\n    }\n  }\n}\n\nmodule.exports.stream = writeStream; // writes proxied to the 'inputStream' that is passed to the Promise\n// 'end' is deferred until content is handled.\n\nclass CacacheWriteStream extends Flush {\n  constructor(cache, opts) {\n    super();\n    this.opts = opts;\n    this.cache = cache;\n    this.inputStream = new Minipass();\n    this.inputStream.on('error', er => this.emit('error', er));\n    this.inputStream.on('drain', () => this.emit('drain'));\n    this.handleContentP = null;\n  }\n\n  write(chunk, encoding, cb) {\n    if (!this.handleContentP) {\n      this.handleContentP = handleContent(this.inputStream, this.cache, this.opts);\n    }\n\n    return this.inputStream.write(chunk, encoding, cb);\n  }\n\n  flush(cb) {\n    this.inputStream.end(() => {\n      if (!this.handleContentP) {\n        const e = new Error('Cache input stream was empty');\n        e.code = 'ENODATA'; // empty streams are probably emitting end right away.\n        // defer this one tick by rejecting a promise on it.\n\n        return Promise.reject(e).catch(cb);\n      }\n\n      this.handleContentP.then(res => {\n        res.integrity && this.emit('integrity', res.integrity);\n        res.size !== null && this.emit('size', res.size);\n        cb();\n      }, er => cb(er));\n    });\n  }\n\n}\n\nfunction writeStream(cache) {\n  let opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  return new CacacheWriteStream(cache, opts);\n}\n\nasync function handleContent(inputStream, cache, opts) {\n  const tmp = await makeTmp(cache, opts);\n\n  try {\n    const res = await pipeToTmp(inputStream, cache, tmp.target, opts);\n    await moveToDestination(tmp, cache, res.integrity, opts);\n    return res;\n  } finally {\n    if (!tmp.moved) {\n      await rimraf(tmp.target);\n    }\n  }\n}\n\nasync function pipeToTmp(inputStream, cache, tmpTarget, opts) {\n  const outStream = new fsm.WriteStream(tmpTarget, {\n    flags: 'wx'\n  });\n\n  if (opts.integrityEmitter) {\n    // we need to create these all simultaneously since they can fire in any order\n    const [integrity, size] = await Promise.all([events.once(opts.integrityEmitter, 'integrity').then(res => res[0]), events.once(opts.integrityEmitter, 'size').then(res => res[0]), new Pipeline(inputStream, outStream).promise()]);\n    return {\n      integrity,\n      size\n    };\n  }\n\n  let integrity;\n  let size;\n  const hashStream = ssri.integrityStream({\n    integrity: opts.integrity,\n    algorithms: opts.algorithms,\n    size: opts.size\n  });\n  hashStream.on('integrity', i => {\n    integrity = i;\n  });\n  hashStream.on('size', s => {\n    size = s;\n  });\n  const pipeline = new Pipeline(inputStream, hashStream, outStream);\n  await pipeline.promise();\n  return {\n    integrity,\n    size\n  };\n}\n\nasync function makeTmp(cache, opts) {\n  const tmpTarget = uniqueFilename(path.join(cache, 'tmp'), opts.tmpPrefix);\n  await fixOwner.mkdirfix(cache, path.dirname(tmpTarget));\n  return {\n    target: tmpTarget,\n    moved: false\n  };\n}\n\nasync function moveToDestination(tmp, cache, sri, opts) {\n  const destination = contentPath(cache, sri);\n  const destDir = path.dirname(destination);\n  await fixOwner.mkdirfix(cache, destDir);\n  await moveFile(tmp.target, destination);\n  tmp.moved = true;\n  await fixOwner.chownr(cache, destination);\n}\n\nfunction sizeError(expected, found) {\n  /* eslint-disable-next-line max-len */\n  const err = new Error(`Bad data size: expected inserted data to be ${expected} bytes, but got ${found} instead`);\n  err.expected = expected;\n  err.found = found;\n  err.code = 'EBADSIZE';\n  return err;\n}\n\nfunction checksumError(expected, found) {\n  const err = new Error(`Integrity check failed:\n  Wanted: ${expected}\n   Found: ${found}`);\n  err.code = 'EINTEGRITY';\n  err.expected = expected;\n  err.found = found;\n  return err;\n}","map":{"version":3,"names":["events","require","util","contentPath","fixOwner","fs","moveFile","Minipass","Pipeline","Flush","path","rimraf","promisify","ssri","uniqueFilename","fsm","module","exports","write","cache","data","opts","algorithms","size","integrity","length","Error","sizeError","sri","fromData","checkData","checksumError","tmp","makeTmp","writeFile","target","flag","moveToDestination","moved","stream","writeStream","CacacheWriteStream","constructor","inputStream","on","er","emit","handleContentP","chunk","encoding","cb","handleContent","flush","end","e","code","Promise","reject","catch","then","res","pipeToTmp","tmpTarget","outStream","WriteStream","flags","integrityEmitter","all","once","promise","hashStream","integrityStream","i","s","pipeline","join","tmpPrefix","mkdirfix","dirname","destination","destDir","chownr","expected","found","err"],"sources":["/Users/chelsea/Documents/0_AllCoding/shoppingstories-v3/node_modules/npm/node_modules/cacache/lib/content/write.js"],"sourcesContent":["'use strict'\n\nconst events = require('events')\nconst util = require('util')\n\nconst contentPath = require('./path')\nconst fixOwner = require('../util/fix-owner')\nconst fs = require('@npmcli/fs')\nconst moveFile = require('../util/move-file')\nconst Minipass = require('minipass')\nconst Pipeline = require('minipass-pipeline')\nconst Flush = require('minipass-flush')\nconst path = require('path')\nconst rimraf = util.promisify(require('rimraf'))\nconst ssri = require('ssri')\nconst uniqueFilename = require('unique-filename')\nconst fsm = require('fs-minipass')\n\nmodule.exports = write\n\nasync function write (cache, data, opts = {}) {\n  const { algorithms, size, integrity } = opts\n  if (algorithms && algorithms.length > 1) {\n    throw new Error('opts.algorithms only supports a single algorithm for now')\n  }\n\n  if (typeof size === 'number' && data.length !== size) {\n    throw sizeError(size, data.length)\n  }\n\n  const sri = ssri.fromData(data, algorithms ? { algorithms } : {})\n  if (integrity && !ssri.checkData(data, integrity, opts)) {\n    throw checksumError(integrity, sri)\n  }\n\n  const tmp = await makeTmp(cache, opts)\n  try {\n    await fs.writeFile(tmp.target, data, { flag: 'wx' })\n    await moveToDestination(tmp, cache, sri, opts)\n    return { integrity: sri, size: data.length }\n  } finally {\n    if (!tmp.moved) {\n      await rimraf(tmp.target)\n    }\n  }\n}\n\nmodule.exports.stream = writeStream\n\n// writes proxied to the 'inputStream' that is passed to the Promise\n// 'end' is deferred until content is handled.\nclass CacacheWriteStream extends Flush {\n  constructor (cache, opts) {\n    super()\n    this.opts = opts\n    this.cache = cache\n    this.inputStream = new Minipass()\n    this.inputStream.on('error', er => this.emit('error', er))\n    this.inputStream.on('drain', () => this.emit('drain'))\n    this.handleContentP = null\n  }\n\n  write (chunk, encoding, cb) {\n    if (!this.handleContentP) {\n      this.handleContentP = handleContent(\n        this.inputStream,\n        this.cache,\n        this.opts\n      )\n    }\n    return this.inputStream.write(chunk, encoding, cb)\n  }\n\n  flush (cb) {\n    this.inputStream.end(() => {\n      if (!this.handleContentP) {\n        const e = new Error('Cache input stream was empty')\n        e.code = 'ENODATA'\n        // empty streams are probably emitting end right away.\n        // defer this one tick by rejecting a promise on it.\n        return Promise.reject(e).catch(cb)\n      }\n      this.handleContentP.then(\n        (res) => {\n          res.integrity && this.emit('integrity', res.integrity)\n          res.size !== null && this.emit('size', res.size)\n          cb()\n        },\n        (er) => cb(er)\n      )\n    })\n  }\n}\n\nfunction writeStream (cache, opts = {}) {\n  return new CacacheWriteStream(cache, opts)\n}\n\nasync function handleContent (inputStream, cache, opts) {\n  const tmp = await makeTmp(cache, opts)\n  try {\n    const res = await pipeToTmp(inputStream, cache, tmp.target, opts)\n    await moveToDestination(\n      tmp,\n      cache,\n      res.integrity,\n      opts\n    )\n    return res\n  } finally {\n    if (!tmp.moved) {\n      await rimraf(tmp.target)\n    }\n  }\n}\n\nasync function pipeToTmp (inputStream, cache, tmpTarget, opts) {\n  const outStream = new fsm.WriteStream(tmpTarget, {\n    flags: 'wx',\n  })\n\n  if (opts.integrityEmitter) {\n    // we need to create these all simultaneously since they can fire in any order\n    const [integrity, size] = await Promise.all([\n      events.once(opts.integrityEmitter, 'integrity').then(res => res[0]),\n      events.once(opts.integrityEmitter, 'size').then(res => res[0]),\n      new Pipeline(inputStream, outStream).promise(),\n    ])\n    return { integrity, size }\n  }\n\n  let integrity\n  let size\n  const hashStream = ssri.integrityStream({\n    integrity: opts.integrity,\n    algorithms: opts.algorithms,\n    size: opts.size,\n  })\n  hashStream.on('integrity', i => {\n    integrity = i\n  })\n  hashStream.on('size', s => {\n    size = s\n  })\n\n  const pipeline = new Pipeline(inputStream, hashStream, outStream)\n  await pipeline.promise()\n  return { integrity, size }\n}\n\nasync function makeTmp (cache, opts) {\n  const tmpTarget = uniqueFilename(path.join(cache, 'tmp'), opts.tmpPrefix)\n  await fixOwner.mkdirfix(cache, path.dirname(tmpTarget))\n  return {\n    target: tmpTarget,\n    moved: false,\n  }\n}\n\nasync function moveToDestination (tmp, cache, sri, opts) {\n  const destination = contentPath(cache, sri)\n  const destDir = path.dirname(destination)\n\n  await fixOwner.mkdirfix(cache, destDir)\n  await moveFile(tmp.target, destination)\n  tmp.moved = true\n  await fixOwner.chownr(cache, destination)\n}\n\nfunction sizeError (expected, found) {\n  /* eslint-disable-next-line max-len */\n  const err = new Error(`Bad data size: expected inserted data to be ${expected} bytes, but got ${found} instead`)\n  err.expected = expected\n  err.found = found\n  err.code = 'EBADSIZE'\n  return err\n}\n\nfunction checksumError (expected, found) {\n  const err = new Error(`Integrity check failed:\n  Wanted: ${expected}\n   Found: ${found}`)\n  err.code = 'EINTEGRITY'\n  err.expected = expected\n  err.found = found\n  return err\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}