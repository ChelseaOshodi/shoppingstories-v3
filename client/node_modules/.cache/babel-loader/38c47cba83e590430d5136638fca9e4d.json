{"ast":null,"code":"const log = require('./log-shim'); // print an error or just nothing if the audit report has an error\n// this is called by the audit command, and by the reify-output util\n// prints a JSON version of the error if it's --json\n// returns 'true' if there was an error, false otherwise\n\n\nconst auditError = (npm, report) => {\n  if (!report || !report.error) {\n    return false;\n  }\n\n  if (npm.command !== 'audit') {\n    return true;\n  }\n\n  const {\n    error\n  } = report; // ok, we care about it, then\n\n  log.warn('audit', error.message);\n  const {\n    body: errBody\n  } = error;\n  const body = Buffer.isBuffer(errBody) ? errBody.toString() : errBody;\n\n  if (npm.flatOptions.json) {\n    npm.output(JSON.stringify({\n      message: error.message,\n      method: error.method,\n      uri: error.uri,\n      headers: error.headers,\n      statusCode: error.statusCode,\n      body\n    }, null, 2));\n  } else {\n    npm.output(body);\n  }\n\n  throw 'audit endpoint returned an error';\n};\n\nmodule.exports = auditError;","map":{"version":3,"names":["log","require","auditError","npm","report","error","command","warn","message","body","errBody","Buffer","isBuffer","toString","flatOptions","json","output","JSON","stringify","method","uri","headers","statusCode","module","exports"],"sources":["/Users/chelsea/Documents/0_AllCoding/shoppingstories-v3/node_modules/npm/lib/utils/audit-error.js"],"sourcesContent":["const log = require('./log-shim')\n\n// print an error or just nothing if the audit report has an error\n// this is called by the audit command, and by the reify-output util\n// prints a JSON version of the error if it's --json\n// returns 'true' if there was an error, false otherwise\n\nconst auditError = (npm, report) => {\n  if (!report || !report.error) {\n    return false\n  }\n\n  if (npm.command !== 'audit') {\n    return true\n  }\n\n  const { error } = report\n\n  // ok, we care about it, then\n  log.warn('audit', error.message)\n  const { body: errBody } = error\n  const body = Buffer.isBuffer(errBody) ? errBody.toString() : errBody\n  if (npm.flatOptions.json) {\n    npm.output(JSON.stringify({\n      message: error.message,\n      method: error.method,\n      uri: error.uri,\n      headers: error.headers,\n      statusCode: error.statusCode,\n      body,\n    }, null, 2))\n  } else {\n    npm.output(body)\n  }\n\n  throw 'audit endpoint returned an error'\n}\n\nmodule.exports = auditError\n"],"mappings":"AAAA,MAAMA,GAAG,GAAGC,OAAO,CAAC,YAAD,CAAnB,C,CAEA;AACA;AACA;AACA;;;AAEA,MAAMC,UAAU,GAAG,CAACC,GAAD,EAAMC,MAAN,KAAiB;EAClC,IAAI,CAACA,MAAD,IAAW,CAACA,MAAM,CAACC,KAAvB,EAA8B;IAC5B,OAAO,KAAP;EACD;;EAED,IAAIF,GAAG,CAACG,OAAJ,KAAgB,OAApB,EAA6B;IAC3B,OAAO,IAAP;EACD;;EAED,MAAM;IAAED;EAAF,IAAYD,MAAlB,CATkC,CAWlC;;EACAJ,GAAG,CAACO,IAAJ,CAAS,OAAT,EAAkBF,KAAK,CAACG,OAAxB;EACA,MAAM;IAAEC,IAAI,EAAEC;EAAR,IAAoBL,KAA1B;EACA,MAAMI,IAAI,GAAGE,MAAM,CAACC,QAAP,CAAgBF,OAAhB,IAA2BA,OAAO,CAACG,QAAR,EAA3B,GAAgDH,OAA7D;;EACA,IAAIP,GAAG,CAACW,WAAJ,CAAgBC,IAApB,EAA0B;IACxBZ,GAAG,CAACa,MAAJ,CAAWC,IAAI,CAACC,SAAL,CAAe;MACxBV,OAAO,EAAEH,KAAK,CAACG,OADS;MAExBW,MAAM,EAAEd,KAAK,CAACc,MAFU;MAGxBC,GAAG,EAAEf,KAAK,CAACe,GAHa;MAIxBC,OAAO,EAAEhB,KAAK,CAACgB,OAJS;MAKxBC,UAAU,EAAEjB,KAAK,CAACiB,UALM;MAMxBb;IANwB,CAAf,EAOR,IAPQ,EAOF,CAPE,CAAX;EAQD,CATD,MASO;IACLN,GAAG,CAACa,MAAJ,CAAWP,IAAX;EACD;;EAED,MAAM,kCAAN;AACD,CA7BD;;AA+BAc,MAAM,CAACC,OAAP,GAAiBtB,UAAjB"},"metadata":{},"sourceType":"script"}