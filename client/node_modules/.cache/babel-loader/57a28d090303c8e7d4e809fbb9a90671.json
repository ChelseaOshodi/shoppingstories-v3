{"ast":null,"code":"module.exports = {\n  diffApply: diffApply,\n  jsonPatchPathConverter: jsonPatchPathConverter\n};\n/*\n  const obj1 = {a: 3, b: 5};\n  diffApply(obj1,\n    [\n      { \"op\": \"remove\", \"path\": ['b'] },\n      { \"op\": \"replace\", \"path\": ['a'], \"value\": 4 },\n      { \"op\": \"add\", \"path\": ['c'], \"value\": 5 }\n    ]\n  );\n  obj1; // {a: 4, c: 5}\n\n  // using converter to apply jsPatch standard paths\n  // see http://jsonpatch.com\n  import {diff, jsonPatchPathConverter} from 'just-diff'\n  const obj2 = {a: 3, b: 5};\n  diffApply(obj2, [\n    { \"op\": \"remove\", \"path\": '/b' },\n    { \"op\": \"replace\", \"path\": '/a', \"value\": 4 }\n    { \"op\": \"add\", \"path\": '/c', \"value\": 5 }\n  ], jsonPatchPathConverter);\n  obj2; // {a: 4, c: 5}\n\n  // arrays\n  const obj3 = {a: 4, b: [1, 2, 3]};\n  diffApply(obj3, [\n    { \"op\": \"replace\", \"path\": ['a'], \"value\": 3 }\n    { \"op\": \"replace\", \"path\": ['b', 2], \"value\": 4 }\n    { \"op\": \"add\", \"path\": ['b', 3], \"value\": 9 }\n  ]);\n  obj3; // {a: 3, b: [1, 2, 4, 9]}\n\n  // nested paths\n  const obj4 = {a: 4, b: {c: 3}};\n  diffApply(obj4, [\n    { \"op\": \"replace\", \"path\": ['a'], \"value\": 5 }\n    { \"op\": \"remove\", \"path\": ['b', 'c']}\n    { \"op\": \"add\", \"path\": ['b', 'd'], \"value\": 4 }\n  ]);\n  obj4; // {a: 5, b: {d: 4}}\n*/\n\nvar REMOVE = 'remove';\nvar REPLACE = 'replace';\nvar ADD = 'add';\nvar MOVE = 'move';\n\nfunction diffApply(obj, diff, pathConverter) {\n  if (!obj || typeof obj != 'object') {\n    throw new Error('base object must be an object or an array');\n  }\n\n  if (!Array.isArray(diff)) {\n    throw new Error('diff must be an array');\n  }\n\n  var diffLength = diff.length;\n\n  for (var i = 0; i < diffLength; i++) {\n    var thisDiff = diff[i];\n    var subObject = obj;\n    var thisOp = thisDiff.op;\n    var thisPath = transformPath(pathConverter, thisDiff.path);\n    var thisFromPath = thisDiff.from && transformPath(pathConverter, thisDiff.from);\n    var toPath, toPathCopy, lastToProp, subToObject, valueToMove;\n\n    if (thisFromPath) {\n      // MOVE only, \"fromPath\" is effectively path and \"path\" is toPath\n      toPath = thisPath;\n      thisPath = thisFromPath;\n      toPathCopy = toPath.slice();\n      lastToProp = toPathCopy.pop();\n      prototypeCheck(lastToProp);\n\n      if (lastToProp == null) {\n        return false;\n      }\n\n      var thisToProp;\n\n      while ((thisToProp = toPathCopy.shift()) != null) {\n        prototypeCheck(thisToProp);\n\n        if (!(thisToProp in subToObject)) {\n          subToObject[thisToProp] = {};\n        }\n\n        subToObject = subToObject[thisToProp];\n      }\n    }\n\n    var pathCopy = thisPath.slice();\n    var lastProp = pathCopy.pop();\n    prototypeCheck(lastProp);\n\n    if (lastProp == null) {\n      return false;\n    }\n\n    var thisProp;\n\n    while ((thisProp = pathCopy.shift()) != null) {\n      prototypeCheck(thisProp);\n\n      if (!(thisProp in subObject)) {\n        subObject[thisProp] = {};\n      }\n\n      subObject = subObject[thisProp];\n    }\n\n    if (thisOp === REMOVE || thisOp === REPLACE || thisOp === MOVE) {\n      var path = thisOp === MOVE ? thisDiff.from : thisDiff.path;\n\n      if (!subObject.hasOwnProperty(lastProp)) {\n        throw new Error(['expected to find property', path, 'in object', obj].join(' '));\n      }\n    }\n\n    if (thisOp === REMOVE || thisOp === MOVE) {\n      if (thisOp === MOVE) {\n        valueToMove = subObject[lastProp];\n      }\n\n      Array.isArray(subObject) ? subObject.splice(lastProp, 1) : delete subObject[lastProp];\n    }\n\n    if (thisOp === REPLACE || thisOp === ADD) {\n      subObject[lastProp] = thisDiff.value;\n    }\n\n    if (thisOp === MOVE) {\n      subObject[lastToProp] = valueToMove;\n    }\n  }\n\n  return subObject;\n}\n\nfunction transformPath(pathConverter, thisPath) {\n  if (pathConverter) {\n    thisPath = pathConverter(thisPath);\n\n    if (!Array.isArray(thisPath)) {\n      throw new Error(['pathConverter must return an array, returned:', thisPath].join(' '));\n    }\n  } else {\n    if (!Array.isArray(thisPath)) {\n      throw new Error(['diff path', thisPath, 'must be an array, consider supplying a path converter'].join(' '));\n    }\n  }\n\n  return thisPath;\n}\n\nfunction jsonPatchPathConverter(stringPath) {\n  return stringPath.split('/').slice(1);\n}\n\nfunction prototypeCheck(prop) {\n  // coercion is intentional to catch prop values like `['__proto__']`\n  if (prop == '__proto__' || prop == 'constructor' || prop == 'prototype') {\n    throw new Error('setting of prototype values not supported');\n  }\n}","map":{"version":3,"names":["module","exports","diffApply","jsonPatchPathConverter","REMOVE","REPLACE","ADD","MOVE","obj","diff","pathConverter","Error","Array","isArray","diffLength","length","i","thisDiff","subObject","thisOp","op","thisPath","transformPath","path","thisFromPath","from","toPath","toPathCopy","lastToProp","subToObject","valueToMove","slice","pop","prototypeCheck","thisToProp","shift","pathCopy","lastProp","thisProp","hasOwnProperty","join","splice","value","stringPath","split","prop"],"sources":["/Users/chelsea/Documents/0_AllCoding/shoppingstories-v3/node_modules/npm/node_modules/just-diff-apply/index.js"],"sourcesContent":["module.exports = {\n  diffApply: diffApply,\n  jsonPatchPathConverter: jsonPatchPathConverter,\n};\n\n/*\n  const obj1 = {a: 3, b: 5};\n  diffApply(obj1,\n    [\n      { \"op\": \"remove\", \"path\": ['b'] },\n      { \"op\": \"replace\", \"path\": ['a'], \"value\": 4 },\n      { \"op\": \"add\", \"path\": ['c'], \"value\": 5 }\n    ]\n  );\n  obj1; // {a: 4, c: 5}\n\n  // using converter to apply jsPatch standard paths\n  // see http://jsonpatch.com\n  import {diff, jsonPatchPathConverter} from 'just-diff'\n  const obj2 = {a: 3, b: 5};\n  diffApply(obj2, [\n    { \"op\": \"remove\", \"path\": '/b' },\n    { \"op\": \"replace\", \"path\": '/a', \"value\": 4 }\n    { \"op\": \"add\", \"path\": '/c', \"value\": 5 }\n  ], jsonPatchPathConverter);\n  obj2; // {a: 4, c: 5}\n\n  // arrays\n  const obj3 = {a: 4, b: [1, 2, 3]};\n  diffApply(obj3, [\n    { \"op\": \"replace\", \"path\": ['a'], \"value\": 3 }\n    { \"op\": \"replace\", \"path\": ['b', 2], \"value\": 4 }\n    { \"op\": \"add\", \"path\": ['b', 3], \"value\": 9 }\n  ]);\n  obj3; // {a: 3, b: [1, 2, 4, 9]}\n\n  // nested paths\n  const obj4 = {a: 4, b: {c: 3}};\n  diffApply(obj4, [\n    { \"op\": \"replace\", \"path\": ['a'], \"value\": 5 }\n    { \"op\": \"remove\", \"path\": ['b', 'c']}\n    { \"op\": \"add\", \"path\": ['b', 'd'], \"value\": 4 }\n  ]);\n  obj4; // {a: 5, b: {d: 4}}\n*/\n\nvar REMOVE = 'remove';\nvar REPLACE = 'replace';\nvar ADD = 'add';\nvar MOVE = 'move';\n\nfunction diffApply(obj, diff, pathConverter) {\n  if (!obj || typeof obj != 'object') {\n    throw new Error('base object must be an object or an array');\n  }\n\n  if (!Array.isArray(diff)) {\n    throw new Error('diff must be an array');\n  }\n\n  var diffLength = diff.length;\n  for (var i = 0; i < diffLength; i++) {\n    var thisDiff = diff[i];\n    var subObject = obj;\n    var thisOp = thisDiff.op;\n\n    var thisPath = transformPath(pathConverter, thisDiff.path);\n    var thisFromPath = thisDiff.from && transformPath(pathConverter, thisDiff.from);\n    var toPath, toPathCopy, lastToProp, subToObject, valueToMove;\n\n    if (thisFromPath) {\n      // MOVE only, \"fromPath\" is effectively path and \"path\" is toPath\n      toPath = thisPath;\n      thisPath = thisFromPath;\n\n      toPathCopy = toPath.slice();\n      lastToProp = toPathCopy.pop();\n      prototypeCheck(lastToProp);\n      if (lastToProp == null) {\n        return false;\n      }\n\n      var thisToProp;\n      while (((thisToProp = toPathCopy.shift())) != null) {\n        prototypeCheck(thisToProp);\n        if (!(thisToProp in subToObject)) {\n          subToObject[thisToProp] = {};\n        }\n        subToObject = subToObject[thisToProp];\n      }\n    }\n\n    var pathCopy = thisPath.slice();\n    var lastProp = pathCopy.pop();\n    prototypeCheck(lastProp);\n    if (lastProp == null) {\n      return false;\n    }\n\n    var thisProp;\n    while (((thisProp = pathCopy.shift())) != null) {\n      prototypeCheck(thisProp);\n      if (!(thisProp in subObject)) {\n        subObject[thisProp] = {};\n      }\n      subObject = subObject[thisProp];\n    }\n    if (thisOp === REMOVE || thisOp === REPLACE || thisOp === MOVE) {\n      var path = thisOp === MOVE ? thisDiff.from : thisDiff.path;\n      if (!subObject.hasOwnProperty(lastProp)) {\n        throw new Error(['expected to find property', path, 'in object', obj].join(' '));\n      }\n    }\n    if (thisOp === REMOVE || thisOp === MOVE) {\n      if (thisOp === MOVE) {\n        valueToMove = subObject[lastProp];\n      }\n      Array.isArray(subObject) ? subObject.splice(lastProp, 1) : delete subObject[lastProp];\n    }\n    if (thisOp === REPLACE || thisOp === ADD) {\n      subObject[lastProp] = thisDiff.value;\n    }\n\n    if (thisOp === MOVE) {\n      subObject[lastToProp] = valueToMove;\n    }\n  }\n  return subObject;\n}\n\nfunction transformPath(pathConverter, thisPath) {\n  if(pathConverter) {\n    thisPath = pathConverter(thisPath);\n    if(!Array.isArray(thisPath)) {\n      throw new Error([\n        'pathConverter must return an array, returned:',\n        thisPath,\n      ].join(' '));\n    }\n  } else {\n    if(!Array.isArray(thisPath)) {\n      throw new Error([\n        'diff path',\n        thisPath,\n        'must be an array, consider supplying a path converter']\n        .join(' '));\n    }\n  }\n  return thisPath;\n}\n\nfunction jsonPatchPathConverter(stringPath) {\n  return stringPath.split('/').slice(1);\n}\n\nfunction prototypeCheck(prop) {\n  // coercion is intentional to catch prop values like `['__proto__']`\n  if (prop == '__proto__' || prop == 'constructor' || prop == 'prototype') {\n    throw new Error('setting of prototype values not supported');\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}