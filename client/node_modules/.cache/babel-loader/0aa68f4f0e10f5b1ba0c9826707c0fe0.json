{"ast":null,"code":"// Set environment variables for any non-default configs,\n// so that they're already there when we run lifecycle scripts.\n//\n// See https://github.com/npm/rfcs/pull/90\n// Return the env key if this is a thing that belongs in the env.\n// Ie, if the key isn't a @scope, //nerf.dart, or _private,\n// and the value is a string or array.  Otherwise return false.\nconst envKey = (key, val) => {\n  return !/^[/@_]/.test(key) && typeof envVal(val) === 'string' && `npm_config_${key.replace(/-/g, '_').toLowerCase()}`;\n};\n\nconst envVal = val => Array.isArray(val) ? val.map(v => envVal(v)).join('\\n\\n') : val === null || val === undefined || val === false ? '' : typeof val === 'object' ? null : String(val);\n\nconst sameConfigValue = (def, val) => !Array.isArray(val) || !Array.isArray(def) ? def === val : sameArrayValue(def, val);\n\nconst sameArrayValue = (def, val) => {\n  if (def.length !== val.length) {\n    return false;\n  }\n\n  for (let i = 0; i < def.length; i++) {\n    /* istanbul ignore next - there are no array configs where the default\n     * is not an empty array, so this loop is a no-op, but it's the correct\n     * thing to do if we ever DO add a config like that. */\n    if (def[i] !== val[i]) {\n      return false;\n    }\n  }\n\n  return true;\n};\n\nconst setEnv = (env, rawKey, rawVal) => {\n  const val = envVal(rawVal);\n  const key = envKey(rawKey, val);\n\n  if (key && val !== null) {\n    env[key] = val;\n  }\n};\n\nconst setEnvs = config => {\n  // This ensures that all npm config values that are not the defaults are\n  // shared appropriately with child processes, without false positives.\n  const {\n    env,\n    defaults,\n    definitions,\n    list: [cliConf, envConf]\n  } = config;\n  env.INIT_CWD = process.cwd(); // if the key is deprecated, skip it always.\n  // if the key is the default value,\n  //   if the environ is NOT the default value,\n  //     set the environ\n  //   else skip it, it's fine\n  // if the key is NOT the default value,\n  //   if the env is setting it, then leave it (already set)\n  //   otherwise, set the env\n\n  const cliSet = new Set(Object.keys(cliConf));\n  const envSet = new Set(Object.keys(envConf));\n\n  for (const key in cliConf) {\n    const {\n      deprecated,\n      envExport = true\n    } = definitions[key] || {};\n\n    if (deprecated || envExport === false) {\n      continue;\n    }\n\n    if (sameConfigValue(defaults[key], cliConf[key])) {\n      // config is the default, if the env thought different, then we\n      // have to set it BACK to the default in the environment.\n      if (!sameConfigValue(envConf[key], cliConf[key])) {\n        setEnv(env, key, cliConf[key]);\n      }\n    } else {\n      // config is not the default.  if the env wasn't the one to set\n      // it that way, then we have to put it in the env\n      if (!(envSet.has(key) && !cliSet.has(key))) {\n        setEnv(env, key, cliConf[key]);\n      }\n    }\n  } // also set some other common nice envs that we want to rely on\n\n\n  env.HOME = config.home;\n  env.npm_config_global_prefix = config.globalPrefix;\n  env.npm_config_local_prefix = config.localPrefix;\n\n  if (cliConf.editor) {\n    env.EDITOR = cliConf.editor;\n  } // note: this doesn't afect the *current* node process, of course, since\n  // it's already started, but it does affect the options passed to scripts.\n\n\n  if (cliConf['node-options']) {\n    env.NODE_OPTIONS = cliConf['node-options'];\n  }\n\n  if (require.main && require.main.filename) {\n    env.npm_execpath = require.main.filename;\n  }\n\n  env.NODE = env.npm_node_execpath = config.execPath;\n};\n\nmodule.exports = setEnvs;","map":{"version":3,"names":["envKey","key","val","test","envVal","replace","toLowerCase","Array","isArray","map","v","join","undefined","String","sameConfigValue","def","sameArrayValue","length","i","setEnv","env","rawKey","rawVal","setEnvs","config","defaults","definitions","list","cliConf","envConf","INIT_CWD","process","cwd","cliSet","Set","Object","keys","envSet","deprecated","envExport","has","HOME","home","npm_config_global_prefix","globalPrefix","npm_config_local_prefix","localPrefix","editor","EDITOR","NODE_OPTIONS","require","main","filename","npm_execpath","NODE","npm_node_execpath","execPath","module","exports"],"sources":["/Users/chelsea/Documents/0_AllCoding/shoppingstories-v3/node_modules/npm/node_modules/@npmcli/config/lib/set-envs.js"],"sourcesContent":["// Set environment variables for any non-default configs,\n// so that they're already there when we run lifecycle scripts.\n//\n// See https://github.com/npm/rfcs/pull/90\n\n// Return the env key if this is a thing that belongs in the env.\n// Ie, if the key isn't a @scope, //nerf.dart, or _private,\n// and the value is a string or array.  Otherwise return false.\nconst envKey = (key, val) => {\n  return !/^[/@_]/.test(key) &&\n    (typeof envVal(val) === 'string') &&\n      `npm_config_${key.replace(/-/g, '_').toLowerCase()}`\n}\n\nconst envVal = val => Array.isArray(val) ? val.map(v => envVal(v)).join('\\n\\n')\n  : val === null || val === undefined || val === false ? ''\n  : typeof val === 'object' ? null\n  : String(val)\n\nconst sameConfigValue = (def, val) =>\n  !Array.isArray(val) || !Array.isArray(def) ? def === val\n  : sameArrayValue(def, val)\n\nconst sameArrayValue = (def, val) => {\n  if (def.length !== val.length) {\n    return false\n  }\n\n  for (let i = 0; i < def.length; i++) {\n    /* istanbul ignore next - there are no array configs where the default\n     * is not an empty array, so this loop is a no-op, but it's the correct\n     * thing to do if we ever DO add a config like that. */\n    if (def[i] !== val[i]) {\n      return false\n    }\n  }\n  return true\n}\n\nconst setEnv = (env, rawKey, rawVal) => {\n  const val = envVal(rawVal)\n  const key = envKey(rawKey, val)\n  if (key && val !== null) {\n    env[key] = val\n  }\n}\n\nconst setEnvs = (config) => {\n  // This ensures that all npm config values that are not the defaults are\n  // shared appropriately with child processes, without false positives.\n  const {\n    env,\n    defaults,\n    definitions,\n    list: [cliConf, envConf],\n  } = config\n\n  env.INIT_CWD = process.cwd()\n\n  // if the key is deprecated, skip it always.\n  // if the key is the default value,\n  //   if the environ is NOT the default value,\n  //     set the environ\n  //   else skip it, it's fine\n  // if the key is NOT the default value,\n  //   if the env is setting it, then leave it (already set)\n  //   otherwise, set the env\n  const cliSet = new Set(Object.keys(cliConf))\n  const envSet = new Set(Object.keys(envConf))\n  for (const key in cliConf) {\n    const { deprecated, envExport = true } = definitions[key] || {}\n    if (deprecated || envExport === false) {\n      continue\n    }\n\n    if (sameConfigValue(defaults[key], cliConf[key])) {\n      // config is the default, if the env thought different, then we\n      // have to set it BACK to the default in the environment.\n      if (!sameConfigValue(envConf[key], cliConf[key])) {\n        setEnv(env, key, cliConf[key])\n      }\n    } else {\n      // config is not the default.  if the env wasn't the one to set\n      // it that way, then we have to put it in the env\n      if (!(envSet.has(key) && !cliSet.has(key))) {\n        setEnv(env, key, cliConf[key])\n      }\n    }\n  }\n\n  // also set some other common nice envs that we want to rely on\n  env.HOME = config.home\n  env.npm_config_global_prefix = config.globalPrefix\n  env.npm_config_local_prefix = config.localPrefix\n  if (cliConf.editor) {\n    env.EDITOR = cliConf.editor\n  }\n\n  // note: this doesn't afect the *current* node process, of course, since\n  // it's already started, but it does affect the options passed to scripts.\n  if (cliConf['node-options']) {\n    env.NODE_OPTIONS = cliConf['node-options']\n  }\n\n  if (require.main && require.main.filename) {\n    env.npm_execpath = require.main.filename\n  }\n  env.NODE = env.npm_node_execpath = config.execPath\n}\n\nmodule.exports = setEnvs\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}