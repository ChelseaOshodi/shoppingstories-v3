{"ast":null,"code":"'use strict';\n\nconst {\n  resolve\n} = require('path');\n\nconst Arborist = require('@npmcli/arborist');\n\nconst BaseCommand = require('../base-command.js');\n\nclass QuerySelectorItem {\n  constructor(node) {\n    // all enumerable properties from the target\n    Object.assign(this, node.target.package); // append extra info\n\n    this.pkgid = node.target.pkgid;\n    this.location = node.target.location;\n    this.path = node.target.path;\n    this.realpath = node.target.realpath;\n    this.resolved = node.target.resolved;\n    this.from = [];\n    this.to = [];\n    this.dev = node.target.dev;\n    this.inBundle = node.target.inBundle;\n    this.deduped = this.from.length > 1;\n\n    for (const edge of node.target.edgesIn) {\n      this.from.push(edge.from.location);\n    }\n\n    for (const [, edge] of node.target.edgesOut) {\n      if (edge.to) {\n        this.to.push(edge.to.location);\n      }\n    }\n  }\n\n}\n\nclass Query extends BaseCommand {\n  #response = []; // response is the query response\n\n  #seen = new Set(); // paths we've seen so we can keep response deduped\n\n  static description = 'Retrieve a filtered list of packages';\n  static name = 'query';\n  static usage = ['<selector>'];\n  static ignoreImplicitWorkspace = false;\n  static params = ['global', 'workspace', 'workspaces', 'include-workspace-root'];\n\n  get parsedResponse() {\n    return JSON.stringify(this.#response, null, 2);\n  }\n\n  async exec(args) {\n    // one dir up from wherever node_modules lives\n    const where = resolve(this.npm.dir, '..');\n    const opts = { ...this.npm.flatOptions,\n      path: where,\n      forceActual: true\n    };\n    const arb = new Arborist(opts);\n    const tree = await arb.loadActual(opts);\n    const items = await tree.querySelectorAll(args[0]);\n    this.buildResponse(items);\n    this.npm.output(this.parsedResponse);\n  }\n\n  async execWorkspaces(args, filters) {\n    await this.setWorkspaces(filters);\n    const opts = { ...this.npm.flatOptions,\n      path: this.npm.prefix\n    };\n    const arb = new Arborist(opts);\n    const tree = await arb.loadActual(opts);\n\n    for (const workspacePath of this.workspacePaths) {\n      let items;\n\n      if (workspacePath === tree.root.path) {\n        // include-workspace-root\n        items = await tree.querySelectorAll(args[0]);\n      } else {\n        const [workspace] = await tree.querySelectorAll(`.workspace:path(${workspacePath})`);\n        items = await workspace.target.querySelectorAll(args[0]);\n      }\n\n      this.buildResponse(items);\n    }\n\n    this.npm.output(this.parsedResponse);\n  } // builds a normalized inventory\n\n\n  buildResponse(items) {\n    for (const node of items) {\n      if (!this.#seen.has(node.target.location)) {\n        const item = new QuerySelectorItem(node);\n        this.#response.push(item);\n        this.#seen.add(item.location);\n      }\n    }\n  }\n\n}\n\nmodule.exports = Query;","map":{"version":3,"names":["resolve","require","Arborist","BaseCommand","QuerySelectorItem","constructor","node","Object","assign","target","package","pkgid","location","path","realpath","resolved","from","to","dev","inBundle","deduped","length","edge","edgesIn","push","edgesOut","Query","response","seen","Set","description","name","usage","ignoreImplicitWorkspace","params","parsedResponse","JSON","stringify","exec","args","where","npm","dir","opts","flatOptions","forceActual","arb","tree","loadActual","items","querySelectorAll","buildResponse","output","execWorkspaces","filters","setWorkspaces","prefix","workspacePath","workspacePaths","root","workspace","has","item","add","module","exports"],"sources":["/Users/chelsea/Documents/0_AllCoding/shoppingstories-v3/node_modules/npm/lib/commands/query.js"],"sourcesContent":["'use strict'\n\nconst { resolve } = require('path')\nconst Arborist = require('@npmcli/arborist')\nconst BaseCommand = require('../base-command.js')\n\nclass QuerySelectorItem {\n  constructor (node) {\n    // all enumerable properties from the target\n    Object.assign(this, node.target.package)\n\n    // append extra info\n    this.pkgid = node.target.pkgid\n    this.location = node.target.location\n    this.path = node.target.path\n    this.realpath = node.target.realpath\n    this.resolved = node.target.resolved\n    this.from = []\n    this.to = []\n    this.dev = node.target.dev\n    this.inBundle = node.target.inBundle\n    this.deduped = this.from.length > 1\n    for (const edge of node.target.edgesIn) {\n      this.from.push(edge.from.location)\n    }\n    for (const [, edge] of node.target.edgesOut) {\n      if (edge.to) {\n        this.to.push(edge.to.location)\n      }\n    }\n  }\n}\n\nclass Query extends BaseCommand {\n  #response = [] // response is the query response\n  #seen = new Set() // paths we've seen so we can keep response deduped\n\n  static description = 'Retrieve a filtered list of packages'\n  static name = 'query'\n  static usage = ['<selector>']\n\n  static ignoreImplicitWorkspace = false\n\n  static params = [\n    'global',\n    'workspace',\n    'workspaces',\n    'include-workspace-root',\n  ]\n\n  get parsedResponse () {\n    return JSON.stringify(this.#response, null, 2)\n  }\n\n  async exec (args) {\n    // one dir up from wherever node_modules lives\n    const where = resolve(this.npm.dir, '..')\n    const opts = {\n      ...this.npm.flatOptions,\n      path: where,\n      forceActual: true,\n    }\n    const arb = new Arborist(opts)\n    const tree = await arb.loadActual(opts)\n    const items = await tree.querySelectorAll(args[0])\n    this.buildResponse(items)\n\n    this.npm.output(this.parsedResponse)\n  }\n\n  async execWorkspaces (args, filters) {\n    await this.setWorkspaces(filters)\n    const opts = {\n      ...this.npm.flatOptions,\n      path: this.npm.prefix,\n    }\n    const arb = new Arborist(opts)\n    const tree = await arb.loadActual(opts)\n    for (const workspacePath of this.workspacePaths) {\n      let items\n      if (workspacePath === tree.root.path) {\n        // include-workspace-root\n        items = await tree.querySelectorAll(args[0])\n      } else {\n        const [workspace] = await tree.querySelectorAll(`.workspace:path(${workspacePath})`)\n        items = await workspace.target.querySelectorAll(args[0])\n      }\n      this.buildResponse(items)\n    }\n    this.npm.output(this.parsedResponse)\n  }\n\n  // builds a normalized inventory\n  buildResponse (items) {\n    for (const node of items) {\n      if (!this.#seen.has(node.target.location)) {\n        const item = new QuerySelectorItem(node)\n        this.#response.push(item)\n        this.#seen.add(item.location)\n      }\n    }\n  }\n}\n\nmodule.exports = Query\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}