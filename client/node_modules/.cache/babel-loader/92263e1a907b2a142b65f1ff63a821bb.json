{"ast":null,"code":"// use the defined flattening function, and copy over any scoped\n// registries and registry-specific \"nerfdart\" configs verbatim\n//\n// TODO: make these getters so that we only have to make dirty\n// the thing that changed, and then flatten the fields that\n// could have changed when a config.set is called.\n//\n// TODO: move nerfdart auth stuff into a nested object that\n// is only passed along to paths that end up calling npm-registry-fetch.\nconst definitions = require('./definitions.js');\n\nconst flatten = function (obj) {\n  let flat = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n  for (const [key, val] of Object.entries(obj)) {\n    const def = definitions[key];\n\n    if (def && def.flatten) {\n      def.flatten(key, obj, flat);\n    } else if (/@.*:registry$/i.test(key) || /^\\/\\//.test(key)) {\n      flat[key] = val;\n    }\n  } // XXX make this the bin/npm-cli.js file explicitly instead\n  // otherwise using npm programmatically is a bit of a pain.\n\n\n  flat.npmBin = require.main ? require.main.filename :\n  /* istanbul ignore next - not configurable property */\n  undefined;\n  flat.nodeBin = process.env.NODE || process.execPath; // XXX should this be sha512?  is it even relevant?\n\n  flat.hashAlgorithm = 'sha1';\n  return flat;\n};\n\nmodule.exports = flatten;","map":{"version":3,"names":["definitions","require","flatten","obj","flat","key","val","Object","entries","def","test","npmBin","main","filename","undefined","nodeBin","process","env","NODE","execPath","hashAlgorithm","module","exports"],"sources":["/Users/chelsea/Documents/0_AllCoding/shoppingstories-v3/node_modules/npm/lib/utils/config/flatten.js"],"sourcesContent":["// use the defined flattening function, and copy over any scoped\n// registries and registry-specific \"nerfdart\" configs verbatim\n//\n// TODO: make these getters so that we only have to make dirty\n// the thing that changed, and then flatten the fields that\n// could have changed when a config.set is called.\n//\n// TODO: move nerfdart auth stuff into a nested object that\n// is only passed along to paths that end up calling npm-registry-fetch.\nconst definitions = require('./definitions.js')\nconst flatten = (obj, flat = {}) => {\n  for (const [key, val] of Object.entries(obj)) {\n    const def = definitions[key]\n    if (def && def.flatten) {\n      def.flatten(key, obj, flat)\n    } else if (/@.*:registry$/i.test(key) || /^\\/\\//.test(key)) {\n      flat[key] = val\n    }\n  }\n\n  // XXX make this the bin/npm-cli.js file explicitly instead\n  // otherwise using npm programmatically is a bit of a pain.\n  flat.npmBin = require.main ? require.main.filename\n    : /* istanbul ignore next - not configurable property */ undefined\n  flat.nodeBin = process.env.NODE || process.execPath\n\n  // XXX should this be sha512?  is it even relevant?\n  flat.hashAlgorithm = 'sha1'\n\n  return flat\n}\n\nmodule.exports = flatten\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAMA,WAAW,GAAGC,OAAO,CAAC,kBAAD,CAA3B;;AACA,MAAMC,OAAO,GAAG,UAACC,GAAD,EAAoB;EAAA,IAAdC,IAAc,uEAAP,EAAO;;EAClC,KAAK,MAAM,CAACC,GAAD,EAAMC,GAAN,CAAX,IAAyBC,MAAM,CAACC,OAAP,CAAeL,GAAf,CAAzB,EAA8C;IAC5C,MAAMM,GAAG,GAAGT,WAAW,CAACK,GAAD,CAAvB;;IACA,IAAII,GAAG,IAAIA,GAAG,CAACP,OAAf,EAAwB;MACtBO,GAAG,CAACP,OAAJ,CAAYG,GAAZ,EAAiBF,GAAjB,EAAsBC,IAAtB;IACD,CAFD,MAEO,IAAI,iBAAiBM,IAAjB,CAAsBL,GAAtB,KAA8B,QAAQK,IAAR,CAAaL,GAAb,CAAlC,EAAqD;MAC1DD,IAAI,CAACC,GAAD,CAAJ,GAAYC,GAAZ;IACD;EACF,CARiC,CAUlC;EACA;;;EACAF,IAAI,CAACO,MAAL,GAAcV,OAAO,CAACW,IAAR,GAAeX,OAAO,CAACW,IAAR,CAAaC,QAA5B;EACV;EAAuDC,SAD3D;EAEAV,IAAI,CAACW,OAAL,GAAeC,OAAO,CAACC,GAAR,CAAYC,IAAZ,IAAoBF,OAAO,CAACG,QAA3C,CAdkC,CAgBlC;;EACAf,IAAI,CAACgB,aAAL,GAAqB,MAArB;EAEA,OAAOhB,IAAP;AACD,CApBD;;AAsBAiB,MAAM,CAACC,OAAP,GAAiBpB,OAAjB"},"metadata":{},"sourceType":"script"}