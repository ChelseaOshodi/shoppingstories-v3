{"ast":null,"code":"const chalk = require('chalk');\n\nconst ciDetect = require('@npmcli/ci-detect');\n\nconst runScript = require('@npmcli/run-script');\n\nconst readPackageJson = require('read-package-json-fast');\n\nconst npmlog = require('npmlog');\n\nconst log = require('proc-log');\n\nconst noTTY = require('./no-tty.js');\n\nconst nocolor = {\n  reset: s => s,\n  bold: s => s,\n  dim: s => s\n};\n\nconst run = async _ref => {\n  let {\n    args,\n    call,\n    color,\n    flatOptions,\n    locationMsg,\n    output = () => {},\n    path,\n    binPaths,\n    runPath,\n    scriptShell\n  } = _ref;\n  // turn list of args into command string\n  const script = call || args.shift() || scriptShell;\n  const colorize = color ? chalk : nocolor; // do the fakey runScript dance\n  // still should work if no package.json in cwd\n\n  const realPkg = await readPackageJson(`${path}/package.json`).catch(() => ({}));\n  const pkg = { ...realPkg,\n    scripts: { ...(realPkg.scripts || {}),\n      npx: script\n    }\n  };\n  npmlog.disableProgress();\n\n  try {\n    if (script === scriptShell) {\n      const isTTY = !noTTY();\n\n      if (isTTY) {\n        if (ciDetect()) {\n          return log.warn('exec', 'Interactive mode disabled in CI environment');\n        }\n\n        locationMsg = locationMsg || ` at location:\\n${colorize.dim(runPath)}`;\n        output(`${colorize.reset('\\nEntering npm script environment')}${colorize.reset(locationMsg)}${colorize.bold('\\nType \\'exit\\' or ^D when finished\\n')}`);\n      }\n    }\n\n    return await runScript({ ...flatOptions,\n      pkg,\n      banner: false,\n      // we always run in cwd, not --prefix\n      path: runPath,\n      stdioString: true,\n      binPaths,\n      event: 'npx',\n      args,\n      stdio: 'inherit'\n    });\n  } finally {\n    npmlog.enableProgress();\n  }\n};\n\nmodule.exports = run;","map":{"version":3,"names":["chalk","require","ciDetect","runScript","readPackageJson","npmlog","log","noTTY","nocolor","reset","s","bold","dim","run","args","call","color","flatOptions","locationMsg","output","path","binPaths","runPath","scriptShell","script","shift","colorize","realPkg","catch","pkg","scripts","npx","disableProgress","isTTY","warn","banner","stdioString","event","stdio","enableProgress","module","exports"],"sources":["/Users/chelsea/Documents/0_AllCoding/shoppingstories-v3/node_modules/npm/node_modules/libnpmexec/lib/run-script.js"],"sourcesContent":["const chalk = require('chalk')\nconst ciDetect = require('@npmcli/ci-detect')\nconst runScript = require('@npmcli/run-script')\nconst readPackageJson = require('read-package-json-fast')\nconst npmlog = require('npmlog')\nconst log = require('proc-log')\nconst noTTY = require('./no-tty.js')\n\nconst nocolor = {\n  reset: s => s,\n  bold: s => s,\n  dim: s => s,\n}\n\nconst run = async ({\n  args,\n  call,\n  color,\n  flatOptions,\n  locationMsg,\n  output = () => {},\n  path,\n  binPaths,\n  runPath,\n  scriptShell,\n}) => {\n  // turn list of args into command string\n  const script = call || args.shift() || scriptShell\n  const colorize = color ? chalk : nocolor\n\n  // do the fakey runScript dance\n  // still should work if no package.json in cwd\n  const realPkg = await readPackageJson(`${path}/package.json`)\n    .catch(() => ({}))\n  const pkg = {\n    ...realPkg,\n    scripts: {\n      ...(realPkg.scripts || {}),\n      npx: script,\n    },\n  }\n\n  npmlog.disableProgress()\n\n  try {\n    if (script === scriptShell) {\n      const isTTY = !noTTY()\n\n      if (isTTY) {\n        if (ciDetect()) {\n          return log.warn('exec', 'Interactive mode disabled in CI environment')\n        }\n\n        locationMsg = locationMsg || ` at location:\\n${colorize.dim(runPath)}`\n\n        output(`${\n          colorize.reset('\\nEntering npm script environment')\n        }${\n          colorize.reset(locationMsg)\n        }${\n          colorize.bold('\\nType \\'exit\\' or ^D when finished\\n')\n        }`)\n      }\n    }\n    return await runScript({\n      ...flatOptions,\n      pkg,\n      banner: false,\n      // we always run in cwd, not --prefix\n      path: runPath,\n      stdioString: true,\n      binPaths,\n      event: 'npx',\n      args,\n      stdio: 'inherit',\n    })\n  } finally {\n    npmlog.enableProgress()\n  }\n}\n\nmodule.exports = run\n"],"mappings":"AAAA,MAAMA,KAAK,GAAGC,OAAO,CAAC,OAAD,CAArB;;AACA,MAAMC,QAAQ,GAAGD,OAAO,CAAC,mBAAD,CAAxB;;AACA,MAAME,SAAS,GAAGF,OAAO,CAAC,oBAAD,CAAzB;;AACA,MAAMG,eAAe,GAAGH,OAAO,CAAC,wBAAD,CAA/B;;AACA,MAAMI,MAAM,GAAGJ,OAAO,CAAC,QAAD,CAAtB;;AACA,MAAMK,GAAG,GAAGL,OAAO,CAAC,UAAD,CAAnB;;AACA,MAAMM,KAAK,GAAGN,OAAO,CAAC,aAAD,CAArB;;AAEA,MAAMO,OAAO,GAAG;EACdC,KAAK,EAAEC,CAAC,IAAIA,CADE;EAEdC,IAAI,EAAED,CAAC,IAAIA,CAFG;EAGdE,GAAG,EAAEF,CAAC,IAAIA;AAHI,CAAhB;;AAMA,MAAMG,GAAG,GAAG,cAWN;EAAA,IAXa;IACjBC,IADiB;IAEjBC,IAFiB;IAGjBC,KAHiB;IAIjBC,WAJiB;IAKjBC,WALiB;IAMjBC,MAAM,GAAG,MAAM,CAAE,CANA;IAOjBC,IAPiB;IAQjBC,QARiB;IASjBC,OATiB;IAUjBC;EAViB,CAWb;EACJ;EACA,MAAMC,MAAM,GAAGT,IAAI,IAAID,IAAI,CAACW,KAAL,EAAR,IAAwBF,WAAvC;EACA,MAAMG,QAAQ,GAAGV,KAAK,GAAGhB,KAAH,GAAWQ,OAAjC,CAHI,CAKJ;EACA;;EACA,MAAMmB,OAAO,GAAG,MAAMvB,eAAe,CAAE,GAAEgB,IAAK,eAAT,CAAf,CACnBQ,KADmB,CACb,OAAO,EAAP,CADa,CAAtB;EAEA,MAAMC,GAAG,GAAG,EACV,GAAGF,OADO;IAEVG,OAAO,EAAE,EACP,IAAIH,OAAO,CAACG,OAAR,IAAmB,EAAvB,CADO;MAEPC,GAAG,EAAEP;IAFE;EAFC,CAAZ;EAQAnB,MAAM,CAAC2B,eAAP;;EAEA,IAAI;IACF,IAAIR,MAAM,KAAKD,WAAf,EAA4B;MAC1B,MAAMU,KAAK,GAAG,CAAC1B,KAAK,EAApB;;MAEA,IAAI0B,KAAJ,EAAW;QACT,IAAI/B,QAAQ,EAAZ,EAAgB;UACd,OAAOI,GAAG,CAAC4B,IAAJ,CAAS,MAAT,EAAiB,6CAAjB,CAAP;QACD;;QAEDhB,WAAW,GAAGA,WAAW,IAAK,kBAAiBQ,QAAQ,CAACd,GAAT,CAAaU,OAAb,CAAsB,EAArE;QAEAH,MAAM,CAAE,GACNO,QAAQ,CAACjB,KAAT,CAAe,mCAAf,CACD,GACCiB,QAAQ,CAACjB,KAAT,CAAeS,WAAf,CACD,GACCQ,QAAQ,CAACf,IAAT,CAAc,uCAAd,CACD,EANK,CAAN;MAOD;IACF;;IACD,OAAO,MAAMR,SAAS,CAAC,EACrB,GAAGc,WADkB;MAErBY,GAFqB;MAGrBM,MAAM,EAAE,KAHa;MAIrB;MACAf,IAAI,EAAEE,OALe;MAMrBc,WAAW,EAAE,IANQ;MAOrBf,QAPqB;MAQrBgB,KAAK,EAAE,KARc;MASrBvB,IATqB;MAUrBwB,KAAK,EAAE;IAVc,CAAD,CAAtB;EAYD,CAhCD,SAgCU;IACRjC,MAAM,CAACkC,cAAP;EACD;AACF,CAjED;;AAmEAC,MAAM,CAACC,OAAP,GAAiB5B,GAAjB"},"metadata":{},"sourceType":"script"}