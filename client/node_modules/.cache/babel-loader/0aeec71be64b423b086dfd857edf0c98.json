{"ast":null,"code":"const EventEmitter = require('events');\n\nconst {\n  resolve,\n  dirname,\n  join\n} = require('path');\n\nconst Config = require('@npmcli/config');\n\nconst chalk = require('chalk');\n\nconst which = require('which');\n\nconst fs = require('@npmcli/fs'); // Patch the global fs module here at the app level\n\n\nrequire('graceful-fs').gracefulify(require('fs'));\n\nconst {\n  definitions,\n  flatten,\n  shorthands\n} = require('./utils/config/index.js');\n\nconst usage = require('./utils/npm-usage.js');\n\nconst LogFile = require('./utils/log-file.js');\n\nconst Timers = require('./utils/timers.js');\n\nconst Display = require('./utils/display.js');\n\nconst log = require('./utils/log-shim');\n\nconst replaceInfo = require('./utils/replace-info.js');\n\nconst updateNotifier = require('./utils/update-notifier.js');\n\nconst pkg = require('../package.json');\n\nconst cmdList = require('./utils/cmd-list.js');\n\nlet warnedNonDashArg = false;\n\nconst _load = Symbol('_load');\n\nclass Npm extends EventEmitter {\n  static get version() {\n    return pkg.version;\n  }\n\n  command = null;\n  updateNotification = null;\n  loadErr = null;\n  argv = [];\n  #loadPromise = null;\n  #tmpFolder = null;\n  #title = 'npm';\n  #argvClean = [];\n  #chalk = null;\n  #logFile = new LogFile();\n  #display = new Display();\n  #timers = new Timers({\n    start: 'npm',\n    listener: (name, ms) => {\n      const args = ['timing', name, `Completed in ${ms}ms`];\n      this.#logFile.log(...args);\n      this.#display.log(...args);\n    }\n  });\n  config = new Config({\n    npmPath: dirname(__dirname),\n    definitions,\n    flatten,\n    shorthands\n  });\n\n  get version() {\n    return this.constructor.version;\n  }\n\n  deref(c) {\n    if (!c) {\n      return;\n    }\n\n    if (c.match(/[A-Z]/)) {\n      c = c.replace(/([A-Z])/g, m => '-' + m.toLowerCase());\n    }\n\n    if (cmdList.plumbing.indexOf(c) !== -1) {\n      return c;\n    } // first deref the abbrev, if there is one\n    // then resolve any aliases\n    // so `npm install-cl` will resolve to `install-clean` then to `ci`\n\n\n    let a = cmdList.abbrevs[c];\n\n    while (cmdList.aliases[a]) {\n      a = cmdList.aliases[a];\n    }\n\n    return a;\n  } // Get an instantiated npm command\n  // npm.command is already taken as the currently running command, a refactor\n  // would be needed to change this\n\n\n  async cmd(cmd) {\n    await this.load();\n    const command = this.deref(cmd);\n\n    if (!command) {\n      throw Object.assign(new Error(`Unknown command ${cmd}`), {\n        code: 'EUNKNOWNCOMMAND'\n      });\n    }\n\n    const Impl = require(`./commands/${command}.js`);\n\n    const impl = new Impl(this);\n    return impl;\n  } // Call an npm command\n\n\n  async exec(cmd, args) {\n    const command = await this.cmd(cmd);\n    const timeEnd = this.time(`command:${cmd}`); // since 'test', 'start', 'stop', etc. commands re-enter this function\n    // to call the run-script command, we need to only set it one time.\n\n    if (!this.command) {\n      process.env.npm_command = command.name;\n      this.command = command.name;\n      this.commandInstance = command;\n    } // this is async but we dont await it, since its ok if it doesnt\n    // finish before the command finishes running. it uses command and argv\n    // so it must be initiated here, after the command name is set\n\n\n    updateNotifier(this).then(msg => this.updateNotification = msg); // Options are prefixed by a hyphen-minus (-, \\u2d).\n    // Other dash-type chars look similar but are invalid.\n\n    if (!warnedNonDashArg) {\n      args.filter(arg => /^[\\u2010-\\u2015\\u2212\\uFE58\\uFE63\\uFF0D]/.test(arg)).forEach(arg => {\n        warnedNonDashArg = true;\n        log.error('arg', 'Argument starts with non-ascii dash, this is probably invalid:', arg);\n      });\n    }\n\n    const workspacesEnabled = this.config.get('workspaces'); // if cwd is a workspace, the default is set to [that workspace]\n\n    const implicitWorkspace = this.config.get('workspace', 'default').length > 0;\n    const workspacesFilters = this.config.get('workspace');\n    const includeWorkspaceRoot = this.config.get('include-workspace-root'); // only call execWorkspaces when we have workspaces explicitly set\n    // or when it is implicit and not in our ignore list\n\n    const hasWorkspaceFilters = workspacesFilters.length > 0;\n    const invalidWorkspaceConfig = workspacesEnabled === false && hasWorkspaceFilters; // (-ws || -w foo) && (cwd is not a workspace || command is not ignoring implicit workspaces)\n\n    const filterByWorkspaces = (workspacesEnabled || hasWorkspaceFilters) && (!implicitWorkspace || !command.ignoreImplicitWorkspace); // normally this would go in the constructor, but our tests don't\n    // actually use a real npm object so this.npm.config isn't always\n    // populated.  this is the compromise until we can make that a reality\n    // and then move this into the constructor.\n\n    command.workspaces = workspacesEnabled;\n    command.workspacePaths = null; // normally this would be evaluated in base-command#setWorkspaces, see\n    // above for explanation\n\n    command.includeWorkspaceRoot = includeWorkspaceRoot;\n    let execPromise = Promise.resolve();\n\n    if (this.config.get('usage')) {\n      this.output(command.usage);\n    } else if (invalidWorkspaceConfig) {\n      execPromise = Promise.reject(new Error('Can not use --no-workspaces and --workspace at the same time'));\n    } else if (filterByWorkspaces) {\n      if (this.global) {\n        execPromise = Promise.reject(new Error('Workspaces not supported for global packages'));\n      } else {\n        execPromise = command.execWorkspaces(args, workspacesFilters);\n      }\n    } else {\n      execPromise = command.exec(args);\n    }\n\n    return execPromise.finally(timeEnd);\n  }\n\n  async load() {\n    if (!this.#loadPromise) {\n      this.#loadPromise = this.time('npm:load', () => this[_load]().catch(er => er).then(er => {\n        this.loadErr = er;\n\n        if (!er) {\n          if (this.config.get('force')) {\n            log.warn('using --force', 'Recommended protections disabled.');\n          }\n        } else {\n          throw er;\n        }\n      }));\n    }\n\n    return this.#loadPromise;\n  }\n\n  get loaded() {\n    return this.config.loaded;\n  } // This gets called at the end of the exit handler and\n  // during any tests to cleanup all of our listeners\n  // Everything in here should be synchronous\n\n\n  unload() {\n    this.#timers.off();\n    this.#display.off();\n    this.#logFile.off();\n  }\n\n  time(name, fn) {\n    return this.#timers.time(name, fn);\n  }\n\n  writeTimingFile() {\n    this.#timers.writeFile({\n      command: this.#argvClean,\n      // We used to only ever report a single log file\n      // so to be backwards compatible report the last logfile\n      // XXX: remove this in npm 9 or just keep it forever\n      logfile: this.logFiles[this.logFiles.length - 1],\n      logfiles: this.logFiles,\n      version: this.version\n    });\n  }\n\n  get title() {\n    return this.#title;\n  }\n\n  set title(t) {\n    process.title = t;\n    this.#title = t;\n  }\n\n  async [_load]() {\n    const node = this.time('npm:load:whichnode', () => {\n      try {\n        return which.sync(process.argv[0]);\n      } catch {} // TODO should we throw here?\n\n    });\n\n    if (node && node.toUpperCase() !== process.execPath.toUpperCase()) {\n      log.verbose('node symlink', node);\n      process.execPath = node;\n      this.config.execPath = node;\n    }\n\n    await this.time('npm:load:configload', () => this.config.load()); // mkdir this separately since the logs dir can be set to\n    // a different location. if this fails, then we don't have\n    // a cache dir, but we don't want to fail immediately since\n    // the command might not need a cache dir (like `npm --version`)\n\n    await this.time('npm:load:mkdirpcache', () => fs.mkdir(this.cache, {\n      recursive: true,\n      owner: 'inherit'\n    }).catch(e => log.verbose('cache', `could not create cache: ${e}`))); // its ok if this fails. user might have specified an invalid dir\n    // which we will tell them about at the end\n\n    await this.time('npm:load:mkdirplogs', () => fs.mkdir(this.logsDir, {\n      recursive: true,\n      owner: 'inherit'\n    }).catch(e => log.verbose('logfile', `could not create logs-dir: ${e}`))); // note: this MUST be shorter than the actual argv length, because it\n    // uses the same memory, so node will truncate it if it's too long.\n\n    this.time('npm:load:setTitle', () => {\n      const {\n        parsedArgv: {\n          cooked,\n          remain\n        }\n      } = this.config;\n      this.argv = remain; // Secrets are mostly in configs, so title is set using only the positional args\n      // to keep those from being leaked.\n\n      this.title = ['npm'].concat(replaceInfo(remain)).join(' ').trim(); // The cooked argv is also logged separately for debugging purposes. It is\n      // cleaned as a best effort by replacing known secrets like basic auth\n      // password and strings that look like npm tokens. XXX: for this to be\n      // safer the config should create a sanitized version of the argv as it\n      // has the full context of what each option contains.\n\n      this.#argvClean = replaceInfo(cooked);\n      log.verbose('title', this.title);\n      log.verbose('argv', this.#argvClean.map(JSON.stringify).join(' '));\n    });\n    this.time('npm:load:display', () => {\n      this.#display.load({\n        // Use logColor since that is based on stderr\n        color: this.logColor,\n        progress: this.flatOptions.progress,\n        silent: this.silent,\n        timing: this.config.get('timing'),\n        loglevel: this.config.get('loglevel'),\n        unicode: this.config.get('unicode'),\n        heading: this.config.get('heading')\n      });\n      process.env.COLOR = this.color ? '1' : '0';\n    });\n    this.time('npm:load:logFile', () => {\n      this.#logFile.load({\n        dir: this.logsDir,\n        logsMax: this.config.get('logs-max')\n      });\n      log.verbose('logfile', this.#logFile.files[0] || 'no logfile created');\n    });\n    this.time('npm:load:timers', () => this.#timers.load({\n      dir: this.config.get('timing') ? this.timingDir : null\n    }));\n    this.time('npm:load:configScope', () => {\n      const configScope = this.config.get('scope');\n\n      if (configScope && !/^@/.test(configScope)) {\n        this.config.set('scope', `@${configScope}`, this.config.find('scope'));\n      }\n    });\n  }\n\n  get flatOptions() {\n    const {\n      flat\n    } = this.config;\n\n    if (this.command) {\n      flat.npmCommand = this.command;\n    }\n\n    return flat;\n  } // color and logColor are a special derived values that takes into\n  // consideration not only the config, but whether or not we are operating\n  // in a tty with the associated output (stdout/stderr)\n\n\n  get color() {\n    return this.flatOptions.color;\n  }\n\n  get chalk() {\n    if (!this.#chalk) {\n      let level = chalk.level;\n\n      if (!this.color) {\n        level = 0;\n      }\n\n      this.#chalk = new chalk.Instance({\n        level\n      });\n    }\n\n    return this.#chalk;\n  }\n\n  get global() {\n    return this.config.get('global') || this.config.get('location') === 'global';\n  }\n\n  get logColor() {\n    return this.flatOptions.logColor;\n  }\n\n  get silent() {\n    return this.flatOptions.silent;\n  }\n\n  get lockfileVersion() {\n    return 2;\n  }\n\n  get unfinishedTimers() {\n    return this.#timers.unfinished;\n  }\n\n  get finishedTimers() {\n    return this.#timers.finished;\n  }\n\n  get started() {\n    return this.#timers.started;\n  }\n\n  get logFiles() {\n    return this.#logFile.files;\n  }\n\n  get logsDir() {\n    return this.config.get('logs-dir') || join(this.cache, '_logs');\n  }\n\n  get timingFile() {\n    return this.#timers.file;\n  }\n\n  get timingDir() {\n    // XXX(npm9): make this always in logs-dir\n    return this.config.get('logs-dir') || this.cache;\n  }\n\n  get cache() {\n    return this.config.get('cache');\n  }\n\n  set cache(r) {\n    this.config.set('cache', r);\n  }\n\n  get globalPrefix() {\n    return this.config.globalPrefix;\n  }\n\n  set globalPrefix(r) {\n    this.config.globalPrefix = r;\n  }\n\n  get localPrefix() {\n    return this.config.localPrefix;\n  }\n\n  set localPrefix(r) {\n    this.config.localPrefix = r;\n  }\n\n  get globalDir() {\n    return process.platform !== 'win32' ? resolve(this.globalPrefix, 'lib', 'node_modules') : resolve(this.globalPrefix, 'node_modules');\n  }\n\n  get localDir() {\n    return resolve(this.localPrefix, 'node_modules');\n  }\n\n  get dir() {\n    return this.global ? this.globalDir : this.localDir;\n  }\n\n  get globalBin() {\n    const b = this.globalPrefix;\n    return process.platform !== 'win32' ? resolve(b, 'bin') : b;\n  }\n\n  get localBin() {\n    return resolve(this.dir, '.bin');\n  }\n\n  get bin() {\n    return this.global ? this.globalBin : this.localBin;\n  }\n\n  get prefix() {\n    return this.global ? this.globalPrefix : this.localPrefix;\n  }\n\n  set prefix(r) {\n    const k = this.global ? 'globalPrefix' : 'localPrefix';\n    this[k] = r;\n  }\n\n  get usage() {\n    return usage(this);\n  } // XXX add logging to see if we actually use this\n\n\n  get tmp() {\n    if (!this.#tmpFolder) {\n      const rand = require('crypto').randomBytes(4).toString('hex');\n\n      this.#tmpFolder = `npm-${process.pid}-${rand}`;\n    }\n\n    return resolve(this.config.get('tmp'), this.#tmpFolder);\n  } // output to stdout in a progress bar compatible way\n\n\n  output() {\n    log.clearProgress(); // eslint-disable-next-line no-console\n\n    console.log(...arguments);\n    log.showProgress();\n  }\n\n  outputError() {\n    log.clearProgress(); // eslint-disable-next-line no-console\n\n    console.error(...arguments);\n    log.showProgress();\n  }\n\n}\n\nmodule.exports = Npm;","map":{"version":3,"names":["EventEmitter","require","resolve","dirname","join","Config","chalk","which","fs","gracefulify","definitions","flatten","shorthands","usage","LogFile","Timers","Display","log","replaceInfo","updateNotifier","pkg","cmdList","warnedNonDashArg","_load","Symbol","Npm","version","command","updateNotification","loadErr","argv","loadPromise","tmpFolder","title","argvClean","logFile","display","timers","start","listener","name","ms","args","config","npmPath","__dirname","constructor","deref","c","match","replace","m","toLowerCase","plumbing","indexOf","a","abbrevs","aliases","cmd","load","Object","assign","Error","code","Impl","impl","exec","timeEnd","time","process","env","npm_command","commandInstance","then","msg","filter","arg","test","forEach","error","workspacesEnabled","get","implicitWorkspace","length","workspacesFilters","includeWorkspaceRoot","hasWorkspaceFilters","invalidWorkspaceConfig","filterByWorkspaces","ignoreImplicitWorkspace","workspaces","workspacePaths","execPromise","Promise","output","reject","global","execWorkspaces","finally","catch","er","warn","loaded","unload","off","fn","writeTimingFile","writeFile","logfile","logFiles","logfiles","t","node","sync","toUpperCase","execPath","verbose","mkdir","cache","recursive","owner","e","logsDir","parsedArgv","cooked","remain","concat","trim","map","JSON","stringify","color","logColor","progress","flatOptions","silent","timing","loglevel","unicode","heading","COLOR","dir","logsMax","files","timingDir","configScope","set","find","flat","npmCommand","level","Instance","lockfileVersion","unfinishedTimers","unfinished","finishedTimers","finished","started","timingFile","file","r","globalPrefix","localPrefix","globalDir","platform","localDir","globalBin","b","localBin","bin","prefix","k","tmp","rand","randomBytes","toString","pid","clearProgress","console","showProgress","outputError","module","exports"],"sources":["/Users/chelsea/Documents/0_AllCoding/shoppingstories-v3/node_modules/npm/lib/npm.js"],"sourcesContent":["const EventEmitter = require('events')\nconst { resolve, dirname, join } = require('path')\nconst Config = require('@npmcli/config')\nconst chalk = require('chalk')\nconst which = require('which')\nconst fs = require('@npmcli/fs')\n\n// Patch the global fs module here at the app level\nrequire('graceful-fs').gracefulify(require('fs'))\n\nconst { definitions, flatten, shorthands } = require('./utils/config/index.js')\nconst usage = require('./utils/npm-usage.js')\nconst LogFile = require('./utils/log-file.js')\nconst Timers = require('./utils/timers.js')\nconst Display = require('./utils/display.js')\nconst log = require('./utils/log-shim')\nconst replaceInfo = require('./utils/replace-info.js')\nconst updateNotifier = require('./utils/update-notifier.js')\nconst pkg = require('../package.json')\nconst cmdList = require('./utils/cmd-list.js')\n\nlet warnedNonDashArg = false\nconst _load = Symbol('_load')\n\nclass Npm extends EventEmitter {\n  static get version () {\n    return pkg.version\n  }\n\n  command = null\n  updateNotification = null\n  loadErr = null\n  argv = []\n\n  #loadPromise = null\n  #tmpFolder = null\n  #title = 'npm'\n  #argvClean = []\n  #chalk = null\n\n  #logFile = new LogFile()\n  #display = new Display()\n  #timers = new Timers({\n    start: 'npm',\n    listener: (name, ms) => {\n      const args = ['timing', name, `Completed in ${ms}ms`]\n      this.#logFile.log(...args)\n      this.#display.log(...args)\n    },\n  })\n\n  config = new Config({\n    npmPath: dirname(__dirname),\n    definitions,\n    flatten,\n    shorthands,\n  })\n\n  get version () {\n    return this.constructor.version\n  }\n\n  deref (c) {\n    if (!c) {\n      return\n    }\n    if (c.match(/[A-Z]/)) {\n      c = c.replace(/([A-Z])/g, m => '-' + m.toLowerCase())\n    }\n    if (cmdList.plumbing.indexOf(c) !== -1) {\n      return c\n    }\n    // first deref the abbrev, if there is one\n    // then resolve any aliases\n    // so `npm install-cl` will resolve to `install-clean` then to `ci`\n    let a = cmdList.abbrevs[c]\n    while (cmdList.aliases[a]) {\n      a = cmdList.aliases[a]\n    }\n    return a\n  }\n\n  // Get an instantiated npm command\n  // npm.command is already taken as the currently running command, a refactor\n  // would be needed to change this\n  async cmd (cmd) {\n    await this.load()\n    const command = this.deref(cmd)\n    if (!command) {\n      throw Object.assign(new Error(`Unknown command ${cmd}`), {\n        code: 'EUNKNOWNCOMMAND',\n      })\n    }\n    const Impl = require(`./commands/${command}.js`)\n    const impl = new Impl(this)\n    return impl\n  }\n\n  // Call an npm command\n  async exec (cmd, args) {\n    const command = await this.cmd(cmd)\n    const timeEnd = this.time(`command:${cmd}`)\n\n    // since 'test', 'start', 'stop', etc. commands re-enter this function\n    // to call the run-script command, we need to only set it one time.\n    if (!this.command) {\n      process.env.npm_command = command.name\n      this.command = command.name\n      this.commandInstance = command\n    }\n\n    // this is async but we dont await it, since its ok if it doesnt\n    // finish before the command finishes running. it uses command and argv\n    // so it must be initiated here, after the command name is set\n    updateNotifier(this).then((msg) => (this.updateNotification = msg))\n\n    // Options are prefixed by a hyphen-minus (-, \\u2d).\n    // Other dash-type chars look similar but are invalid.\n    if (!warnedNonDashArg) {\n      args\n        .filter(arg => /^[\\u2010-\\u2015\\u2212\\uFE58\\uFE63\\uFF0D]/.test(arg))\n        .forEach(arg => {\n          warnedNonDashArg = true\n          log.error(\n            'arg',\n            'Argument starts with non-ascii dash, this is probably invalid:',\n            arg\n          )\n        })\n    }\n\n    const workspacesEnabled = this.config.get('workspaces')\n    // if cwd is a workspace, the default is set to [that workspace]\n    const implicitWorkspace = this.config.get('workspace', 'default').length > 0\n    const workspacesFilters = this.config.get('workspace')\n    const includeWorkspaceRoot = this.config.get('include-workspace-root')\n    // only call execWorkspaces when we have workspaces explicitly set\n    // or when it is implicit and not in our ignore list\n    const hasWorkspaceFilters = workspacesFilters.length > 0\n    const invalidWorkspaceConfig = workspacesEnabled === false && hasWorkspaceFilters\n\n    // (-ws || -w foo) && (cwd is not a workspace || command is not ignoring implicit workspaces)\n    const filterByWorkspaces = (workspacesEnabled || hasWorkspaceFilters) &&\n      (!implicitWorkspace || !command.ignoreImplicitWorkspace)\n    // normally this would go in the constructor, but our tests don't\n    // actually use a real npm object so this.npm.config isn't always\n    // populated.  this is the compromise until we can make that a reality\n    // and then move this into the constructor.\n    command.workspaces = workspacesEnabled\n    command.workspacePaths = null\n    // normally this would be evaluated in base-command#setWorkspaces, see\n    // above for explanation\n    command.includeWorkspaceRoot = includeWorkspaceRoot\n\n    let execPromise = Promise.resolve()\n    if (this.config.get('usage')) {\n      this.output(command.usage)\n    } else if (invalidWorkspaceConfig) {\n      execPromise = Promise.reject(\n        new Error('Can not use --no-workspaces and --workspace at the same time'))\n    } else if (filterByWorkspaces) {\n      if (this.global) {\n        execPromise = Promise.reject(new Error('Workspaces not supported for global packages'))\n      } else {\n        execPromise = command.execWorkspaces(args, workspacesFilters)\n      }\n    } else {\n      execPromise = command.exec(args)\n    }\n\n    return execPromise.finally(timeEnd)\n  }\n\n  async load () {\n    if (!this.#loadPromise) {\n      this.#loadPromise = this.time('npm:load', () => this[_load]().catch(er => er).then((er) => {\n        this.loadErr = er\n        if (!er) {\n          if (this.config.get('force')) {\n            log.warn('using --force', 'Recommended protections disabled.')\n          }\n        } else {\n          throw er\n        }\n      }))\n    }\n    return this.#loadPromise\n  }\n\n  get loaded () {\n    return this.config.loaded\n  }\n\n  // This gets called at the end of the exit handler and\n  // during any tests to cleanup all of our listeners\n  // Everything in here should be synchronous\n  unload () {\n    this.#timers.off()\n    this.#display.off()\n    this.#logFile.off()\n  }\n\n  time (name, fn) {\n    return this.#timers.time(name, fn)\n  }\n\n  writeTimingFile () {\n    this.#timers.writeFile({\n      command: this.#argvClean,\n      // We used to only ever report a single log file\n      // so to be backwards compatible report the last logfile\n      // XXX: remove this in npm 9 or just keep it forever\n      logfile: this.logFiles[this.logFiles.length - 1],\n      logfiles: this.logFiles,\n      version: this.version,\n    })\n  }\n\n  get title () {\n    return this.#title\n  }\n\n  set title (t) {\n    process.title = t\n    this.#title = t\n  }\n\n  async [_load] () {\n    const node = this.time('npm:load:whichnode', () => {\n      try {\n        return which.sync(process.argv[0])\n      } catch {} // TODO should we throw here?\n    })\n\n    if (node && node.toUpperCase() !== process.execPath.toUpperCase()) {\n      log.verbose('node symlink', node)\n      process.execPath = node\n      this.config.execPath = node\n    }\n\n    await this.time('npm:load:configload', () => this.config.load())\n\n    // mkdir this separately since the logs dir can be set to\n    // a different location. if this fails, then we don't have\n    // a cache dir, but we don't want to fail immediately since\n    // the command might not need a cache dir (like `npm --version`)\n    await this.time('npm:load:mkdirpcache', () =>\n      fs.mkdir(this.cache, { recursive: true, owner: 'inherit' })\n        .catch((e) => log.verbose('cache', `could not create cache: ${e}`)))\n\n    // its ok if this fails. user might have specified an invalid dir\n    // which we will tell them about at the end\n    await this.time('npm:load:mkdirplogs', () =>\n      fs.mkdir(this.logsDir, { recursive: true, owner: 'inherit' })\n        .catch((e) => log.verbose('logfile', `could not create logs-dir: ${e}`)))\n\n    // note: this MUST be shorter than the actual argv length, because it\n    // uses the same memory, so node will truncate it if it's too long.\n    this.time('npm:load:setTitle', () => {\n      const { parsedArgv: { cooked, remain } } = this.config\n      this.argv = remain\n      // Secrets are mostly in configs, so title is set using only the positional args\n      // to keep those from being leaked.\n      this.title = ['npm'].concat(replaceInfo(remain)).join(' ').trim()\n      // The cooked argv is also logged separately for debugging purposes. It is\n      // cleaned as a best effort by replacing known secrets like basic auth\n      // password and strings that look like npm tokens. XXX: for this to be\n      // safer the config should create a sanitized version of the argv as it\n      // has the full context of what each option contains.\n      this.#argvClean = replaceInfo(cooked)\n      log.verbose('title', this.title)\n      log.verbose('argv', this.#argvClean.map(JSON.stringify).join(' '))\n    })\n\n    this.time('npm:load:display', () => {\n      this.#display.load({\n        // Use logColor since that is based on stderr\n        color: this.logColor,\n        progress: this.flatOptions.progress,\n        silent: this.silent,\n        timing: this.config.get('timing'),\n        loglevel: this.config.get('loglevel'),\n        unicode: this.config.get('unicode'),\n        heading: this.config.get('heading'),\n      })\n      process.env.COLOR = this.color ? '1' : '0'\n    })\n\n    this.time('npm:load:logFile', () => {\n      this.#logFile.load({\n        dir: this.logsDir,\n        logsMax: this.config.get('logs-max'),\n      })\n      log.verbose('logfile', this.#logFile.files[0] || 'no logfile created')\n    })\n\n    this.time('npm:load:timers', () =>\n      this.#timers.load({\n        dir: this.config.get('timing') ? this.timingDir : null,\n      })\n    )\n\n    this.time('npm:load:configScope', () => {\n      const configScope = this.config.get('scope')\n      if (configScope && !/^@/.test(configScope)) {\n        this.config.set('scope', `@${configScope}`, this.config.find('scope'))\n      }\n    })\n  }\n\n  get flatOptions () {\n    const { flat } = this.config\n    if (this.command) {\n      flat.npmCommand = this.command\n    }\n    return flat\n  }\n\n  // color and logColor are a special derived values that takes into\n  // consideration not only the config, but whether or not we are operating\n  // in a tty with the associated output (stdout/stderr)\n  get color () {\n    return this.flatOptions.color\n  }\n\n  get chalk () {\n    if (!this.#chalk) {\n      let level = chalk.level\n      if (!this.color) {\n        level = 0\n      }\n      this.#chalk = new chalk.Instance({ level })\n    }\n    return this.#chalk\n  }\n\n  get global () {\n    return this.config.get('global') || this.config.get('location') === 'global'\n  }\n\n  get logColor () {\n    return this.flatOptions.logColor\n  }\n\n  get silent () {\n    return this.flatOptions.silent\n  }\n\n  get lockfileVersion () {\n    return 2\n  }\n\n  get unfinishedTimers () {\n    return this.#timers.unfinished\n  }\n\n  get finishedTimers () {\n    return this.#timers.finished\n  }\n\n  get started () {\n    return this.#timers.started\n  }\n\n  get logFiles () {\n    return this.#logFile.files\n  }\n\n  get logsDir () {\n    return this.config.get('logs-dir') || join(this.cache, '_logs')\n  }\n\n  get timingFile () {\n    return this.#timers.file\n  }\n\n  get timingDir () {\n    // XXX(npm9): make this always in logs-dir\n    return this.config.get('logs-dir') || this.cache\n  }\n\n  get cache () {\n    return this.config.get('cache')\n  }\n\n  set cache (r) {\n    this.config.set('cache', r)\n  }\n\n  get globalPrefix () {\n    return this.config.globalPrefix\n  }\n\n  set globalPrefix (r) {\n    this.config.globalPrefix = r\n  }\n\n  get localPrefix () {\n    return this.config.localPrefix\n  }\n\n  set localPrefix (r) {\n    this.config.localPrefix = r\n  }\n\n  get globalDir () {\n    return process.platform !== 'win32'\n      ? resolve(this.globalPrefix, 'lib', 'node_modules')\n      : resolve(this.globalPrefix, 'node_modules')\n  }\n\n  get localDir () {\n    return resolve(this.localPrefix, 'node_modules')\n  }\n\n  get dir () {\n    return this.global ? this.globalDir : this.localDir\n  }\n\n  get globalBin () {\n    const b = this.globalPrefix\n    return process.platform !== 'win32' ? resolve(b, 'bin') : b\n  }\n\n  get localBin () {\n    return resolve(this.dir, '.bin')\n  }\n\n  get bin () {\n    return this.global ? this.globalBin : this.localBin\n  }\n\n  get prefix () {\n    return this.global ? this.globalPrefix : this.localPrefix\n  }\n\n  set prefix (r) {\n    const k = this.global ? 'globalPrefix' : 'localPrefix'\n    this[k] = r\n  }\n\n  get usage () {\n    return usage(this)\n  }\n\n  // XXX add logging to see if we actually use this\n  get tmp () {\n    if (!this.#tmpFolder) {\n      const rand = require('crypto').randomBytes(4).toString('hex')\n      this.#tmpFolder = `npm-${process.pid}-${rand}`\n    }\n    return resolve(this.config.get('tmp'), this.#tmpFolder)\n  }\n\n  // output to stdout in a progress bar compatible way\n  output (...msg) {\n    log.clearProgress()\n    // eslint-disable-next-line no-console\n    console.log(...msg)\n    log.showProgress()\n  }\n\n  outputError (...msg) {\n    log.clearProgress()\n    // eslint-disable-next-line no-console\n    console.error(...msg)\n    log.showProgress()\n  }\n}\nmodule.exports = Npm\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}