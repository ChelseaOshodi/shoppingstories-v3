{"ast":null,"code":"const debug = require('./debug');\n\nconst utils = require('./utils');\n\nconst tableLayout = require('./layout-manager');\n\nclass Table extends Array {\n  constructor(opts) {\n    super();\n    const options = utils.mergeOptions(opts);\n    Object.defineProperty(this, 'options', {\n      value: options,\n      enumerable: options.debug\n    });\n\n    if (options.debug) {\n      switch (typeof options.debug) {\n        case 'boolean':\n          debug.setDebugLevel(debug.WARN);\n          break;\n\n        case 'number':\n          debug.setDebugLevel(options.debug);\n          break;\n\n        case 'string':\n          debug.setDebugLevel(parseInt(options.debug, 10));\n          break;\n\n        default:\n          debug.setDebugLevel(debug.WARN);\n          debug.warn(`Debug option is expected to be boolean, number, or string. Received a ${typeof options.debug}`);\n      }\n\n      Object.defineProperty(this, 'messages', {\n        get() {\n          return debug.debugMessages();\n        }\n\n      });\n    }\n  }\n\n  toString() {\n    let array = this;\n    let headersPresent = this.options.head && this.options.head.length;\n\n    if (headersPresent) {\n      array = [this.options.head];\n\n      if (this.length) {\n        array.push.apply(array, this);\n      }\n    } else {\n      this.options.style.head = [];\n    }\n\n    let cells = tableLayout.makeTableLayout(array);\n    cells.forEach(function (row) {\n      row.forEach(function (cell) {\n        cell.mergeTableOptions(this.options, cells);\n      }, this);\n    }, this);\n    tableLayout.computeWidths(this.options.colWidths, cells);\n    tableLayout.computeHeights(this.options.rowHeights, cells);\n    cells.forEach(function (row) {\n      row.forEach(function (cell) {\n        cell.init(this.options);\n      }, this);\n    }, this);\n    let result = [];\n\n    for (let rowIndex = 0; rowIndex < cells.length; rowIndex++) {\n      let row = cells[rowIndex];\n      let heightOfRow = this.options.rowHeights[rowIndex];\n\n      if (rowIndex === 0 || !this.options.style.compact || rowIndex == 1 && headersPresent) {\n        doDraw(row, 'top', result);\n      }\n\n      for (let lineNum = 0; lineNum < heightOfRow; lineNum++) {\n        doDraw(row, lineNum, result);\n      }\n\n      if (rowIndex + 1 == cells.length) {\n        doDraw(row, 'bottom', result);\n      }\n    }\n\n    return result.join('\\n');\n  }\n\n  get width() {\n    let str = this.toString().split('\\n');\n    return str[0].length;\n  }\n\n}\n\nTable.reset = () => debug.reset();\n\nfunction doDraw(row, lineNum, result) {\n  let line = [];\n  row.forEach(function (cell) {\n    line.push(cell.draw(lineNum));\n  });\n  let str = line.join('');\n  if (str.length) result.push(str);\n}\n\nmodule.exports = Table;","map":{"version":3,"names":["debug","require","utils","tableLayout","Table","Array","constructor","opts","options","mergeOptions","Object","defineProperty","value","enumerable","setDebugLevel","WARN","parseInt","warn","get","debugMessages","toString","array","headersPresent","head","length","push","apply","style","cells","makeTableLayout","forEach","row","cell","mergeTableOptions","computeWidths","colWidths","computeHeights","rowHeights","init","result","rowIndex","heightOfRow","compact","doDraw","lineNum","join","width","str","split","reset","line","draw","module","exports"],"sources":["/Users/chelsea/Documents/0_AllCoding/shoppingstories-v3/node_modules/npm/node_modules/cli-table3/src/table.js"],"sourcesContent":["const debug = require('./debug');\nconst utils = require('./utils');\nconst tableLayout = require('./layout-manager');\n\nclass Table extends Array {\n  constructor(opts) {\n    super();\n\n    const options = utils.mergeOptions(opts);\n    Object.defineProperty(this, 'options', {\n      value: options,\n      enumerable: options.debug,\n    });\n\n    if (options.debug) {\n      switch (typeof options.debug) {\n        case 'boolean':\n          debug.setDebugLevel(debug.WARN);\n          break;\n        case 'number':\n          debug.setDebugLevel(options.debug);\n          break;\n        case 'string':\n          debug.setDebugLevel(parseInt(options.debug, 10));\n          break;\n        default:\n          debug.setDebugLevel(debug.WARN);\n          debug.warn(`Debug option is expected to be boolean, number, or string. Received a ${typeof options.debug}`);\n      }\n      Object.defineProperty(this, 'messages', {\n        get() {\n          return debug.debugMessages();\n        },\n      });\n    }\n  }\n\n  toString() {\n    let array = this;\n    let headersPresent = this.options.head && this.options.head.length;\n    if (headersPresent) {\n      array = [this.options.head];\n      if (this.length) {\n        array.push.apply(array, this);\n      }\n    } else {\n      this.options.style.head = [];\n    }\n\n    let cells = tableLayout.makeTableLayout(array);\n\n    cells.forEach(function (row) {\n      row.forEach(function (cell) {\n        cell.mergeTableOptions(this.options, cells);\n      }, this);\n    }, this);\n\n    tableLayout.computeWidths(this.options.colWidths, cells);\n    tableLayout.computeHeights(this.options.rowHeights, cells);\n\n    cells.forEach(function (row) {\n      row.forEach(function (cell) {\n        cell.init(this.options);\n      }, this);\n    }, this);\n\n    let result = [];\n\n    for (let rowIndex = 0; rowIndex < cells.length; rowIndex++) {\n      let row = cells[rowIndex];\n      let heightOfRow = this.options.rowHeights[rowIndex];\n\n      if (rowIndex === 0 || !this.options.style.compact || (rowIndex == 1 && headersPresent)) {\n        doDraw(row, 'top', result);\n      }\n\n      for (let lineNum = 0; lineNum < heightOfRow; lineNum++) {\n        doDraw(row, lineNum, result);\n      }\n\n      if (rowIndex + 1 == cells.length) {\n        doDraw(row, 'bottom', result);\n      }\n    }\n\n    return result.join('\\n');\n  }\n\n  get width() {\n    let str = this.toString().split('\\n');\n    return str[0].length;\n  }\n}\n\nTable.reset = () => debug.reset();\n\nfunction doDraw(row, lineNum, result) {\n  let line = [];\n  row.forEach(function (cell) {\n    line.push(cell.draw(lineNum));\n  });\n  let str = line.join('');\n  if (str.length) result.push(str);\n}\n\nmodule.exports = Table;\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}