{"ast":null,"code":"// helper function to output a clearer visualization\n// of the current node and its descendents\nconst localeCompare = require('@isaacs/string-locale-compare')('en');\n\nconst util = require('util');\n\nconst relpath = require('./relpath.js');\n\nclass ArboristNode {\n  constructor(tree, path) {\n    this.name = tree.name;\n\n    if (tree.packageName && tree.packageName !== this.name) {\n      this.packageName = tree.packageName;\n    }\n\n    if (tree.version) {\n      this.version = tree.version;\n    }\n\n    this.location = tree.location;\n    this.path = tree.path;\n\n    if (tree.realpath !== this.path) {\n      this.realpath = tree.realpath;\n    }\n\n    if (tree.resolved !== null) {\n      this.resolved = tree.resolved;\n    }\n\n    if (tree.extraneous) {\n      this.extraneous = true;\n    }\n\n    if (tree.dev) {\n      this.dev = true;\n    }\n\n    if (tree.optional) {\n      this.optional = true;\n    }\n\n    if (tree.devOptional && !tree.dev && !tree.optional) {\n      this.devOptional = true;\n    }\n\n    if (tree.peer) {\n      this.peer = true;\n    }\n\n    if (tree.inBundle) {\n      this.bundled = true;\n    }\n\n    if (tree.inDepBundle) {\n      this.bundler = tree.getBundler().location;\n    }\n\n    if (tree.isProjectRoot) {\n      this.isProjectRoot = true;\n    }\n\n    if (tree.isWorkspace) {\n      this.isWorkspace = true;\n    }\n\n    const bd = tree.package && tree.package.bundleDependencies;\n\n    if (bd && bd.length) {\n      this.bundleDependencies = bd;\n    }\n\n    if (tree.inShrinkwrap) {\n      this.inShrinkwrap = true;\n    } else if (tree.hasShrinkwrap) {\n      this.hasShrinkwrap = true;\n    }\n\n    if (tree.error) {\n      this.error = treeError(tree.error);\n    }\n\n    if (tree.errors && tree.errors.length) {\n      this.errors = tree.errors.map(treeError);\n    }\n\n    if (tree.overrides) {\n      this.overrides = new Map([...tree.overrides.ruleset.values()].map(override => [override.key, override.value]));\n    } // edgesOut sorted by name\n\n\n    if (tree.edgesOut.size) {\n      this.edgesOut = new Map([...tree.edgesOut.entries()].sort((_ref, _ref2) => {\n        let [a] = _ref;\n        let [b] = _ref2;\n        return localeCompare(a, b);\n      }).map(_ref3 => {\n        let [name, edge] = _ref3;\n        return [name, new EdgeOut(edge)];\n      }));\n    } // edgesIn sorted by location\n\n\n    if (tree.edgesIn.size) {\n      this.edgesIn = new Set([...tree.edgesIn].sort((a, b) => localeCompare(a.from.location, b.from.location)).map(edge => new EdgeIn(edge)));\n    }\n\n    if (tree.workspaces && tree.workspaces.size) {\n      this.workspaces = new Map([...tree.workspaces.entries()].map(_ref4 => {\n        let [name, path] = _ref4;\n        return [name, relpath(tree.root.realpath, path)];\n      }));\n    } // fsChildren sorted by path\n\n\n    if (tree.fsChildren.size) {\n      this.fsChildren = new Set([...tree.fsChildren].sort((_ref5, _ref6) => {\n        let {\n          path: a\n        } = _ref5;\n        let {\n          path: b\n        } = _ref6;\n        return localeCompare(a, b);\n      }).map(tree => printableTree(tree, path)));\n    } // children sorted by name\n\n\n    if (tree.children.size) {\n      this.children = new Map([...tree.children.entries()].sort((_ref7, _ref8) => {\n        let [a] = _ref7;\n        let [b] = _ref8;\n        return localeCompare(a, b);\n      }).map(_ref9 => {\n        let [name, tree] = _ref9;\n        return [name, printableTree(tree, path)];\n      }));\n    }\n  }\n\n}\n\nclass ArboristVirtualNode extends ArboristNode {\n  constructor(tree, path) {\n    super(tree, path);\n    this.sourceReference = printableTree(tree.sourceReference, path);\n  }\n\n}\n\nclass ArboristLink extends ArboristNode {\n  constructor(tree, path) {\n    super(tree, path);\n    this.target = printableTree(tree.target, path);\n  }\n\n}\n\nconst treeError = _ref10 => {\n  let {\n    code,\n    path\n  } = _ref10;\n  return {\n    code,\n    ...(path ? {\n      path\n    } : {})\n  };\n}; // print out edges without dumping the full node all over again\n// this base class will toJSON as a plain old object, but the\n// util.inspect() output will be a bit cleaner\n\n\nclass Edge {\n  constructor(edge) {\n    this.type = edge.type;\n    this.name = edge.name;\n    this.spec = edge.rawSpec || '*';\n\n    if (edge.rawSpec !== edge.spec) {\n      this.override = edge.spec;\n    }\n\n    if (edge.error) {\n      this.error = edge.error;\n    }\n\n    if (edge.peerConflicted) {\n      this.peerConflicted = edge.peerConflicted;\n    }\n  }\n\n} // don't care about 'from' for edges out\n\n\nclass EdgeOut extends Edge {\n  constructor(edge) {\n    super(edge);\n    this.to = edge.to && edge.to.location;\n  }\n\n  [util.inspect.custom]() {\n    return `{ ${this.type} ${this.name}@${this.spec}${this.override ? ` overridden:${this.override}` : ''}${this.to ? ' -> ' + this.to : ''}${this.error ? ' ' + this.error : ''}${this.peerConflicted ? ' peerConflicted' : ''} }`;\n  }\n\n} // don't care about 'to' for edges in\n\n\nclass EdgeIn extends Edge {\n  constructor(edge) {\n    super(edge);\n    this.from = edge.from && edge.from.location;\n  }\n\n  [util.inspect.custom]() {\n    return `{ ${this.from || '\"\"'} ${this.type} ${this.name}@${this.spec}${this.error ? ' ' + this.error : ''}${this.peerConflicted ? ' peerConflicted' : ''} }`;\n  }\n\n}\n\nconst printableTree = function (tree) {\n  let path = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];\n\n  if (!tree) {\n    return tree;\n  }\n\n  const Cls = tree.isLink ? ArboristLink : tree.sourceReference ? ArboristVirtualNode : ArboristNode;\n\n  if (path.includes(tree)) {\n    const obj = Object.create(Cls.prototype);\n    return Object.assign(obj, {\n      location: tree.location\n    });\n  }\n\n  path.push(tree);\n  return new Cls(tree, path);\n};\n\nmodule.exports = printableTree;","map":{"version":3,"names":["localeCompare","require","util","relpath","ArboristNode","constructor","tree","path","name","packageName","version","location","realpath","resolved","extraneous","dev","optional","devOptional","peer","inBundle","bundled","inDepBundle","bundler","getBundler","isProjectRoot","isWorkspace","bd","package","bundleDependencies","length","inShrinkwrap","hasShrinkwrap","error","treeError","errors","map","overrides","Map","ruleset","values","override","key","value","edgesOut","size","entries","sort","a","b","edge","EdgeOut","edgesIn","Set","from","EdgeIn","workspaces","root","fsChildren","printableTree","children","ArboristVirtualNode","sourceReference","ArboristLink","target","code","Edge","type","spec","rawSpec","peerConflicted","to","inspect","custom","Cls","isLink","includes","obj","Object","create","prototype","assign","push","module","exports"],"sources":["/Users/chelsea/Documents/0_AllCoding/shoppingstories-v3/node_modules/npm/node_modules/@npmcli/arborist/lib/printable.js"],"sourcesContent":["// helper function to output a clearer visualization\n// of the current node and its descendents\nconst localeCompare = require('@isaacs/string-locale-compare')('en')\nconst util = require('util')\nconst relpath = require('./relpath.js')\n\nclass ArboristNode {\n  constructor (tree, path) {\n    this.name = tree.name\n    if (tree.packageName && tree.packageName !== this.name) {\n      this.packageName = tree.packageName\n    }\n    if (tree.version) {\n      this.version = tree.version\n    }\n    this.location = tree.location\n    this.path = tree.path\n    if (tree.realpath !== this.path) {\n      this.realpath = tree.realpath\n    }\n    if (tree.resolved !== null) {\n      this.resolved = tree.resolved\n    }\n    if (tree.extraneous) {\n      this.extraneous = true\n    }\n    if (tree.dev) {\n      this.dev = true\n    }\n    if (tree.optional) {\n      this.optional = true\n    }\n    if (tree.devOptional && !tree.dev && !tree.optional) {\n      this.devOptional = true\n    }\n    if (tree.peer) {\n      this.peer = true\n    }\n    if (tree.inBundle) {\n      this.bundled = true\n    }\n    if (tree.inDepBundle) {\n      this.bundler = tree.getBundler().location\n    }\n    if (tree.isProjectRoot) {\n      this.isProjectRoot = true\n    }\n    if (tree.isWorkspace) {\n      this.isWorkspace = true\n    }\n    const bd = tree.package && tree.package.bundleDependencies\n    if (bd && bd.length) {\n      this.bundleDependencies = bd\n    }\n    if (tree.inShrinkwrap) {\n      this.inShrinkwrap = true\n    } else if (tree.hasShrinkwrap) {\n      this.hasShrinkwrap = true\n    }\n    if (tree.error) {\n      this.error = treeError(tree.error)\n    }\n    if (tree.errors && tree.errors.length) {\n      this.errors = tree.errors.map(treeError)\n    }\n\n    if (tree.overrides) {\n      this.overrides = new Map([...tree.overrides.ruleset.values()]\n        .map((override) => [override.key, override.value]))\n    }\n\n    // edgesOut sorted by name\n    if (tree.edgesOut.size) {\n      this.edgesOut = new Map([...tree.edgesOut.entries()]\n        .sort(([a], [b]) => localeCompare(a, b))\n        .map(([name, edge]) => [name, new EdgeOut(edge)]))\n    }\n\n    // edgesIn sorted by location\n    if (tree.edgesIn.size) {\n      this.edgesIn = new Set([...tree.edgesIn]\n        .sort((a, b) => localeCompare(a.from.location, b.from.location))\n        .map(edge => new EdgeIn(edge)))\n    }\n\n    if (tree.workspaces && tree.workspaces.size) {\n      this.workspaces = new Map([...tree.workspaces.entries()]\n        .map(([name, path]) => [name, relpath(tree.root.realpath, path)]))\n    }\n\n    // fsChildren sorted by path\n    if (tree.fsChildren.size) {\n      this.fsChildren = new Set([...tree.fsChildren]\n        .sort(({ path: a }, { path: b }) => localeCompare(a, b))\n        .map(tree => printableTree(tree, path)))\n    }\n\n    // children sorted by name\n    if (tree.children.size) {\n      this.children = new Map([...tree.children.entries()]\n        .sort(([a], [b]) => localeCompare(a, b))\n        .map(([name, tree]) => [name, printableTree(tree, path)]))\n    }\n  }\n}\n\nclass ArboristVirtualNode extends ArboristNode {\n  constructor (tree, path) {\n    super(tree, path)\n    this.sourceReference = printableTree(tree.sourceReference, path)\n  }\n}\n\nclass ArboristLink extends ArboristNode {\n  constructor (tree, path) {\n    super(tree, path)\n    this.target = printableTree(tree.target, path)\n  }\n}\n\nconst treeError = ({ code, path }) => ({\n  code,\n  ...(path ? { path } : {}),\n})\n\n// print out edges without dumping the full node all over again\n// this base class will toJSON as a plain old object, but the\n// util.inspect() output will be a bit cleaner\nclass Edge {\n  constructor (edge) {\n    this.type = edge.type\n    this.name = edge.name\n    this.spec = edge.rawSpec || '*'\n    if (edge.rawSpec !== edge.spec) {\n      this.override = edge.spec\n    }\n    if (edge.error) {\n      this.error = edge.error\n    }\n    if (edge.peerConflicted) {\n      this.peerConflicted = edge.peerConflicted\n    }\n  }\n}\n\n// don't care about 'from' for edges out\nclass EdgeOut extends Edge {\n  constructor (edge) {\n    super(edge)\n    this.to = edge.to && edge.to.location\n  }\n\n  [util.inspect.custom] () {\n    return `{ ${this.type} ${this.name}@${this.spec}${\n      this.override ? ` overridden:${this.override}` : ''\n    }${\n      this.to ? ' -> ' + this.to : ''\n    }${\n      this.error ? ' ' + this.error : ''\n    }${\n      this.peerConflicted ? ' peerConflicted' : ''\n    } }`\n  }\n}\n\n// don't care about 'to' for edges in\nclass EdgeIn extends Edge {\n  constructor (edge) {\n    super(edge)\n    this.from = edge.from && edge.from.location\n  }\n\n  [util.inspect.custom] () {\n    return `{ ${this.from || '\"\"'} ${this.type} ${this.name}@${this.spec}${\n      this.error ? ' ' + this.error : ''\n    }${\n      this.peerConflicted ? ' peerConflicted' : ''\n    } }`\n  }\n}\n\nconst printableTree = (tree, path = []) => {\n  if (!tree) {\n    return tree\n  }\n\n  const Cls = tree.isLink ? ArboristLink\n    : tree.sourceReference ? ArboristVirtualNode\n    : ArboristNode\n  if (path.includes(tree)) {\n    const obj = Object.create(Cls.prototype)\n    return Object.assign(obj, { location: tree.location })\n  }\n  path.push(tree)\n  return new Cls(tree, path)\n}\n\nmodule.exports = printableTree\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}