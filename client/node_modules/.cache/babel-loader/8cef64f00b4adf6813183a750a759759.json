{"ast":null,"code":"const profile = require('npm-profile');\n\nconst log = require('../utils/log-shim');\n\nconst openUrlPrompt = require('../utils/open-url-prompt.js');\n\nconst read = require('../utils/read-user-info.js');\n\nconst loginPrompter = async creds => {\n  creds.username = await read.username('Username:', creds.username);\n  creds.password = await read.password('Password:', creds.password);\n  creds.email = await read.email('Email: (this IS public) ', creds.email);\n  return creds;\n};\n\nconst login = async (npm, opts) => {\n  let res;\n\n  const requestOTP = async () => {\n    const otp = await read.otp('Enter one-time password: ');\n    return profile.loginCouch(opts.creds.username, opts.creds.password, { ...opts,\n      otp\n    });\n  };\n\n  const addNewUser = async () => {\n    let newUser;\n\n    try {\n      newUser = await profile.adduserCouch(opts.creds.username, opts.creds.email, opts.creds.password, opts);\n    } catch (err) {\n      if (err.code === 'EOTP') {\n        newUser = await requestOTP();\n      } else {\n        throw err;\n      }\n    }\n\n    return newUser;\n  };\n\n  const openerPromise = (url, emitter) => openUrlPrompt(npm, url, 'Authenticate your account at', 'Press ENTER to open in the browser...', emitter);\n\n  try {\n    res = await profile.login(openerPromise, loginPrompter, opts);\n  } catch (err) {\n    const needsMoreInfo = !(opts && opts.creds && opts.creds.username && opts.creds.password && opts.creds.email);\n\n    if (err.code === 'EOTP') {\n      res = await requestOTP();\n    } else if (needsMoreInfo) {\n      throw err;\n    } else {\n      // TODO: maybe this needs to check for err.code === 'E400' instead?\n      res = await addNewUser();\n    }\n  }\n\n  const newCreds = {};\n\n  if (res && res.token) {\n    newCreds.token = res.token;\n  } else {\n    newCreds.username = opts.creds.username;\n    newCreds.password = opts.creds.password;\n    newCreds.email = opts.creds.email;\n    newCreds.alwaysAuth = opts.creds.alwaysAuth;\n  }\n\n  const usermsg = opts.creds.username ? ` user ${opts.creds.username}` : '';\n  const scopeMessage = opts.scope ? ` to scope ${opts.scope}` : '';\n  const userout = opts.creds.username ? ` as ${opts.creds.username}` : '';\n  const message = `Logged in${userout}${scopeMessage} on ${opts.registry}.`;\n  log.info('login', `Authorized${usermsg}`);\n  return {\n    message,\n    newCreds\n  };\n};\n\nmodule.exports = login;","map":{"version":3,"names":["profile","require","log","openUrlPrompt","read","loginPrompter","creds","username","password","email","login","npm","opts","res","requestOTP","otp","loginCouch","addNewUser","newUser","adduserCouch","err","code","openerPromise","url","emitter","needsMoreInfo","newCreds","token","alwaysAuth","usermsg","scopeMessage","scope","userout","message","registry","info","module","exports"],"sources":["/Users/chelsea/Documents/0_AllCoding/shoppingstories-v3/node_modules/npm/lib/auth/legacy.js"],"sourcesContent":["const profile = require('npm-profile')\nconst log = require('../utils/log-shim')\nconst openUrlPrompt = require('../utils/open-url-prompt.js')\nconst read = require('../utils/read-user-info.js')\n\nconst loginPrompter = async (creds) => {\n  creds.username = await read.username('Username:', creds.username)\n  creds.password = await read.password('Password:', creds.password)\n  creds.email = await read.email('Email: (this IS public) ', creds.email)\n\n  return creds\n}\n\nconst login = async (npm, opts) => {\n  let res\n\n  const requestOTP = async () => {\n    const otp = await read.otp(\n      'Enter one-time password: '\n    )\n\n    return profile.loginCouch(\n      opts.creds.username,\n      opts.creds.password,\n      { ...opts, otp }\n    )\n  }\n\n  const addNewUser = async () => {\n    let newUser\n\n    try {\n      newUser = await profile.adduserCouch(\n        opts.creds.username,\n        opts.creds.email,\n        opts.creds.password,\n        opts\n      )\n    } catch (err) {\n      if (err.code === 'EOTP') {\n        newUser = await requestOTP()\n      } else {\n        throw err\n      }\n    }\n\n    return newUser\n  }\n\n  const openerPromise = (url, emitter) =>\n    openUrlPrompt(\n      npm,\n      url,\n      'Authenticate your account at',\n      'Press ENTER to open in the browser...',\n      emitter\n    )\n\n  try {\n    res = await profile.login(openerPromise, loginPrompter, opts)\n  } catch (err) {\n    const needsMoreInfo = !(opts &&\n      opts.creds &&\n      opts.creds.username &&\n      opts.creds.password &&\n      opts.creds.email)\n    if (err.code === 'EOTP') {\n      res = await requestOTP()\n    } else if (needsMoreInfo) {\n      throw err\n    } else {\n      // TODO: maybe this needs to check for err.code === 'E400' instead?\n      res = await addNewUser()\n    }\n  }\n\n  const newCreds = {}\n  if (res && res.token) {\n    newCreds.token = res.token\n  } else {\n    newCreds.username = opts.creds.username\n    newCreds.password = opts.creds.password\n    newCreds.email = opts.creds.email\n    newCreds.alwaysAuth = opts.creds.alwaysAuth\n  }\n\n  const usermsg = opts.creds.username ? ` user ${opts.creds.username}` : ''\n  const scopeMessage = opts.scope ? ` to scope ${opts.scope}` : ''\n  const userout = opts.creds.username ? ` as ${opts.creds.username}` : ''\n  const message = `Logged in${userout}${scopeMessage} on ${opts.registry}.`\n\n  log.info('login', `Authorized${usermsg}`)\n\n  return {\n    message,\n    newCreds,\n  }\n}\n\nmodule.exports = login\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}