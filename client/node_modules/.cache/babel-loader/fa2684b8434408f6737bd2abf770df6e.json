{"ast":null,"code":"// XXX: To date, npm Enterprise Legacy is the only system that ever\n// implemented support for this type of login.  A better way to do\n// SSO is to use the WebLogin type of login supported by the npm-login\n// module.  This more forward-looking login style is, ironically,\n// supported by the '--auth-type=legacy' type of login.\n// When and if npm Enterprise Legacy is no longer supported by the npm\n// CLI, we can remove this, and fold the lib/auth/legacy.js back into\n// lib/adduser.js\nconst profile = require('npm-profile');\n\nconst npmFetch = require('npm-registry-fetch');\n\nconst log = require('../utils/log-shim');\n\nconst openUrl = require('../utils/open-url.js');\n\nconst otplease = require('../utils/otplease.js');\n\nconst pollForSession = _ref => {\n  let {\n    registry,\n    token,\n    opts\n  } = _ref;\n  log.info('adduser', 'Polling for validated SSO session');\n  return npmFetch.json('/-/whoami', { ...opts,\n    registry,\n    forceAuth: {\n      token\n    }\n  }).then(_ref2 => {\n    let {\n      username\n    } = _ref2;\n    return username;\n  }, err => {\n    if (err.code === 'E401') {\n      return sleep(opts.ssoPollFrequency).then(() => {\n        return pollForSession({\n          registry,\n          token,\n          opts\n        });\n      });\n    } else {\n      throw err;\n    }\n  });\n};\n\nfunction sleep(time) {\n  return new Promise(resolve => setTimeout(resolve, time));\n}\n\nconst login = async (npm, _ref3) => {\n  let {\n    creds,\n    registry,\n    scope\n  } = _ref3;\n  const opts = { ...npm.flatOptions,\n    creds,\n    registry,\n    scope\n  };\n  const {\n    ssoType\n  } = opts;\n\n  if (!ssoType) {\n    throw new Error('Missing option: sso-type');\n  } // We're reusing the legacy login endpoint, so we need some dummy\n  // stuff here to pass validation. They're never used.\n\n\n  const auth = {\n    username: 'npm_' + ssoType + '_auth_dummy_user',\n    password: 'placeholder',\n    email: 'support@npmjs.com',\n    authType: ssoType\n  };\n  const {\n    token,\n    sso\n  } = await otplease(npm, opts, opts => profile.loginCouch(auth.username, auth.password, opts));\n\n  if (!token) {\n    throw new Error('no SSO token returned');\n  }\n\n  if (!sso) {\n    throw new Error('no SSO URL returned by services');\n  }\n\n  await openUrl(npm, sso, 'to complete your login please visit');\n  const username = await pollForSession({\n    registry,\n    token,\n    opts\n  });\n  log.info('adduser', `Authorized user ${username}`);\n  const scopeMessage = scope ? ' to scope ' + scope : '';\n  const message = `Logged in as ${username}${scopeMessage} on ${registry}.`;\n  return {\n    message,\n    newCreds: {\n      token\n    }\n  };\n};\n\nmodule.exports = login;","map":{"version":3,"names":["profile","require","npmFetch","log","openUrl","otplease","pollForSession","registry","token","opts","info","json","forceAuth","then","username","err","code","sleep","ssoPollFrequency","time","Promise","resolve","setTimeout","login","npm","creds","scope","flatOptions","ssoType","Error","auth","password","email","authType","sso","loginCouch","scopeMessage","message","newCreds","module","exports"],"sources":["/Users/chelsea/Documents/0_AllCoding/shoppingstories-v3/node_modules/npm/lib/auth/sso.js"],"sourcesContent":["// XXX: To date, npm Enterprise Legacy is the only system that ever\n// implemented support for this type of login.  A better way to do\n// SSO is to use the WebLogin type of login supported by the npm-login\n// module.  This more forward-looking login style is, ironically,\n// supported by the '--auth-type=legacy' type of login.\n// When and if npm Enterprise Legacy is no longer supported by the npm\n// CLI, we can remove this, and fold the lib/auth/legacy.js back into\n// lib/adduser.js\n\nconst profile = require('npm-profile')\nconst npmFetch = require('npm-registry-fetch')\nconst log = require('../utils/log-shim')\nconst openUrl = require('../utils/open-url.js')\nconst otplease = require('../utils/otplease.js')\n\nconst pollForSession = ({ registry, token, opts }) => {\n  log.info('adduser', 'Polling for validated SSO session')\n  return npmFetch.json(\n    '/-/whoami', { ...opts, registry, forceAuth: { token } }\n  ).then(\n    ({ username }) => username,\n    err => {\n      if (err.code === 'E401') {\n        return sleep(opts.ssoPollFrequency).then(() => {\n          return pollForSession({ registry, token, opts })\n        })\n      } else {\n        throw err\n      }\n    }\n  )\n}\n\nfunction sleep (time) {\n  return new Promise((resolve) => setTimeout(resolve, time))\n}\n\nconst login = async (npm, { creds, registry, scope }) => {\n  const opts = { ...npm.flatOptions, creds, registry, scope }\n  const { ssoType } = opts\n\n  if (!ssoType) {\n    throw new Error('Missing option: sso-type')\n  }\n\n  // We're reusing the legacy login endpoint, so we need some dummy\n  // stuff here to pass validation. They're never used.\n  const auth = {\n    username: 'npm_' + ssoType + '_auth_dummy_user',\n    password: 'placeholder',\n    email: 'support@npmjs.com',\n    authType: ssoType,\n  }\n\n  const { token, sso } = await otplease(npm, opts,\n    opts => profile.loginCouch(auth.username, auth.password, opts)\n  )\n\n  if (!token) {\n    throw new Error('no SSO token returned')\n  }\n  if (!sso) {\n    throw new Error('no SSO URL returned by services')\n  }\n\n  await openUrl(npm, sso, 'to complete your login please visit')\n\n  const username = await pollForSession({ registry, token, opts })\n\n  log.info('adduser', `Authorized user ${username}`)\n\n  const scopeMessage = scope ? ' to scope ' + scope : ''\n  const message = `Logged in as ${username}${scopeMessage} on ${registry}.`\n\n  return {\n    message,\n    newCreds: { token },\n  }\n}\n\nmodule.exports = login\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}