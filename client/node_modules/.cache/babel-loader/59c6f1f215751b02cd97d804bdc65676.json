{"ast":null,"code":"const {\n  cleanUrl\n} = require('npm-registry-fetch');\n\nconst isString = v => typeof v === 'string'; // split on \\s|= similar to how nopt parses options\n\n\nconst splitAndReplace = str => {\n  // stateful regex, don't move out of this scope\n  const splitChars = /[\\s=]/g;\n  let match = null;\n  let result = '';\n  let index = 0;\n\n  while (match = splitChars.exec(str)) {\n    result += cleanUrl(str.slice(index, match.index)) + match[0];\n    index = splitChars.lastIndex;\n  }\n\n  return result + cleanUrl(str.slice(index));\n}; // replaces auth info in an array of arguments or in a strings\n\n\nfunction replaceInfo(arg) {\n  if (isString(arg)) {\n    return splitAndReplace(arg);\n  } else if (Array.isArray(arg)) {\n    return arg.map(a => isString(a) ? splitAndReplace(a) : a);\n  }\n\n  return arg;\n}\n\nmodule.exports = replaceInfo;","map":{"version":3,"names":["cleanUrl","require","isString","v","splitAndReplace","str","splitChars","match","result","index","exec","slice","lastIndex","replaceInfo","arg","Array","isArray","map","a","module","exports"],"sources":["/Users/chelsea/Documents/0_AllCoding/shoppingstories-v3/node_modules/npm/lib/utils/replace-info.js"],"sourcesContent":["const { cleanUrl } = require('npm-registry-fetch')\nconst isString = (v) => typeof v === 'string'\n\n// split on \\s|= similar to how nopt parses options\nconst splitAndReplace = (str) => {\n  // stateful regex, don't move out of this scope\n  const splitChars = /[\\s=]/g\n\n  let match = null\n  let result = ''\n  let index = 0\n  while (match = splitChars.exec(str)) {\n    result += cleanUrl(str.slice(index, match.index)) + match[0]\n    index = splitChars.lastIndex\n  }\n\n  return result + cleanUrl(str.slice(index))\n}\n\n// replaces auth info in an array of arguments or in a strings\nfunction replaceInfo (arg) {\n  if (isString(arg)) {\n    return splitAndReplace(arg)\n  } else if (Array.isArray(arg)) {\n    return arg.map((a) => isString(a) ? splitAndReplace(a) : a)\n  }\n\n  return arg\n}\n\nmodule.exports = replaceInfo\n"],"mappings":"AAAA,MAAM;EAAEA;AAAF,IAAeC,OAAO,CAAC,oBAAD,CAA5B;;AACA,MAAMC,QAAQ,GAAIC,CAAD,IAAO,OAAOA,CAAP,KAAa,QAArC,C,CAEA;;;AACA,MAAMC,eAAe,GAAIC,GAAD,IAAS;EAC/B;EACA,MAAMC,UAAU,GAAG,QAAnB;EAEA,IAAIC,KAAK,GAAG,IAAZ;EACA,IAAIC,MAAM,GAAG,EAAb;EACA,IAAIC,KAAK,GAAG,CAAZ;;EACA,OAAOF,KAAK,GAAGD,UAAU,CAACI,IAAX,CAAgBL,GAAhB,CAAf,EAAqC;IACnCG,MAAM,IAAIR,QAAQ,CAACK,GAAG,CAACM,KAAJ,CAAUF,KAAV,EAAiBF,KAAK,CAACE,KAAvB,CAAD,CAAR,GAA0CF,KAAK,CAAC,CAAD,CAAzD;IACAE,KAAK,GAAGH,UAAU,CAACM,SAAnB;EACD;;EAED,OAAOJ,MAAM,GAAGR,QAAQ,CAACK,GAAG,CAACM,KAAJ,CAAUF,KAAV,CAAD,CAAxB;AACD,CAbD,C,CAeA;;;AACA,SAASI,WAAT,CAAsBC,GAAtB,EAA2B;EACzB,IAAIZ,QAAQ,CAACY,GAAD,CAAZ,EAAmB;IACjB,OAAOV,eAAe,CAACU,GAAD,CAAtB;EACD,CAFD,MAEO,IAAIC,KAAK,CAACC,OAAN,CAAcF,GAAd,CAAJ,EAAwB;IAC7B,OAAOA,GAAG,CAACG,GAAJ,CAASC,CAAD,IAAOhB,QAAQ,CAACgB,CAAD,CAAR,GAAcd,eAAe,CAACc,CAAD,CAA7B,GAAmCA,CAAlD,CAAP;EACD;;EAED,OAAOJ,GAAP;AACD;;AAEDK,MAAM,CAACC,OAAP,GAAiBP,WAAjB"},"metadata":{},"sourceType":"script"}