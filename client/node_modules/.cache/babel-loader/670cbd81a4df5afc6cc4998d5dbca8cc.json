{"ast":null,"code":"const npa = require('npm-package-arg');\n\nconst semver = require('semver');\n\nclass OverrideSet {\n  constructor(_ref) {\n    let {\n      overrides,\n      key,\n      parent\n    } = _ref;\n    this.parent = parent;\n    this.children = new Map();\n\n    if (typeof overrides === 'string') {\n      overrides = {\n        '.': overrides\n      };\n    } // change a literal empty string to * so we can use truthiness checks on\n    // the value property later\n\n\n    if (overrides['.'] === '') {\n      overrides['.'] = '*';\n    }\n\n    if (parent) {\n      const spec = npa(key);\n\n      if (!spec.name) {\n        throw new Error(`Override without name: ${key}`);\n      }\n\n      this.name = spec.name;\n      spec.name = '';\n      this.key = key;\n      this.keySpec = spec.rawSpec === '' ? '' : spec.toString();\n      this.value = overrides['.'] || this.keySpec;\n    }\n\n    for (const [key, childOverrides] of Object.entries(overrides)) {\n      if (key === '.') {\n        continue;\n      }\n\n      const child = new OverrideSet({\n        parent: this,\n        key,\n        overrides: childOverrides\n      });\n      this.children.set(child.key, child);\n    }\n  }\n\n  getEdgeRule(edge) {\n    for (const rule of this.ruleset.values()) {\n      if (rule.name !== edge.name) {\n        continue;\n      }\n\n      if (rule.keySpec === '' || semver.intersects(edge.spec, rule.keySpec)) {\n        return rule;\n      }\n    }\n\n    return this;\n  }\n\n  getNodeRule(node) {\n    for (const rule of this.ruleset.values()) {\n      if (rule.name !== node.name) {\n        continue;\n      }\n\n      if (rule.keySpec === '' || semver.satisfies(node.version, rule.keySpec) || semver.satisfies(node.version, rule.value)) {\n        return rule;\n      }\n    }\n\n    return this;\n  }\n\n  getMatchingRule(node) {\n    for (const rule of this.ruleset.values()) {\n      if (rule.name !== node.name) {\n        continue;\n      }\n\n      if (rule.keySpec === '' || semver.satisfies(node.version, rule.keySpec) || semver.satisfies(node.version, rule.value)) {\n        return rule;\n      }\n    }\n\n    return null;\n  }\n\n  *ancestry() {\n    for (let ancestor = this; ancestor; ancestor = ancestor.parent) {\n      yield ancestor;\n    }\n  }\n\n  get isRoot() {\n    return !this.parent;\n  }\n\n  get ruleset() {\n    const ruleset = new Map();\n\n    for (const override of this.ancestry()) {\n      for (const kid of override.children.values()) {\n        if (!ruleset.has(kid.key)) {\n          ruleset.set(kid.key, kid);\n        }\n      }\n\n      if (!override.isRoot && !ruleset.has(override.key)) {\n        ruleset.set(override.key, override);\n      }\n    }\n\n    return ruleset;\n  }\n\n}\n\nmodule.exports = OverrideSet;","map":{"version":3,"names":["npa","require","semver","OverrideSet","constructor","overrides","key","parent","children","Map","spec","name","Error","keySpec","rawSpec","toString","value","childOverrides","Object","entries","child","set","getEdgeRule","edge","rule","ruleset","values","intersects","getNodeRule","node","satisfies","version","getMatchingRule","ancestry","ancestor","isRoot","override","kid","has","module","exports"],"sources":["/Users/chelsea/Documents/0_AllCoding/shoppingstories-v3/node_modules/npm/node_modules/@npmcli/arborist/lib/override-set.js"],"sourcesContent":["const npa = require('npm-package-arg')\nconst semver = require('semver')\n\nclass OverrideSet {\n  constructor ({ overrides, key, parent }) {\n    this.parent = parent\n    this.children = new Map()\n\n    if (typeof overrides === 'string') {\n      overrides = { '.': overrides }\n    }\n\n    // change a literal empty string to * so we can use truthiness checks on\n    // the value property later\n    if (overrides['.'] === '') {\n      overrides['.'] = '*'\n    }\n\n    if (parent) {\n      const spec = npa(key)\n      if (!spec.name) {\n        throw new Error(`Override without name: ${key}`)\n      }\n\n      this.name = spec.name\n      spec.name = ''\n      this.key = key\n      this.keySpec = spec.rawSpec === '' ? '' : spec.toString()\n      this.value = overrides['.'] || this.keySpec\n    }\n\n    for (const [key, childOverrides] of Object.entries(overrides)) {\n      if (key === '.') {\n        continue\n      }\n\n      const child = new OverrideSet({\n        parent: this,\n        key,\n        overrides: childOverrides,\n      })\n\n      this.children.set(child.key, child)\n    }\n  }\n\n  getEdgeRule (edge) {\n    for (const rule of this.ruleset.values()) {\n      if (rule.name !== edge.name) {\n        continue\n      }\n\n      if (rule.keySpec === '' ||\n        semver.intersects(edge.spec, rule.keySpec)) {\n        return rule\n      }\n    }\n\n    return this\n  }\n\n  getNodeRule (node) {\n    for (const rule of this.ruleset.values()) {\n      if (rule.name !== node.name) {\n        continue\n      }\n\n      if (rule.keySpec === '' ||\n        semver.satisfies(node.version, rule.keySpec) ||\n        semver.satisfies(node.version, rule.value)) {\n        return rule\n      }\n    }\n\n    return this\n  }\n\n  getMatchingRule (node) {\n    for (const rule of this.ruleset.values()) {\n      if (rule.name !== node.name) {\n        continue\n      }\n\n      if (rule.keySpec === '' ||\n        semver.satisfies(node.version, rule.keySpec) ||\n        semver.satisfies(node.version, rule.value)) {\n        return rule\n      }\n    }\n\n    return null\n  }\n\n  * ancestry () {\n    for (let ancestor = this; ancestor; ancestor = ancestor.parent) {\n      yield ancestor\n    }\n  }\n\n  get isRoot () {\n    return !this.parent\n  }\n\n  get ruleset () {\n    const ruleset = new Map()\n\n    for (const override of this.ancestry()) {\n      for (const kid of override.children.values()) {\n        if (!ruleset.has(kid.key)) {\n          ruleset.set(kid.key, kid)\n        }\n      }\n\n      if (!override.isRoot && !ruleset.has(override.key)) {\n        ruleset.set(override.key, override)\n      }\n    }\n\n    return ruleset\n  }\n}\n\nmodule.exports = OverrideSet\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}