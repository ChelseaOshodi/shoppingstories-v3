{"ast":null,"code":"const opener = require('opener');\n\nconst {\n  URL\n} = require('url'); // attempt to open URL in web-browser, print address otherwise:\n\n\nconst open = async (npm, url, errMsg, isFile) => {\n  url = encodeURI(url);\n  const browser = npm.config.get('browser');\n\n  function printAlternateMsg() {\n    const json = npm.config.get('json');\n    const alternateMsg = json ? JSON.stringify({\n      title: errMsg,\n      url\n    }, null, 2) : `${errMsg}:\\n  ${url}\\n`;\n    npm.output(alternateMsg);\n  }\n\n  if (browser === false) {\n    printAlternateMsg();\n    return;\n  } // We pass this in as true from the help command so we know we don't have to\n  // check the protocol\n\n\n  if (!isFile) {\n    try {\n      if (!/^https?:$/.test(new URL(url).protocol)) {\n        throw new Error();\n      }\n    } catch (_) {\n      throw new Error('Invalid URL: ' + url);\n    }\n  }\n\n  const command = browser === true ? null : browser;\n  await new Promise((resolve, reject) => {\n    opener(url, {\n      command\n    }, err => {\n      if (err) {\n        if (err.code === 'ENOENT') {\n          printAlternateMsg();\n        } else {\n          return reject(err);\n        }\n      }\n\n      return resolve();\n    });\n  });\n};\n\nmodule.exports = open;","map":{"version":3,"names":["opener","require","URL","open","npm","url","errMsg","isFile","encodeURI","browser","config","get","printAlternateMsg","json","alternateMsg","JSON","stringify","title","output","test","protocol","Error","_","command","Promise","resolve","reject","err","code","module","exports"],"sources":["/Users/chelsea/Documents/0_AllCoding/shoppingstories-v3/node_modules/npm/lib/utils/open-url.js"],"sourcesContent":["const opener = require('opener')\n\nconst { URL } = require('url')\n\n// attempt to open URL in web-browser, print address otherwise:\nconst open = async (npm, url, errMsg, isFile) => {\n  url = encodeURI(url)\n  const browser = npm.config.get('browser')\n\n  function printAlternateMsg () {\n    const json = npm.config.get('json')\n    const alternateMsg = json\n      ? JSON.stringify({\n        title: errMsg,\n        url,\n      }, null, 2)\n      : `${errMsg}:\\n  ${url}\\n`\n\n    npm.output(alternateMsg)\n  }\n\n  if (browser === false) {\n    printAlternateMsg()\n    return\n  }\n\n  // We pass this in as true from the help command so we know we don't have to\n  // check the protocol\n  if (!isFile) {\n    try {\n      if (!/^https?:$/.test(new URL(url).protocol)) {\n        throw new Error()\n      }\n    } catch (_) {\n      throw new Error('Invalid URL: ' + url)\n    }\n  }\n\n  const command = browser === true ? null : browser\n  await new Promise((resolve, reject) => {\n    opener(url, { command }, (err) => {\n      if (err) {\n        if (err.code === 'ENOENT') {\n          printAlternateMsg()\n        } else {\n          return reject(err)\n        }\n      }\n      return resolve()\n    })\n  })\n}\n\nmodule.exports = open\n"],"mappings":"AAAA,MAAMA,MAAM,GAAGC,OAAO,CAAC,QAAD,CAAtB;;AAEA,MAAM;EAAEC;AAAF,IAAUD,OAAO,CAAC,KAAD,CAAvB,C,CAEA;;;AACA,MAAME,IAAI,GAAG,OAAOC,GAAP,EAAYC,GAAZ,EAAiBC,MAAjB,EAAyBC,MAAzB,KAAoC;EAC/CF,GAAG,GAAGG,SAAS,CAACH,GAAD,CAAf;EACA,MAAMI,OAAO,GAAGL,GAAG,CAACM,MAAJ,CAAWC,GAAX,CAAe,SAAf,CAAhB;;EAEA,SAASC,iBAAT,GAA8B;IAC5B,MAAMC,IAAI,GAAGT,GAAG,CAACM,MAAJ,CAAWC,GAAX,CAAe,MAAf,CAAb;IACA,MAAMG,YAAY,GAAGD,IAAI,GACrBE,IAAI,CAACC,SAAL,CAAe;MACfC,KAAK,EAAEX,MADQ;MAEfD;IAFe,CAAf,EAGC,IAHD,EAGO,CAHP,CADqB,GAKpB,GAAEC,MAAO,QAAOD,GAAI,IALzB;IAOAD,GAAG,CAACc,MAAJ,CAAWJ,YAAX;EACD;;EAED,IAAIL,OAAO,KAAK,KAAhB,EAAuB;IACrBG,iBAAiB;IACjB;EACD,CAnB8C,CAqB/C;EACA;;;EACA,IAAI,CAACL,MAAL,EAAa;IACX,IAAI;MACF,IAAI,CAAC,YAAYY,IAAZ,CAAiB,IAAIjB,GAAJ,CAAQG,GAAR,EAAae,QAA9B,CAAL,EAA8C;QAC5C,MAAM,IAAIC,KAAJ,EAAN;MACD;IACF,CAJD,CAIE,OAAOC,CAAP,EAAU;MACV,MAAM,IAAID,KAAJ,CAAU,kBAAkBhB,GAA5B,CAAN;IACD;EACF;;EAED,MAAMkB,OAAO,GAAGd,OAAO,KAAK,IAAZ,GAAmB,IAAnB,GAA0BA,OAA1C;EACA,MAAM,IAAIe,OAAJ,CAAY,CAACC,OAAD,EAAUC,MAAV,KAAqB;IACrC1B,MAAM,CAACK,GAAD,EAAM;MAAEkB;IAAF,CAAN,EAAoBI,GAAD,IAAS;MAChC,IAAIA,GAAJ,EAAS;QACP,IAAIA,GAAG,CAACC,IAAJ,KAAa,QAAjB,EAA2B;UACzBhB,iBAAiB;QAClB,CAFD,MAEO;UACL,OAAOc,MAAM,CAACC,GAAD,CAAb;QACD;MACF;;MACD,OAAOF,OAAO,EAAd;IACD,CATK,CAAN;EAUD,CAXK,CAAN;AAYD,CA9CD;;AAgDAI,MAAM,CAACC,OAAP,GAAiB3B,IAAjB"},"metadata":{},"sourceType":"script"}